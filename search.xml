<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[WhatIsTheReal?]]></title>
    <url>%2F2020%2F10%2F10%2FWhatIsTheReal%2F</url>
    <content type="text"><![CDATA[我们所追寻的究竟是什么？ 感觉再也找不回当初奋斗的感觉了。 很久没写像样点的日记了，一时突然不知道怎么开头。其实之前也有想过每天写写日记什么的，但其实我自己的每一天其实都是差不多的，单调、乏味、重复的生活，一天就这么一天的过去了。 感觉自己好像是真的老了，真的，再也没有高考前的那种醒悟过来之后，每天学到半夜两点钟的那种奋斗感了。 现在回想起来那段时光，感觉那个时候才是真的好啊，三年只用学那么点的知识，努努力上个好的学校是真的容易，可是呢？当时的自己觉得也好苦好累好无聊，但其实现在回头来看根本不算什么，但可惜，等自己真的明白的时候已经晚了，好多事情其实都是一样的，普通人从来都是后知后觉的，后知后觉的人永远都只能活在无尽的懊悔之中，没办法，可能也是这个社会的缘故吧。 所以说了这么多开场还是回到主题吧，作为一个人究竟是想要追寻什么呢？ 其实这个问题想要泛泛的回答其实能给出很多的答案，就比如人们口中常说的幸福，兴趣或者说所谓的爱情吧。 但是不管是哪一种，好像都离我有点太远了。没错，感觉中国的这种僵化的教育已经把我弄成了书呆子一样的人物，最好笑的就是自己还什么都不懂。 我其实是挺喜欢思考的那种人，去探究问题的真理或者说去搞懂某一件事情的时候，会让我产生一种小小的成就感吧，虽然这种成就感或者说是一种小小的满足吧还不足以支撑着我去探究这个世界的本质，或者说我们生活的目的。 有的时候很羡慕那些学识渊博还很可爱的那些人，说实话，我在心里是向往成为那样的人的，但是呢，因为各种各样的原因我很难达到那样的水平，于是我心里会产生一种巨大的心理落差吧，不管是在哪个方面都让我感觉到很自卑，没错，和别人说话交流也是，我也很想知道为什么人长大会越来越自闭，可能是因为知道的太多了顾忌的太多了吧？ 我的一个很大的缺点就是太过于顾忌于别人的感受了，不管是多么小的一件事，我都喜欢想，我这么做了之后别人会怎么看我，怎么对我，但其实这样的性格，在生活上是对我的一种巨大的阻碍，就比如和陌生人打招呼这件事，在我看来几乎是不可能的一件事，因为我会联想到太多太多的尴尬的事情发生了，甚至，还会在我脑海里面演绎出各种各样奇怪的场景出来。 所以这样导致我的一个性格就是平时生活中我显得非常的冷漠，因为，我不知道如何跟不认识的人接触，所以在网上这样可以掩盖自己真实身份的情况下去和别人交流反倒让我觉得如鱼得水，但是倘若要把网络上的生活带入到生活中，其实我是很害怕的，因为在网络上的自己其实是想要表现出自己想要成为的那个自己的样子，但是现实里面却做不到。所以我常常说我一般会把网上和现实分割起来，也许你在现实中看到我会感觉这根本就不是一个人吧。 总之，被人际交往这种事烦也不是一天两天了，我心里即抗拒但又憧憬想要的那种生活，但是我希望自己和别人去交往的身份是我心里想要达到的那种，如果达不到就会让我特别的自卑以至于我会特别在意别人的一言一行的那种程度吧。 好像扯得有点远了，好久没有这样静下心来在电脑面前打打字思考思考了，每天盲目的去学习去做样子其实也是强行让自己安心下来而已吧，去图书馆待一整天好像很努力的样子，但其实我心里清楚每天根本就学不了多少东西，我有的时候也想问自己，你明明道理都懂，但是你为什么做不到？ 可能这就是人的本性吧，如果我都能做得到的话可能我现在也是一个人上人了吧，但其实我对自己挺失望的，真的，我本来可以做的更好的，我大学不该是这个样子的，我的青春不该是这样黑暗、伤心，让我不想再去回忆的青春。 可我不再是小孩子了，我也已经二十多了，其实能够体会到那种责任感或者说是成长过程中所必须要经历过的事情吧，我自己深刻体会到的一个道理就是只有你自己亲身经历过的事情你才会有刻骨铭心的回忆，哪怕你看了再多的教训，哪怕别人劝了你再多，其实都没用。我不知道别人，反正对我来说这种体会是很深很深的。 但是我很害怕走向社会什么的，去上班，去工作，每天像一具尸体一样回来躺在床上，这样的场景我根本无法想象，所以，其实说到底现在的人选择去读研去读博又何尝不是逃避工作的一种目的呢。 所以我羡慕那种up主一样的自由的生活，想做什么就做什么，也没人管自己，虽说也有一定的压力，但是看上去比工作好多了，虽然我知道全职的up主也是很辛苦的，但是起码他们有自己做着自己喜欢的事情啊。 好了，好像得回到一个老大难的问题了，就是究竟喜欢做什么？说实话，我到现在为止根本就没有答案，而且我觉得中国的教育体制是极其失败的，我还记得当初高考完报志愿的时候，我拿着那本志愿书，里面所有的专业没有一个让我感兴趣的，真的，读了七八年的书，让你一个月不到的时间去选择自己以后大概率要从事的事情，不是搞笑是什么，更可况当初我根本还没怎么在意，以至于现在的我，要花一整个本科的时间去弥补我当年的错误，真是可悲，因为好多专业就算不喜欢，我当时根本都不知道到底有多少坑，好了现在自己跳到坑里面了，再想爬出来真的好难好难。 好吧，我好像又在为自己找借口了，其实当初做错了一件事，有很多机会能够弥补回来，可惜的就是这些机会我都没把握住，或者说当我真正意识到的时候，已经没有那样的机会了。所以其实有时候也挺感慨的，机会运气这东西吧，有的时候真的是可遇而不可求，就像有的时候你真的说不清楚有些事情，究竟是命中注定还是只是运气不好？ 所以，我到底写了些什么啊草，刚才去吃了个饭回来感觉自己又在胡言乱语了，其实类似的这种话我在以前的日记里面已经讲了很多次了，但是好像我自己还是一直被一种无形的牢笼所困住，我渴望着去挣脱这样的一种束缚，但是一直都达不到。 说实话，我其实已经有点厌倦了，其实感觉有的时候知道的太多也不好，有的时候人其实单纯一点挺好的，感觉上了大学之后我自己的心胸也不是那么开阔了，可能是生活在那种心机的环境太久了吧，累了，倦了，其实有的时候我也很想知道为什么，为什么人就得按照既定的规律去做事呢，为什么一定要读书、工作、娶妻生子然后老去最后病死，虽然把人的一生用这样的过程抽象出来是不恰当的，但是我跟我家里人聊过，他们可能还是不太能接受我单身一辈子的那种生活吧，所以其实，虽然我并不排斥爱情和婚姻什么的，但是感觉人生在这个世界上其实已经不属于自己一个人了，你不能过的太自私，也就是没有绝对意义上的自由，但是我已经感受到了压迫在一个人身上的那种无形的负担吧，虽然，我希望能摆脱掉这种负担，但我知道，只要是你还生活在社会上，其实是逃避不了的。 算了，这种话题就此结束吧，其实就算我写半天也不会有什么结果的，也许等我考完研之后我想去阅读一些书籍，或许能够找到一些精神上的慰藉吧 可能最后还是要回归到现实吧，当下我最重要的任务就是考研了吧，其实我可能就是这样性格的一个人吧，我其实很早就开始准备了，但是直到现在，我感觉心里还是没有什么底，而且我觉得自己的自制力真的很差，我感觉始终都没有找到我自己的那种最好的状态吧，无论是在自习室还是在图书馆亦或者是在宿舍学习，我都能被各种各样的东西所干扰，有的时候其实我心里知道不应该那么做，但是有的时候身体的动作和自己大脑里面的想法是相反的，就好像有那种抑制不住的冲动？等到这个冲动的劲缓过来的时候，仿佛才记起了脑中的想法。 这种情况不只是出现在学习中吧，其实有的时候自己生气的时候也很容易这样，莫名其妙的生气，然后莫名其妙的会做出很多看不懂的事情，直到最后清醒过来最后又懊悔不已，可能这是我个人的一个很大的弱点吧，所以我尽量的需要去克服自己的弱点，其实我之前看过吴军老师写过的态度和见识，当时也是激励了一阵子，但是最后过了一段时间也是不了了之了，所以就像雷总经常说自己的故事一样，读完了《硅谷之火》之后心潮澎湃，找到了自己想要去做的方向以及前进的动力，但是很可惜，当下这个时候似乎已经没有多少大的变革的东西能够改变世界，所以每一个人只能去拼命的内卷去抢夺现有的资源，所以感觉时代的影响又比个人努力的影响似乎也不相上下呢，现在既没有那么好的机会，也没有那么差的环境连饭都吃不上，这种不上不下的局面其实有点尴尬。 但是如果说想成为的人的话我其实挺向往督工这种的，既对理工科的知识有所了解，又能利用自己社会科学的经验去批判社会上存在的种种问题，或许我并不需要这种批判问题的能力，但是我觉得遇到问题分析思考的能力是很重要的，而且思考你自己当下的处境，而不是简简单单的为资本家卖命的工作或者说是所谓的努力，所以今后我可能会往这个方向去发展自己的，嗯，因为我对社科其实挺感兴趣的，只是缺少时间去沉淀自己可能吧，虽然发现的有点晚，但是我渴望去阅读很多的著作而不是单纯的听b站或者知乎上各种各样的言论，你也得有自己的想法和思考才行。 如果说工作方面的兴趣，现在我暂时的把自己未来的目标放到了计算机这一行业里面，虽然被唱衰了很多年吧，但是这一行还是挺缺人的，只不过缺的是那种高端的人才吧，其实计算机还是挺能激发我的兴趣的，只是我没去探索那么多好玩的东西罢了，然后现在直接接触那些很枯燥的知识会让我产生一种厌恶感，但其实我知道这东西比起化学到实验室做枯燥无聊恶心的实验还是好了一万倍。其次就是我发现自己对金融投资方面的兴趣，虽然这其中自己失败了几次，但是感觉自己的心态也逐渐的发生了一些的变化，说不定我将来会去做量化投资之类的东西，金融这东西感觉国家未来会一直开放金融嘛，所以这方面的机会其实还挺大的，所以未来我也会抽时间不断的提升自己在这方面的一些知识，不至于以后很盲目的去做出一些操作来，虽然现在自己偶尔还会定投基金，但是等我考完研，我会潜下心来去研究那些公司的财务数据，筛选出自己心目中的好公司去投资吧，而不是做一个盲目的投机者。 (未完待续……)]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>今日份的暴论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode235-LowestCommonAncestorOfaBinarySearchTree-LCA]]></title>
    <url>%2F2020%2F09%2F27%2FLeetCode235-LowestCommonAncestorOfaBinarySearchTree-LCA%2F</url>
    <content type="text"><![CDATA[LeetCode486.二叉树的最近公共祖先-倍增法求LCA 55，周末有时间会写写题解离今年考试的时间不到三个月了呢。 题目 分析倍增法求LCA的大概思路 做法：先预处理两个数组depth[i]表示i在树中的深度，dength[1] = 1.f[i][j] ,表示i这个节点向上跳2^j的祖宗节点编号。可以通过递推算出后面的值。123fa[i][0] = 父节点;for(int k = 1; k &lt;= logn(下取整); k ++)fa[i][k] = fa[fa[i][k - 1]][k - 1]; 可以用dfs或者bfs遍历即可 ，为了防止爆栈一般用bfs.注意要设置哨兵方便运算。假如一些点往上2^k跳出了树，那么直接设置f[i][k] = 0;即可。 查找a，b的最近公共祖先步骤：1）假设a的深度比b大，反之交换即可。利用二进制拼凑的思想找到小于等于depth[b]的a所能跳到的最小值，然后a = f[a][k],直到两者相等为止。1234for(int k = logn(下取整); k &gt;= 0; k --) //哨兵的好处假如跳出去了，那么depth[a][k] = 0 &lt; depth[b] if(depth[fa[a][k]] &gt;= depth[b] ) a = fa[a][k]; 结束之后如果a = b 那么两者已经在同一点上了，返回a或者b即可。否则的话让两者继续往上跳，一直调到他们的最近公共祖先的下一层。因为如果调到同一层的话我们不知道这个点是不是ab的最近公共祖先1234567for(int k = log(n)下取整; k &gt;= 0; k --) // 哨兵的好处2假如两个点都跳出去，那么f[a][k] = f[b][k] = 0 ，就不会执行。 if(fa[a][k] != fa[b][k]) &#123; a = fa[a][k]; b = fa[b][k]; &#125; 最终答案就是f[a][0] 或者f[b][0]; 注意点 注意代码中depth[0] = 0这个哨兵的两个好处 我们最后是跳到共同祖先的下一个结点上，因为我们一直是倍增的再跳，很容易跳出最低的公共祖先，所以我们最后当fa[a][k] != fa[b][k]的时候a和b才分别跳到fa[a][k]和fa[b][k]上，最后这两个点一定不相等而且在祖先结点的下一层上 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: //因为leetcode不方便所以我把每个结点转化为以1开始的序号了 unordered_map&lt;TreeNode*,int&gt; change; unordered_map&lt;int,TreeNode*&gt; restore; static const int N = 40010; int depth[N],fa[N][16]; int k = 1; void invert(TreeNode* root)//转换 &#123; change[root] = k; restore[k] = root; k++; &#125; void bfs(TreeNode* root)//BFS初始化每个结点的深度顺便求出每个结点的祖先结点 &#123; depth[0] = 0; invert(root); depth[change[root]] = 1; queue&lt;TreeNode*&gt; t; t.push(root); while(t.size()) &#123; auto q = t.front(); t.pop(); int a = change[q]; if(q-&gt;left != nullptr) &#123; invert(q-&gt;left); int b = change[q-&gt;left]; depth[b] = depth[a] + 1;//儿子结点深度 = 父节点 + 1 fa[b][0] = a;//从b这个结点跳 2^0步就是自己的父节点 for(int k = 1;k &lt;= 15;k++) &#123; fa[b][k] = fa[fa[b][k-1]][k-1];//b结点跳2^k步 = b先跳到2^(k-1)到c结点，再从c结点跳2^(k-1)到祖先结点 &#125; t.push(q-&gt;left); &#125; if(q-&gt;right != nullptr) &#123; invert(q-&gt;right); int b = change[q-&gt;right]; depth[b] = depth[a] + 1;//儿子结点深度 = 父节点 + 1 fa[b][0] = a;//从b这个结点跳 2^0步就是自己的父节点 for(int k = 1;k &lt;= 15;k++) &#123; fa[b][k] = fa[fa[b][k-1]][k-1];//b结点跳2^k步 = b先跳到2^(k-1)到c结点，再从c结点跳2^(k-1)到祖先结点 &#125; t.push(q-&gt;right); &#125; &#125; &#125; int lca(TreeNode* a,TreeNode* b) &#123; int c = change[a],d = change[b]; if(depth[c] &lt; depth[d]) swap(c,d);//如果结点a在b的上面的话就交换 for(int k = 15;k &gt;= 0;k--) &#123; if(depth[fa[c][k]] &gt;= depth[d])//如果a这个点跳过2^k步后还是在b的下面或者同一层的话就跳 c = fa[c][k]; &#125; if(c == d) return c; //如果c和d 不相等的话，这个时候就说明a和b在同一层，然后此时应该两个点同时往上倍增的跳 for(int k = 15;k &gt;= 0;k--) &#123; if(fa[c][k] != fa[d][k])//如果同时跳2^k步还不相等的话继续跳 &#123; //cout&lt;&lt;fa[c][k]&lt;&lt;"--------------"&lt;&lt;endl; c = fa[c][k],d = fa[d][k]; &#125; &#125; // cout&lt;&lt;fa[c][0]&lt;&lt;"+++++"; //因为怕跳出最近的公共祖先，所以我们设定这两个点应该跳到祖先结点的下一层 return fa[c][0]; &#125; TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123; bfs(root); return restore[lca(p,q)]; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>LCA</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode486-PredictTheWinner-dp]]></title>
    <url>%2F2020%2F09%2F01%2FLeetCode486-PredictTheWinner-dp%2F</url>
    <content type="text"><![CDATA[LeetCode486. 预测赢家-动态规划 54,偶尔有时间写写题解www 题目及提示 分析 这道题如果用暴力去求解的话，每一次数都会面临选或者不选的问题那么时间复杂度会达到O(2^n),题目中n最大为20，显然暴力会导致超时 这个时候就需要想到动态规划的思路了个人理解动态规划主要是那个dp数组的定义比较重要，而这个完全是要经过长时间做题的积累才能想到的 定义dp[i][j]表示示当数组剩下的部分为下标i到下标j时，当前玩家与另一个玩家的分数之差的最大值这里指的注意的是当前玩家并不是先手玩家或者后手玩家而是有可能为先手有可能为后手 关键点关键在于给出了dp数组的定义，如果去写出转移的方程根据题意可以知道对于下标i到j的数组中当前玩家可以选择nums[i]也可能选择nums[j]，那么我们怎么去选择呢？ 如果当前玩家拿nums[i]这个数，那么下一个玩家就只能从[i+1,j]这个范围去拿数而且下一个玩家比当前选了nums[i]这个数的玩家，根据定义多f[i+1][j]的分值那么当前玩家比下一个玩家多的分数就是nums[i] - f[i+1][j]同理，如果当前玩家拿nums[j]，那么下一个玩家就只能从[i+1,j]这个范围去拿数那么当前玩家比下一个玩家多的分数就是nums[j] - f[i][j-1]于是f[i][j] = f[i][j] = max(nums[i] - f[i+1][j],nums[j] - f[i][j-1]); 最后运用区间dp的思路从len = 2从小到大去枚举即可 注意点 因为当i == j的时候，只有一个可选，则当前玩家比下一个玩家一定多nums[i]个分值也可以理解为只剩下一个数之后，这个时候该当前玩家拿数，拿完nums[i]之后，另外一个玩家就拿不了了，就一定多nums[i]的数 因为当前玩家一定是先手的，所以看f[1,n]如果大于等于0的话表示从1到n当前玩家比下一个玩家拿的数要大，于是一定获胜 本题还有一个值得思考的点，就是如果数组长度为偶数的话，那么先手一定获胜因为数组有偶数个数的话，那么先手和后手都会拿相同的数，那么这个时候相当于把一组数分成两组相同数量的数了由于数组长度为偶数，玩家为偶数，则一方所拿的数都在偶数下标阵营，另一方都在奇数下标阵营。奇数下标阵营的数一定和偶数下标阵营的数大小不同或者相等两个阵营能拿的分数是确定的，故先手玩家可以从两个阵营中选择较大那个阵营从而使自己一定必胜。 代码如下123456789101112131415161718192021222324252627class Solution &#123;public: bool PredictTheWinner(vector&lt;int&gt;&amp; nums) &#123; int n = nums.size(); if(n % 2 == 0) return true; vector&lt;vector&lt;int&gt;&gt;f(n+1,vector&lt;int&gt;(n+1,0));//f[i][j]表示在下标i到j这个范围内，当前玩家比下一个玩家多的分值 //因为当i == j的时候，只有一个可选，则当前玩家比下一个玩家一定多nums[i]个分值 //可以理解为只剩下一个数之后，这个时候该当前玩家拿数，拿完nums[i]之后，另外一个玩家就拿不了了，就一定多nums[i] for(int i = 1;i &lt;= n;i++) f[i][i] = nums[i-1]; for(int len = 2;len &lt;= n;len++) &#123; for(int i = 1;i + len - 1 &lt;= n;i++) &#123; int j = i + len - 1; //如果当前玩家拿nums[i]这个数，那么下一个玩家就只能从[i+1,j]这个范围去拿数 //而且下一个玩家比当前选了nums[i]这个数的玩家多f[i+1][j]的分值 //那么当前玩家比下一个玩家多的分数就是nums[i] - f[i+1][j] //同理，如果当前玩家拿nums[j]，那么下一个玩家就只能从[i+1,j]这个范围去拿数 //那么当前玩家比下一个玩家多的分数就是nums[j] - f[i][j-1] f[i][j] = max(nums[i-1] - f[i+1][j],nums[j-1] - f[i][j-1]); &#125; &#125; //因为当前玩家一定是先手的，所以看f[1,n]如果大于0的话表示从1到n当前玩家比下一个玩家拿的数要大，于是获胜 return f[1][n] &gt;= 0; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20200819]]></title>
    <url>%2F2020%2F08%2F19%2F20200819%2F</url>
    <content type="text"><![CDATA[再美好的时光终究也会就结束的那一天 & 写给四个月后的自己人类，不过只是喜欢不断的重复而且没有记性的生物罢了。终于，我是说终于，这场梦境终究要迎来它的结局了，是啊，想做梦一样今年不仅仅是发生了那么多的事情感觉像做梦一样，而且前几个月我自己做的事情也都像做梦一样，醒来的时候已经记不太清一样吧，几个月前的事我的记忆也很模糊了可能这就是人们口中常说的不操心的那种人吧 但其实说实话，我真的不觉得我是那种没心没肺的人，但是我的确很喜欢无厘头的去做一些事情，而且不喜欢重复，总想一次就把它做好。但其实真的能一次性做好的人，我觉得可能不存在于世界上吧，本身很多知识和记忆就是要通过不断大量的重复以及练习才能巩固的，既然大家都是普通人，你为什么就不喜欢多看几遍呢？ 我也觉得我有一个很大的毛病，就是喜欢假装努力。没错，就是每天给自己写一大堆计划，然后假惺惺的完成，自我感动你到底是想感动谁呢？所以现在想想真的是觉得好笑呢，到最后不懂的还是不懂，就这样完完全全的混过去了，以后要杜绝的就是这种现象，整天待到自习室或者图书馆还真以为自己学了个啥似的，所以，以后千万千万不要自我感动，这样子没有意义。 人们总是喜欢为自己找各种各样的借口，总之如果有什么事没做好或者说做错了，人们一定想到的就是开脱自己，自己永远是无罪的，自己永远是超脱凡尘的那种，只是因为一点点的外部因素就导致了失败，导致了放弃。我也是这样子的，在家里抱怨家里没有学习的氛围，但实际上呢，每天熬夜熬到那么晚，早晨起不来，然后中午午觉睡一两个小时，然后又匆匆忙忙的学了点，到了晚上以为自己白天真的很努力了然后摸鱼，每天都是这样子然后循环往复，最后就这么过了八个月。 说实话，现在回想起来真的很心痛，但是，再怎么心痛也都已经过去了，我现在要做好的就是把当下这剩下的四个月把握好，不管是什么原因，我想，自己也该为自己的前途拼搏一把了，就像当初高考最后只剩一百天我才急匆匆的醒悟，然后每天晚上学到两三点钟，但是最后还是没能如愿留下了巨大的遗憾。而三年后的今天，仿佛这种过程将会再一次的上演，所以我现在需要做的就是，避免类似三年前的重蹈覆辙]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>再美好的时光终究也会结束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20200815]]></title>
    <url>%2F2020%2F08%2F15%2F20200815%2F</url>
    <content type="text"><![CDATA[有一点感慨。一点点小小的感慨。 本来，只是跟以前的同学老朋友聚聚的一天，但可能今天不太一样，因为平时我都只跟朋友B出来吃吃饭什么的，然后能够聊聊最近发生的一些烦心事，聊聊未来的规划和打算什么的。 但是可能这次不太一样，这次我跟B还专门把朋友C叫了过来一起吃饭 我跟C也是一年没见面了，上回在一起吃饭还是在去年的暑假，真的是时光荏苒呢。 我不禁感到了一丝的伤感，不仅仅是伤感时间过的如此之快，同时也是有点伤感自己的碌碌无为。 跟B和C开心的去吃火锅了，仿佛又回到了高中的快乐的时光一样。我们聊了很多，也感慨了很多，不过让我有点意外的就是C跟我提到了我另外一个曾经的朋友D的情况 没错，这个D就是和我从小学一直同学到高中，然后最后去年因为各种原因被我删掉的那个人；说实话，我跟他并没有什么仇恨，也没有什么恩怨，也许以前我曾经跟他吵过架，但是后来我们俩又都互相写信给对方又和好了，没错，我主动给他写的很长一封信，然后他也回给我很长的一段话。我当时也确实挺感动的，真的，那张纸现在还好好的保存在我的钱包里面躺着，我一直都没扔掉，虽然过了这么多年我还从来没有真正的再看过，可能他心里早就忘了这么一件事了吧，但是对于我这种重感情的人是不可能会忘记的，对，不管是当初美好的回忆还是不好的回忆，只要是给我留下深刻印象的东西，我都不大可能会忘。 但令我吃惊的是C跟我说，D准备今年去考西电了，我觉得有点不可思议，因为D跟我说的时候他说他准备去上交甚至是出国去挪威那边去读书的(D是学船舶与海洋工程的)没错，在我心里，D虽然一直是个很心机的人，但是我觉得他当初只去了哈尔滨工程大学会一直耿耿于怀的，谁知道现在的目标降低了这么多。 因为我对这位曾经的”好朋友”有着很深的执念，嘛一般人应该也能懂的，反正我不停的去追问C关于D的任何事，希望能知道他现在的真实的现状。 “D其实就是个铁渣男” “啊？”，我当时听到C这么说觉得真的有点不可思议，因为我虽然知道D这个人上过大学曾经交过女朋友，但是也不至于渣男的地步吧。 “不骗你，其实他当初高中的时候就已经跟我们班的妹子好上了” 我整个人都傻了，因为当初高中的时候完全看不出来他谈过恋爱，因为我们当时基本上都天天生活在一起，天天一起上课下课都走在一起，完全看不出来有过这样的感情经历。 “所以啊，你怎么知道D当时展现给你的是他的哪一面呢？” 我释然了，从当初小学到高中在一起的感情深厚，再到现在的不再有任何联系，我好像明白了点什么。可能他这样的人，也只需要一段时间的朋友吧，当初的感情深厚，可能也只是我稍微有点利用价值吧。 我还是很难受，可能看到这里的你也会懂的吧，你对一个人坦诚相待，什么事情都跟他倾诉，把他当成知心朋友来对待，而他却始终只拿出自己表面的一面来展示给你。 说实话打字到这里，我真的有点难受了，真的，我的电脑上还放着周杰伦的《退后》，不知道是不是巧合，反正让我现在不知道是什么心情 嗯，我忍不住把钱包的那张纸拿出来看了。 三年前的四月份给我写的纸条，现在虽然已经微微的泛黄，但勉强还是能看得清里面大概的内容。 原来当初我们的感情也能这么的深厚啊，三年的时间其实我都忘得差不多了，但我还是能记得当初我和BCD还有一群人晚自习十点后走在马路上一起聊天一起开玩笑的时光，已经我过生日的那天我们一起吃饭一起去看电影，现在回想起来是多么开心啊。 “别太过于回想着过去了吧，容易让你沉浸在那种伤感之中，反而不利于你以后的发展”，C可能也察觉到了我感情的变化，好心的跟我说道。 没错啊，再也回不到过去了，与其在这件事上过度的伤感，不如多去接触接触外面的世界，多去交交新的朋友吧。毕竟事实已经这样了 C还给我看了D的微博，没错，D的微博三年前被C不小心关注到了，所以他现在能一直看到D微博的情况，于是C把D的微博内容给我看了看，里面全是那种跟女朋友秀恩爱的那种微博，而且几年下来好像确实有不少，”渣男”的名号好像也被这样的事实所实锤了，而且里面的内容和他在我们面前展示的那个”他”确实差别太大了。 嗯，是的，人是会变的嘛，当初的美好永远都只是当初的美好而已，长时间的美好往往是可遇而不可求的，何必为一个人而念念不忘呢？写到这里，看着他曾经给我写的纸条，想着他现在的样子，我不禁泪目，但也更坚定了我自己的决心。 去认识更多的人，提升自己的能力，交到更多真正的朋友 调整好自己的心态，毕竟，这才是真正的社会的样子。]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>突然就想写点什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20200814]]></title>
    <url>%2F2020%2F08%2F14%2F20200814%2F</url>
    <content type="text"><![CDATA[刻骨铭心的一个晚上可能长这么大，才终于开始渐渐的明白什么叫做人生吧。 我可能再也忘不了今天这个晚上。 原本以为，这是一个平静的一天，虽然学校已经告知了我们20号开学了的通知，我难免会有点感到伤感，但内心似乎跟以往并没有多大的变化 又能有什么变化呢，八个月的时间都仿佛改变不了我的习性，今天晚上发生的一件事却真真切切的让我感受到了真的不再是一个小孩子了。 晚上八点，我本来跟往常一样在洗澡，洗澡洗到一半突然听到楼下爷爷在大声的叫我，我本来还不太情愿的，因为正常人洗澡的时候突然有人找你，你肯定也很不爽吧。 我起初还没太在意，甚至还大声的问楼下爷爷有啥事，然后他根本没回答我紧接着又大声的喊我的名字要我快点下来，这个时候我才意识到可能是奶奶出事了。 我赶紧把身上随便擦了擦就穿个内裤跑下楼了。 我一边下楼一边打我爸的电话，这边出什么事我一般都是会习惯先跟我爸说的 果然跟我想的是最糟糕的情况，我的奶奶勉强的坐在板凳上，驼着背，然后我爷爷用手用力的上下在奶奶的背上滑动 我说，“奶奶这是怎么了？身体很不舒服吗？” “你奶奶差一口气人就没了！” 我当时听到整个人都懵了，怎么会这样子？我整个人真的就直接愣住了，正好接通了我爸的电话，我就赶紧把情况跟他说了甚至把爷爷说的差口气就没了的情形告诉他，他甚至要我直接去打120，但是我犹豫了一下没打，现在回想其实挺愧疚的，万一奶奶后来真出个什么事，我没有及时的拨打120，这是我能用什么东西可以换来的呢？ 跟我爸打完电话，爷爷叫我继续跟其他的家里的亲戚打电话，先跟离家里住的最近的二伯打，然后再和还在外面玩的大伯打电话，最后以至于家里的人几乎没多久就全来了。 说实话现在回想起来我感觉挺温暖的，家里有家里人互相支持是多么棒的一件事啊，我哥哥甚至听到我给他打电话说的那么严重，直接闯红灯开车回来想着快点把奶奶送去医院，说真的，我真的感觉好温暖好温暖，家里人一有人出什么事大家都来帮忙。 但同时我也感觉真的很愧疚，因为出什么事除了叫人我不知道怎么帮忙，因为一些基本的急救知识我都不知道，当初学的时候感觉不是很在意，现在真正的遇到发生事了才手足无措，我真的觉得是有点悲哀的一件事，但谢天谢地的事就是，奶奶最后没事，不然我可能会愧疚一辈子吧。 家里人陆陆续续的赶来了，甚至我妈妈把我家那边当过医生的我的姨伯和姨妈也叫来了，我是真的觉得很暖心，好在最后没啥大事，奶奶最后整个人也精神了起来。唉，但我还是好担心啊，留在那边会给他们造成负担，不在那边又担心就他们两个老人家出了什么事没人知道。 终于慢慢缓过劲来了，我哥哥还半开玩笑的对奶奶说到，“您这可不能就这么去了，您这还没看到我结婚，您家最小的那个（指的我）还没工作赚钱给您享福呢”我奶奶听到也是脸上笑了出来，老人家嘛，其实心里上都巴不得自己早点去了，但是他们还是希望能在有生之年看到自己的孙子们都能有所出息的。 所以那个时候，我真的感受到了一份沉甸甸的责任，什么叫做responsibility，你不是为了你自己而活着的，你还有你的父母，你还有你的爷爷奶奶，你还有你的很多亲戚，所以你不能过的太自私，你不能为了自己的快乐将别人抛之脑后。 所以我更加惭愧了。惭愧的是自己大学这几年的碌碌无为，惭愧的是自己今年在家八个月还什么都没干，果然什么事情都要拖到最后才会被你重视起来吗？可能我就是这样一个性格的人吧，不断的反思，但是又不断的重复错误，所以我觉得了解自己是个什么样的人也是一件挺重要的一件事，知道自己的极限，知道自己喜欢干什么不喜欢干什么要分好主次挺重要的，同时我觉得，敢于迈出自己的舒适区也是必要的，就像数学你不能每天只刷自己会写的题，那样对你永远也没有提升。 写了这么多，今天真的很多感慨，明天还要去和老朋友们聚一聚聊聊天，感觉整天把自己憋在家里好像真的挺自闭的，不过马上也要去学校了，虽然已经知道再也回不去从前那样的日子了，但我还是希望能够在学校重新找回自己当初那种拼搏的精神，不管是在宿舍还是在自习室，我希望能够找回当初三年前的那个我，虽然三年前的我拼搏过了，但是考场上败在了心态上，我希望这一次，不再重蹈覆辙把。加油！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>难忘的一个晚上</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20200712]]></title>
    <url>%2F2020%2F07%2F12%2F20200712%2F</url>
    <content type="text"><![CDATA[对不起，我对你真的生气了，我也是有脾气的人请你不要再让我失望了]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode139-WordBreak-dp]]></title>
    <url>%2F2020%2F06%2F25%2FLeetCode139-WordBreak-dp%2F</url>
    <content type="text"><![CDATA[LeetCode139.单词拆分-遇事不决动态规划XD53期末告一段落，接下来重心会转移一点到pat上leetcode每日一题会坚持刷 题目及输入输出 分析 这题可以用动态规划的思想去做(一开始我也没想到)f[i]表示字符串从1到i的位置是否可以由字典wordDict里面的字符串组成那么我们可以枚举1到i-1的位置，设j枚举i-1到1如果f[j] == true &amp;&amp; check(s.substr(j,i-j))即j之前的字符串已经匹配，且从j到i的字符串也在字典中返回true此时f[i] = true; 注意点 f[0]要初始化为true，因为我们这个方法是把f[i]从1到i的字符串分成两段去判断，左边是否匹配，右面是否在字典中但是一开始从最左边开始枚举的时候没有左边，此时就要把f[0]设置成true，因为在最左边的时候只需要看右边是否在字典中即可 j从后往前去枚举比较好，因为j如果从前开始枚举的话，那么从头开始枚举，比如很长的一串字符串applepenapple，j从小到大枚举pplepenapple，plepenapple，lepenapple…直到枚举到apple才能返回true，从后往前枚举的话显然枚举不了几次就枚举到了，个人理解是因为前面的字符串大多都已经匹配了，dp的思路就是前面的字符串符合+后面的字符串在字典中即可么，那么肯定是从后往前枚举字符串快 代码如下12345678910111213141516171819202122232425class Solution &#123;public: bool check(string s,unordered_set&lt;string&gt;&amp; t) &#123; return t.count(s); &#125; bool wordBreak(string s, vector&lt;string&gt;&amp; w) &#123; unordered_set&lt;string&gt; t(w.begin(),w.end()); vector&lt;bool&gt;f(s.size()+1,0); f[0] = true; for(int i = 1;i &lt;= s.size();i++) &#123; for(int j = i-1;j &gt;= 0;j--) &#123; if(f[j] &amp; check(s.substr(j,i-j),t)) &#123; f[i] = true; break; &#125; &#125; &#125; return f[s.size()]; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode5188-KthAncestorOfaTreeNode-LCAmultiplication]]></title>
    <url>%2F2020%2F06%2F14%2FLeetCode5188-KthAncestorOfaTreeNode-LCAmultiplication%2F</url>
    <content type="text"><![CDATA[LeetCode5188. 树节点的第 K 个祖先 - LCA倍增 52时隔半个月继续更新，以后可能会更新技术相关的东西了。但每周的周赛会继续坚持更新 题目 输入输出 分析 我们可以设一个函数f(i,k),表示i的第2^k个父节点是谁 比如要求v的第m个父节点是谁m的二进制表示为1100101那么我们可以拆成2的次幂相加，即2^0+2^1+2^4+2^5v—-(走2^0步)—&gt;v1=f(v,0)—-(走2^1步)—&gt;v2=f(v1,1)—-(走2^4步)—&gt;v3=f(v2,4)—-(走2^5步)—&gt;v4=f(v3,5)最后v4即是我们要找的父节点因为我们是用二进制来优化的，所以询问一次最大的次数就是logm 我们的问题就来到怎么处理f(i,k)数组了f[i,0] = p[i]即i这个点往上走1步就是i的父节点p[i]f[i,1] = f[f(i,0),0]相当于i的第2^1个父节点就是i的第2^0个父节点再走2^0步的父节点同理f[i,2] = f[f(i,1),1]相当于i的第2^2个父节点就是i的第2^1个父节点再走2^1步的父节点依次类推f[i,k] = f[f(i,k-1),k-1]相当于先走到2^k-1的位置，然后再走2^k-1步走到对应的父节点 需要注意的是，我们在预处理f[i,k]的时候，要求第i个点的所有状态的话，我们需要将i的所有祖先结点都处理出来这样我们可以用BFS来一层一层的进行求解 时间复杂度预处理的时间复杂度 = 状态的数量*每个状态计算的时间每个状态计算时间复杂度为O(1)那么状态的数量，有n个数，每次查询的时间复杂度为logn预处理时间复杂度为nlognn最大为50000，log50000 &lt; 16那么时间复杂度差不多就是16n 注意点 用邻接表去存储树 f数组要初始化为-1，防止状态从不合法的状态转移过来 要f[i][j-1] != -1的时候，f[i][j] = f[f[i][j-1]][j-1]; 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class TreeAncestor &#123;public: vector&lt;vector&lt;int&gt;&gt; f,g; TreeAncestor(int n, vector&lt;int&gt;&amp; p) &#123; f = vector&lt;vector&lt;int&gt;&gt;(n, vector&lt;int&gt;(16,-1)); g = vector&lt;vector&lt;int&gt;&gt;(n); int root = 0; for(int i = 0;i &lt; n;i++) &#123; if(p[i] == -1) root = i; else &#123; g[p[i]].push_back(i); &#125; &#125; queue&lt;int&gt; q; q.push(root); while(q.size()) &#123; auto t = q.front(); q.pop(); for(auto i : g[t]) &#123; f[i][0] = t; for(int j = 1;j &lt; 16;j++) &#123; if(f[i][j-1] != -1) f[i][j] = f[f[i][j-1]][j-1]; &#125; q.push(i); &#125; &#125; &#125; int getKthAncestor(int node, int k) &#123; int x = node; for(int i = 0;i &lt; 16;i++) &#123; if(k &gt;&gt; i &amp; 1) &#123; x = f[x][i]; if(x == -1) return x; &#125; &#125; return x; &#125;&#125;;/** * Your TreeAncestor object will be instantiated and called as such: * TreeAncestor* obj = new TreeAncestor(n, parent); * int param_1 = obj-&gt;getKthAncestor(node,k); */]]></content>
      <categories>
        <category>LeetCode</category>
        <category>LCA</category>
      </categories>
      <tags>
        <tag>LeetCode周赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode1458-MaxDotProductOfTwoSubsequences-dp]]></title>
    <url>%2F2020%2F05%2F26%2FLeetCode1458-MaxDotProductOfTwoSubsequences-dp%2F</url>
    <content type="text"><![CDATA[1458. 两个子序列的最大点积 - 类似最长公共子序列 207加油哇，你可不能这么轻易的就认输了。51 题目 输入输出 分析这题跟最长公共子序列几乎完全一样最长公共子序列从不同的序列中选出相同的子序列的最大长度的方案这题就是从不同序列中对应元素选出点积之和最大的方案 闫氏dp分析法集合：f[i][j]表示只考虑从A[1到i] B[1到j]的所有选择子序列的方案的集合 属性：最大值 这里选Ai不选Bj，和f[i][j-1]这个不太相同 因为根据我们的定义f[i][j-1]表示的是从A中的1到i中选，从B中的1到j-1中选得到的点积的最大值的集合 那么显然从A中的1到i中选可以不包含Ai，这里就跟我们选Ai不选Bj不太一样但是从A中的1到i中选，从B中的1到j-1中选也一定是包含选Ai不选Bj的情况的，因为我们求的是最大值，所以也就无所谓了 这个f[i][j-1]虽然范围更大可能和别的集合有交集，但是并不妨碍我们求最大值 同理，f[i-1][j-1]这个区间被包含在了f[i][j-1]和f[i-1][j]之中，所以这种情况也可以舍去 注意点 因为这题求的是点积的最大值，因此初始化的时候我们不能默认f[i][j]全为0，而是应该把f[i][j]先初始化为负无穷然后把f[i][0]和f[0][j]的所有状态设置成为0，f[i][0]表示第2列一个都没选为0，f[0][j]表示第1列一个都没选为0(注意这里i和j要包含0，因为f[0][0]表示一个都不选的情况对应的值为0)如果极端情况，一列全是正数一列全是负数，那么可能一个都不选，所以我们需要处理这种情况因为如果选的话一定是f[i-1][j-1] + nums1[i-1]*nums2[j-1]这种情况所以我们可以提前预处理t = f[i-1][j-1] + nums1[i-1]*nums2[j-1];然后让res = max(res,t)最后res就是得到的最后的结果了，表示所有的第四种情况取一个最大值这样子，就算一列全是正数一列全是负数，我们也能得到负数的情况中最大的那种情况(即两列各选两个数使得负数负的最小)因为第四种情况一定是包含A[i]和B[j]的，所以最后的结果也是从最后一种情况而来 因为所有的方案都是从f[i-1][j-1] + nums1[i-1]*nums2[j-1]这个操作里面来的，表示选A[i-1]和B[i-1]因为每次都是选A[i-1]和B[i-1]，所以每次选出来的两列的长度都是同时+1，所以就保证了长度一定是相同的 代码如下12345678910111213141516171819202122232425class Solution &#123;public: int f[510][510]; int maxDotProduct(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; int n1 = nums1.size(),n2 = nums2.size(); memset(f,-0x3f,sizeof f); for(int i = 0;i &lt;= n1;i++) f[i][0] = 0; for(int i = 0;i &lt;= n2;i++) f[0][i] = 0; int res = INT_MIN; for(int i = 1;i &lt;= n1;i++) &#123; for(int j = 1;j &lt;= n2;j++) &#123; f[i][j] = max(f[i-1][j],f[i][j-1]); int t = f[i-1][j-1] + nums1[i-1]*nums2[j-1]; res = max(res,t); f[i][j] = max(f[i][j],t); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>dp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LeetCode1371-NOR-PrefixSum]]></title>
    <url>%2F2020%2F05%2F21%2FLeetCode1371-NOR-PrefixSum%2F</url>
    <content type="text"><![CDATA[LeetCode1371. 每个元音包含偶数次的最长子字符串50,正好一百多天写了五十几篇博客，属实懒狗没错了(逃 题目 分析 引入 前缀和：将双变量转为单变量[i,j] 区间确定出一个子串，题目条件：[i, j] 内出现的元音均为偶数变量有 2 个，如果找齐所有区间需要两层循环我们可不可以转为单变量？所有事情在一次遍历中完成其实这类“子串”、“子数组”问题，可以利用【前缀和相减】转化为：[0, j] 的元音次数 -− [0, i - 1]对应的元音次数 == 偶数求 [0,x] 的元音次数，变量就只有 1 个了 求出每个元音次数的差值有必要吗？ 我们只关心差值是不是偶数，不关心偶数等于几奇数 - 奇数 = 偶数；偶数 - 偶数 = 偶数；一个偶数一个奇数之差一定是奇数因此条件等价于：[0, j] 出现的元音次数的奇偶，相同于，[0, i - 1] 对应的元音次数的奇偶特别注意出现 0 次（没有出现），也是出现了偶次~ 非奇即偶，奇偶是相对的状态两个相反、相对的状态，可以抽象为 0 和 1 —— 用 0 代表偶数，1 代表奇数[0,x]的 u o i e a 各自出现的奇偶次数，都用 0/1 表示，组成一个 5 位二进制数。譬如，00001，代表其中 u o i e 都出现偶次（包括0），a 出现奇次管这叫 [0,x]区间的 state ，它包含 [0,x] 中 5 个元音出现次数的奇偶信息题目再次等价转化条件等价转化为：[0, j]的 state 和 [0, i - 1]的 state 相同，即两个二进制数相等！题目转化为：在所有满足该条件的 i、j组合中，找出 j - i最大的两个 前缀区间 相距越远，代表形成的 子串越长 呀~~遍历字符串，不断求出 [0, x]的 state ，看看 哪些 state 是相同的，并找出位置 离得最远 的 怎么求前缀区间的 state假设 [0,2]的 state 是 00110 ，代表出现 e 和 i 奇数次，假如下一字符是 i，则 [0,3]区间出现的 i 次数变为偶数， state 为 00010遇到 ii ，从 00110 变到 00010 ，第三位从 1 翻转为 0，其他位不变使特定的位翻转 正是 异或 的作用，第三位翻转，就是异或了 00100异或 相当于 不带进位的二进制加法，所以有 00110 ^ 00100 = 00010元音字母 u o i e a ，分别对应了：10000、01000、00100 ……所以，当前前缀区间的 state 等于 前一个求出 state 异或 当前字符对应的二进制数。好比累乘、累加，只是这是 累异或预置 -1 的情况，使通式普遍适用[i,j] 的 u o i e a 出现偶次 &lt;=&gt; [0, j]的 state 相同于 [0, i - 1] 的 statei 显然可以为 0 ，则 i-1 为 -1 ，特别地，我们让 [0,-1] 的 state 是 00000 ，表示在字符串 -1 的位置，所有元音都出现 0 次（偶数）为了让边界情况也能套用通式，即 i= 0 时，[0,j]的元音都出现 偶次 &lt;=&gt; [0, j] 的 state 等于 00000，通式成立！ 前缀区间的 state 怎么存可以选择存到 数组 里，数组的索引和字符位置一一对应也可以用 哈希Map，存键值对key： state 值value：对应在字符串中的位置我们选择 Map ，将逐个求出的 [0, x]的 state 存入 Map为了书写方便，转成十进制，00110 就存 6 ，是等价的寻找满足条件的 state遍历过程中，边存 state ，要边在 Map 中查找：看看有没有 之前存过的，与当前 state 相同的 state如果有，则可能不止一个，要根据 value 值，求出它离当前位置的距离，找出有着最长距离的那个，就是我们想要的最大子串长度 主要思路准备工作准备一个哈希表unordered_map，key存放state，键值存放对应的下标如果当前的state不在哈希表里面，就存放到哈希表里面如果当前的state已经在哈希表里面了，那么此时的下标i减去对应相同状态的mp[state]中存放的下标，就是一个符合条件的字符串于是我们每次从0开始从头开始枚举到n，从符合条件的字符串中找到的最大的长度就是我们需要的结果 注意点初始的时候要把mp[0] = -1，意味着初始化的时候为-1，如果接下来的i是从下标为0开始的，如果i一直都不是元音字符的话那么从第一个字符下标0开始，res = 0 - (-1) = 1，如果第二个字符也不是元音字符的话，res = 1 - (-1) = 2然后依次类推… 代码如下12345678910111213141516171819202122232425class Solution &#123;public: int findTheLongestSubstring(string s) &#123; int res = 0; unordered_map&lt;int,int&gt; mp; mp[0] = -1; int state = 0; for(int i = 0;i &lt; s.size();i++) &#123; switch(s[i])&#123; case 'a': state ^= 1; break; case 'e': state ^= 2; break; case 'i': state ^= 4; break; case 'o': state ^= 8; break; case 'u': state ^= 16; break; default: break; &#125; if(!mp.count(state)) mp[state] = i; int distance = i - mp[state]; res = max(distance,res); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>NOR</category>
        <category>PrefixSum</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing1593-IntegerFactorization-dp-SpecificPlan]]></title>
    <url>%2F2020%2F05%2F10%2FAcWing1593-IntegerFactorization-dp-SpecificPlan%2F</url>
    <content type="text"><![CDATA[AcWing1593. 整数分解 - 二维费用的完全背包求具体方案49 题目 输入输出 分析这道题目大致的题意就是给你一个数n，看能不能划分成k个p进制数的和即划分成n = a1 ^ p + a2 ^ p + … + ak ^ p 这题用暴搜在AcWing上会超时但是经过昨晚y总的讲解我原来豁然开朗，原来这道题可以转化为一个二维费用的完全背包问题求具体方案问题这波啊,这波是我没想到的 于是我顺便来整理下大致的思路吧大致的思路就是把n这个数看成背包的容积N因为n最多不超过400，然而p进制最少为2所以物品的价值最大可以取到20(因为20^2 = 400) 时间复杂度20*400*400 = 3200000 &lt; 10^7所以可以用dp来进行求解 每个物品i的体积为i^p,重量为1，价值为i 所以这道题目就被转化成从前i个物品中取，体积恰好为j，重量恰好为k的取法的方案的最大价值所以根据闫氏dp分析法我们可以很容易的得到状态转移的方程f[i][j][k] = max(f[i-1][j][k],f[i][j - v[i]][k - w[i]] + value[i]); 注意点 因为我们要使划分的数恰好分成几个数的和，所以我们就不能像原来那样的背包问题一样设置成体积最多为j和重量最多为k的取法的方案定义为体积和重量分别恰好为j和k的时候，我们只用对f[i][j][k]中的值全部memset为负无穷即可只定义f[0][0][0] = 0即可这样也很好理解，因为根据定义出发体积恰好为j，重量恰好为k的时候当i = 0即一件物品都不取的时候，这个时候只有j = k = 0的时候是合法的状态即一件不取的时候价值为0，f[0][0][0] = 0你如果一件都没取，j和k肯定只能为0，j和k如果不为0，只可能是你取了物品但是你没取物品，说明这个状态是不合法的，所以我们就要全部设置为负无穷不让后面状态转移从这些不合法的状态转移过来 因为题目要求我们输出各因子之和最大的一种解法所以我们就可以把每件物品的价值定义成各个数本身即第i个物品的价值为i，这样，我们最后dp得到的最大值就是各因子之和最大的方案 求具体的方案因为题目也要求是选择因子序列最大的方案所以我们在最后求得最大的价值的时候，我们从最后一个状态转移回去，看能转移到那些状态对应的数，就可以保证我们最后得到的序列的字典序最大因为我们是从前往后枚举的，我们最后从后往前枚举能够转移的状态，本身就是从尽可能大的数来开始枚举的，所以最后这样的状态转移可以保证我们得到的序列是字典序最大的其次就是我们在求具体的方案的时候，应该用while循环来进行判断状态是否能转移，因为是完全背包，物品的数量是无限的，一个物品可能会被取到多次 什么时候是不存在方案的？当f[t][n][k]是小于0的时候，说明我们想要得到的状态是从负无穷即不合法的状态转移过来的，这个时候我们就可以确定是没有解决方案的，直接输出impossible即可 确定物品的个数我们可以预先从1开始处理出物品的体积、重量、价值第i个物品的体积为i^p,重量为1，价值为i且当i^p &gt; n的时候就可以结束循环了，这样子我们就可以确定最多有几个可能取到的物品了 因为PAT的蛋疼的输出，我们需要先定义一个is_first的布尔变量来对第一个进行特别的输出 如果对完全背包问题不太熟悉的话可以看看 3. 完全背包问题如果对背包问题求具体方案不太熟悉的话可以看看 12. 背包问题求具体方案如果对二维费用的背包问题不太熟悉的话可以看看 8. 二维费用的背包问题 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;using namespace std;/*背包容量为N，重量不超过k每个物品i从1到20中选，每个物品i对应的体积为i^p，重量为1，价值为i设f[i][j][k]为从前i个物品中选，体积恰好为j重量恰好为k的最大价值的方案f[21][410][410]*/const int N = 22,M = 410;int f[N][M][M];int n,k,p;int v[N],w[N],value[N];//v[i]和w[i]分别对应第i个物品的体积和重量int main()&#123; cin&gt;&gt;n&gt;&gt;k&gt;&gt;p; memset(f,-0x3f,sizeof f); f[0][0][0] = 0; int t = 0; //自己手动计算出物品对应的体积、重量、价值 for(int i = 1;i &lt;= 20;i++) &#123; if(pow(i,p) &gt; n) break; v[i] = pow(i,p); w[i] = 1; value[i] = i; t++; &#125; int i,j,m; for(i = 1;i &lt;= t;i++) for(j = 0;j &lt;= n;j++) for(m = 0;m &lt;= k;m++) &#123; f[i][j][m] = f[i-1][j][m]; //跟完全背包一样的推导公式，只不过多了一维 if(j - v[i] &gt;= 0 &amp;&amp; m - w[i] &gt;= 0)f[i][j][m] = max(f[i][j][m],f[i][j - v[i]][m - w[i]] + value[i]); &#125; int flag = 0; bool is_first = true; if(f[t][n][k] &lt; 0) puts("Impossible");//如果状态小于0，说明状态不合法，即没有能够成立的方案 else &#123; for(i = t,j = n,m = k;i &amp;&amp; j &amp;&amp; m;i--) &#123; //如果状态能够转移过来，那么就输出 while(f[i][j][m] == f[i][j - v[i]][m - w[i]] + value[i]) &#123; if(is_first) &#123; cout&lt;&lt;n&lt;&lt;" = "&lt;&lt;i&lt;&lt;"^"&lt;&lt;p; is_first = false; &#125; else &#123; cout&lt;&lt;" + "&lt;&lt;i&lt;&lt;"^"&lt;&lt;p; &#125; j -=v[i],m-=w[i]; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>PAT</category>
        <category>dp</category>
        <category>SpecificPlan</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[PAT-1624-SubwayMap-dijkstra]]></title>
    <url>%2F2020%2F05%2F09%2FPAT-1624-SubwayMap-dijkstra%2F</url>
    <content type="text"><![CDATA[一个复杂模型的堆优化版本的dijkstra - PAT1624. 地铁地图48 题目 输入输出 示例 分析因为最多有100条路线，每条路线最多有100站所以总共最多就有10000个点如果我们只根据每条线路的相邻两个站来建图的话那么我们在从A、B两条路线的中间站走到A路线的一个站点的时候，我们就不知道它到底是从另一条路线B路线过来的还是就从A路线过来的所以，我们就可以让一条线路上的所有点都两两互相连一条边，这样我们在最短路判断的时候就能知道它到底是从本身的路线过来的还是从其他路线换乘过来的 如图所示，每条线路都两两建立一条边，然后一条边上100个点，互相就会有(100*99约等于)10000条边，然后又有100条线路所以最多会连接1000000(10^6)条边 每条边的距离就是这个站点与下一个站点相邻的最小距离然后题目要求找到换乘次数最少的线路，可以转换成从起点到达终点找到经过边的条数最少的问题因为很显然的道理，我们只有到达中间两条路线交错的地方A去换乘，这个时候就只会形成1条边，而你如果到A之前多次上车下车会形成多条边，这样没有意义 所以换乘次数最少，就被我们转化成为从起点到终点经过的边数最少的路线了 分析时间复杂度，我们把换乘次数最少转化为边数最少之后一共有10000(10^4)个点，1000000(10^6)条边，所以用朴素版的dijkstra会超时这个时候我们就要转化成堆优化版本的dijkstra，这题的时间复杂度限制在0.4s 时间复杂度会降低到mlogn 注意点 我们在一条路线站与站之间建立边的时候要注意如果线路不是环线的话,即stops[0] != stops[m-1]的话那么对于点j和点k的话，stops[j]与stops[k]的距离就是abs(j-k)如果线路是环路的话，即stops[0] == stops[m-1]的话那么我们从stops[j]到stop[k]的距离就要选环上最短的连接距离了即从j到k，abs(j-k)与j到m-1，再从0到k，即(m-1-j) + (k - 0) = m-1-j+k看j-k和m-1-j+k谁小我们就设置stops[j]和stops[k]之间的距离为谁然后我们就可以dijkstra从起点到终点找到最小的距离了，以及最少的边数(即最少的换乘次数) 如果到i的距离可以从到j的距离加上j到i的距离更新的话我们这个时候就记录dist[i] = dist[j] + w[i]pre[i] = jcnt[j] = cnt[i] + 1 如果到i经过的最小边数可以从到j经过的最小边数再加上j到i的边数(即换乘的次数)更新的话，那么这个时候也要更新即pre[i] = jcnt[j] = cnt[i] + 1 如果可以到i的距离可以从到j加上从j到i的距离更新的话，那么这个时候也要记录这个时候更新i是从j的那条线路上更新而来的，而且最后的结果一定是从一个站点换乘到另一个站点即line[i] = “Take Line#” + to_string(line[j])—-get_string(j)—-&gt;get_string(i); 最后记录end到start的路线，然后同时记录是从哪些站点过来的，然后这些站点会记录是从哪条线路的哪条站点过来，然后最后存到一个path数组再输出就好了 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std;const int N = 10010, M = 1000010;#define x first#define y secondtypedef pair&lt;int,int&gt; PII;int n,m;int h[N],e[M],w[M],line[M],ne[M],idx;//记录从h[idx]到e[idx],且距离为w[idx],所在线路为line[idx]上bool st[N];//判断该点是否已经走过int cnt[N];//记录要换乘的站点数int dist[N];//记录最短距离int pre[N];//记录每个结点的前面一个结点是谁string info[N];//记录每个点是从哪个结点搭过来的int stops[N];string get_string(int a)//如果a没有4位的话就加前置0补齐4位&#123; string res = to_string(a); while(res.size() &lt; 4) res = '0' + res; return res;&#125; void add(int a,int b,int c,int id)//建图，一条线路上的各个点之间都要建边，而且要确定这个站是在哪条路线上&#123; e[idx] = b; w[idx] = c; line[idx] = id; ne[idx] = h[a]; h[a] = idx++;&#125;void dijkstra(int start,int end)&#123; memset(dist,0x3f,sizeof dist);//找到从起点到终点最小的距离 memset(cnt,0x3f,sizeof cnt);//找到最少的边即最少的换乘次数 memset(st,0,sizeof st); priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap; heap.push(&#123;0,start&#125;); dist[start] = cnt[start] = 0; while(heap.size()) &#123; auto t = heap.top(); heap.pop(); int ver = t.y; if(ver == end) break; if(st[ver]) continue; st[ver] = true; for(int i = h[ver]; ~i ; i = ne[i]) &#123; int j = e[i]; if(dist[j] &gt; dist[ver] + w[i]) &#123; dist[j] = dist[ver] + w[i]; cnt[j] = cnt[ver] + 1; pre[j] = ver; info[j] = "Take Line#" + to_string(line[i]) + " from "+get_string(ver)+" to " +get_string(j)+"."; heap.push(&#123;dist[j],j&#125;); &#125; else if(dist[j] == dist[ver] + w[i]) &#123; if(cnt[j] &gt; cnt[ver] + 1) &#123; pre[j] = ver; cnt[j] = cnt[ver] + 1; info[j] = "Take Line#" + to_string(line[i]) + " from "+get_string(ver)+" to " +get_string(j)+"."; &#125; &#125; &#125; &#125; vector&lt;string&gt;path; for(int i = end;i != start;i = pre[i]) &#123; path.push_back(info[i]); &#125; cout&lt;&lt;dist[end]&lt;&lt;endl; for(int i = path.size()-1;i &gt;= 0;i--) &#123; cout&lt;&lt;path[i]&lt;&lt;endl; &#125;&#125;int main()&#123; memset(h,-1,sizeof h); cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) &#123; int m; cin&gt;&gt;m; for(int j = 0;j &lt; m;j++) cin&gt;&gt;stops[j]; for(int j = 0;j &lt; m;j++) for(int k = 0;k &lt; j;k++) &#123; int len; if(stops[0] != stops[m-1]) len = j - k; else len = min(j-k,m - 1 - j + k); add(stops[j],stops[k],len,i),add(stops[k],stops[j],len,i); &#125; &#125; cin&gt;&gt;m; while(m--) &#123; int start,end; cin&gt;&gt;start&gt;&gt;end; dijkstra(start,end); &#125; return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
        <category>dijkstra</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode45-JumpGameII-DPandGreed]]></title>
    <url>%2F2020%2F05%2F04%2FLeetCode45-JumpGameII-DPandGreed%2F</url>
    <content type="text"><![CDATA[一道简单的dp加上贪心思想的题目 - LeetCode45.跳跃游戏II47 题目 分析动态规划这道题可以用动态规划的思路去求解 闫氏dp分析法 对应的dp代码就是123456789101112131415161718192021class Solution &#123;public: int jump(vector&lt;int&gt;&amp; nums) &#123; int n = nums.size(); vector&lt;int&gt;f(n+1); for(int i = 1;i &lt; n;i++) &#123; int t = INT_MAX; for(int j = 0;j &lt; i;j++) &#123; if(j + nums[j] &gt;= i) &#123; t = min(t,f[j]+1); &#125; &#125; f[i] = t; &#125; return f[n-1]; &#125;&#125;;但是很显然，这样dp最坏的情况下时间复杂度会达到O(n^2)会超时 这个时候我们就需要思考应该怎么样改进我们的代码了 贪心 + 动态规划通过枚举单纯的动态规划我们可以知道，f[N]数组里面是单调递增的大概就是0,1,1,2,2,2,….所以f[i]是一个单调递增的数组又从动态规划的状态转移方程可知f[i] = f[j] + 1我们要枚举i之前的能跳到i的所有j，然后每次找到一个符合条件的j之后就f[i] = f[j]+1因为初始的时候f[j]都为0，所以不管找到多少个j，都只会使得f[i]在0的基础上加1 找到第一个能跳到i的j的时候更新了一次f[i]，之后无论再找到多少个j都只能使得f[i] = 0+1 = 1也就是说除了第一个点之外，后面找到的点都是进行的重复的操作 所以我们只用找到第一个能跳到i的点j，然后用j去更新i的状态即f[i] = f[j] + 1 动态规划时瓶颈就在于更新每个点的最小值时需要遍历所有能跳到i的点，而有了单调性以后就可以用第一个能跳到i的点更新了 因为找到第一个点和遍历所有的点都只遍历了一次，所以时间复杂度会降到O(n) 对应的代码1234567891011121314class Solution &#123;public: int jump(vector&lt;int&gt;&amp; nums) &#123; int n = nums.size(); vector&lt;int&gt;f(n+1); for(int i = 1,last = 0;i &lt; n;i++) &#123; while(last &lt; i &amp;&amp; last + nums[last] &lt; i) last++;//找到能跳到i的第一个点 f[i] = f[last] + 1;直接更新f[i] &#125; return f[n-1]; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>dp</category>
        <category>greed</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题-五月份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing292-ArtilleryPosition-StateCompressionDP]]></title>
    <url>%2F2020%2F05%2F04%2FAcWing292-ArtilleryPosition-StateCompressionDP%2F</url>
    <content type="text"><![CDATA[稍微复杂一点的状态压缩dp - AcWing292.炮兵阵地 46 题目 输入输出 分析这题其实是上道题玉米田的进阶 区别在于这题的限制范围从1行扩大到了2行，所以我们dp的状态应该多加一维即f[i][j][k]表示所有摆完前i行且第i-1行状态为j，第i行状态为k摆放方案的最大值 假设第i-1行状态为a，第i行状态为b，第i-2行状态为c 那么我们假设想确定第i行是什么状态，那么我们就要用第i-1行和第i-2行的状态加上第i行能摆放的所有方案确定第i行的状态 即f[i][a][b] = max(f[i][a][b],f[i-1][c][a] + cnt[b]);这里的cnt[b]表示第i行对应的状态里面有多少个1(即对应二进制中1的个数) 从而可以求出摆放完第i行方案的最大值是多少 需要注意的几个问题 因为这题摆放完一个炮兵之后那么它上下左右长度为2形状为一个十字的地方都不能摆放炮兵 所以我们需要预处理状态，把不冲突的状态枚举出来所以我们需要预先处理摆放在同一行不冲突的状态先枚举出来存到state里面 这里冲突的判断条件就是二进制状态state判断条件(state &gt;&gt; i) &amp; 1 &amp;&amp; ((state &gt;&gt; i+1 &amp; 1) || (state &gt;&gt; i+2 &amp; 1))如果为1的话说明冲突了不能作为合法的状态否则为合法的状态存到state里面 这题里面有山地的存在，山地是不能摆放炮兵的我们可以把山地定义为1，平原定义为0 然后把第i行的初始状态的二进制表示转化为十进制表示存到数组g[i]中如果我要枚举的那一行的状态为a的话 如果g[i] &amp; a &gt; 0表示我想要到第i行摆放的炮兵会摆放到山地上，所以导致了冲突 我们会分别枚举第i-2行、第i-1行、第i行的状态(这些状态都是从之前挑选的合法状态state中枚举) 这三行的炮兵也不能互相攻击到，意味着三行的状态，两两都不能在同一列上(因为我们之前枚举的合法状态避免了行与行之间的冲突所以不用再次考虑) 假设第i-1行状态为a，第i行状态为b，第i-2行状态为c 那么对应的判断条件(a &amp; b) || (a &amp; c) || (b &amp; c)也不能为真 这题需要我们用滚动数组去求解 为什么要用滚动数组?分析时间复杂度，因为f[i][j][k]表示所有摆完前i行且第i-1行状态为j，第i行状态为k摆放方案的最大值那么i最大为100，j和k最大为1 &lt;&lt; 10即1024，1024*1024*100 / 1024 / 1024 = 100MB但是题目只给了64MB，所以我们需要缩小第1维的大小去做 所以我们只用对第1维&amp;1即可，即f[n &amp; 1][a][b]对应的状态转移方程中改成f[i &amp; 1][a][b] = max(f[i &amp; 1][a][b],f[i-1 &amp; 1][c][a] + cnt[b]);因为这样i &amp; 1一定和(i - 1)&amp; 1不会相同，所以f的三维可以定义为f[2][M][M]第一维对应的第1行一定是从第0行转移过来，第0行一定是从第1行转移过来 最后枚举倒数两行的状态res += f[n &amp; 1][i][j]，i和j都是合法状态state里面的状态，如果存在值说明能转移过来得到对应的值，如果不能转移过来值为0不影响结果 当然你也可以选择y总那样的写法，枚举到n+2行，最后f[n+2 &amp; 1][0][0]就是对应的最终值 枚举第i-2行、第i-1行、第i行的顺序可以互换，只要状态定义的顺序和状态计算的顺序对应即可 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;const int N = 110,M = 1 &lt;&lt; 10;int n,m;int f[2][M][M];//f[i][j][k]表示所有已摆完第i行，且第i-1行状态为j，第i行状态为k的最大值int cnt[M];//记录每个状态中炮兵的数目(也就是1的数目)int g[N];//记录每一行的山地情况vector&lt;int&gt;state;//记录每个合法的状态bool check(int state)//判断合法的状态，相邻两格之间不能有两个1&#123; for(int i = 0;i &lt; m;i++) &#123; if((state &gt;&gt; i) &amp; 1 &amp;&amp; ( (state &gt;&gt; i+1 &amp; 1) || (state &gt;&gt; i+2 &amp; 1))) return false; &#125; return true;&#125;int count(int state)//计算每个状态中的1的个数即炮兵的个数&#123; int res = 0; for(int i = 0;i &lt; m;i++) res += state &gt;&gt; i &amp; 1; return res;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 0;j &lt; m;j++) &#123; char c; cin&gt;&gt;c; if(c == 'H') g[i] += 1 &lt;&lt; (m - j - 1);//把山地和平原看成01二进制然后转化为十进制存放到数组中欧冠 &#125; //cout&lt;&lt;g[i]&lt;&lt;endl; &#125; //筛出合法的状态 for(int i = 0;i &lt; 1 &lt;&lt; m;i++) &#123; if(check(i)) &#123; state.push_back(i); cnt[i] = count(i);//计算对应每个合法状态中1的个数即炮兵的个数 &#125; &#125; //for(int i = 1;i &lt;= n+2;i++) for(int i = 1;i &lt;= n;i++) &#123; for(int u = 0;u &lt; state.size();u++)//第i-1行的状态 &#123; for(int j = 0;j &lt; state.size();j++)//第i行的状态 &#123; for(int k = 0;k &lt; state.size();k++)//第i-2行的状态 &#123; int a = state[u],b = state[j],c = state[k]; if((a &amp; b) || (a &amp; c) || (b &amp; c)) continue;//第i行、第i-1行、第i-2行不能相互攻到 if((g[i-1] &amp; a) || (g[i] &amp; b) || (g[i-2] &amp; c)) continue;//第i-1行和第i行不能占到山地上，从而确定了第i行和第i-1行的状态，然后就可以枚举第i-2行的状态 f[i &amp; 1][a][b] = max(f[i &amp; 1][a][b],f[i-1 &amp; 1][c][a] + cnt[b]); &#125; &#125; &#125; &#125; //cout&lt;&lt;f[n+2 &amp; 1][0][0]; int res = 0; for(auto t1 : state) &#123; for(auto t2 : state) &#123; res = max(res,f[n &amp; 1][t1][t2]); &#125; &#125; cout&lt;&lt;res; return 0;&#125;]]></content>
      <categories>
        <category>StateCompression</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ViewAndInsightOfCOVID-19]]></title>
    <url>%2F2020%2F05%2F04%2FViewAndInsightOfCOVID-19%2F</url>
    <content type="text"><![CDATA[记录一下疫情爆发四个多月的感悟和一点思考老师要写的一篇论文，顺便把它贴到博客上好了里面有些是客套话看个乐子就完事了x 2020年当真是一个魔幻的年代，每个人可能都未曾想到会是以这种方式来开局，离当初疫情爆发差不多快过去了四个多月，现在回过头来看我们当初疫情爆发的时候，肯定想不到今天会有今天这样子，趁着这个机会我也想写一写我对这个疫情的所见所闻所感，以及对我们当下国家乃至整个世界会产生什么样的深远影响。 还记得一月份期末考试结束，我在一月十二号搭高铁回家，其实当时大家就已经有警觉感了，因为当时不管是火车站还是地铁上，其实人们都已经有所意识，到处都在消毒到处都在通风，但是当时还没多少人戴口罩，人们当时也许觉得只是一个比较严重的流感而已，因为那个时候还没有明确的说明这个病毒是具有明显的人传人的迹象，所以当时虽然人们有所警觉，但是并没有多少人会想到这样的局面。 我在回家以后，局势慢慢的就变得不那么明确了起来，每天的新闻的报道越来越严重，我又处于疫情最严重的湖北这个地方，所以说实话，当初其实是对这个病毒心里有点抵触的，但其实更担心的是家里的老年人，我完全不敢设想如果他们感染了病毒，我们家这个小小的家庭会产生什么样的变故，好在的是，当时家里人都对这个病毒有很大的防备心，从各种渠道去买了很多口罩屯在家里以备不时之需，全家人除了去超市买生活必需品基本上都不出门，值得庆幸的是，家里的亲戚都安然无恙，甚至几个在当医生的亲戚朋友也都很健康，我觉得这才是在一场灾难面前不幸中的万幸吧。 对于这场疫情，我觉得应该保持一种客观、求实的态度去评价政府的工作，对于政府，既有做的好的地方，自然也有做的不好的地方。 先说说我认为做的不好的地方吧，我觉得最大的感触就是疫情之处信息不透明，从去年12月31日就知道感染的患者就已经从华南海鲜市场传染到其他地方了，这样一个明显的人传人的现象当初没有及时的传递给公众，虽然说当时有可能传递恐慌的情绪，但是我觉得政府的透明应该做的更好才行，而不是一味的隐瞒，我觉得李文亮医生的事迹我们不能忘记，正是有类似李文亮医生的吹哨人才能传递给公众事实的真相，所以我们需要更加完善这样一种重大疫情的反馈机制才行，而不是被少数人一拖再拖。其次我觉得应该增加国家CDC（卫健委）的地位才行，不应该让CDC的决策者去一层一层的上报上级才行，而是需要单独把CDC独立出来，他们应该有自己的声音去面对不同程度的疫情有着及时、迅速的上报和反馈机制才行再说说我觉得我们政府做的好的地方吧，那就是社会主义国家动员全国之力去办大事的能力，因为我听家里的老人说过，即便是非典的时候当时在我的家乡湖北，都没有面临过这么严峻的局面，好在政府调集全国各地的医疗队来志愿武汉志愿湖北，我觉得从内心里面是真的很温暖，因为真心体会到什么叫做“一方有难，八方支援”，我觉得这样的动员机制，是保障我们在遇到突发重大应急事件的一个有力的举措。其次就是我觉得中国的医疗体系需要继续的保持下去，不能被一些人忽悠把医疗全部私有化，公有化的医疗体系也是不可少的，否则如果全部都是私有化的医院，再遇到重大突发事故，哪个医生愿意站出来为你支援呢？所以我觉得也得警惕一些人想把中国的医疗体系全部私有化的论调，我觉得医生的待遇水平当然应该提高，但是混合所有制的医疗体系也是必不可少的，不能全盘照搬西方的经验，西方好比北欧他们的医疗福利体系是有着高税收来保证体系的运转的，不同的国家有着不同的国情，我们中国需要发展出符合自己特色的医疗体系去适应中国人民日益增长的医疗需求，但同时也需要满足医生们的权益，保证他们首先，安全要受到保证，坚决抵制那些伤医的行为，要把这种行为坚决写进法律里面，给医生以最大的保障；其次就是应该提高医生的待遇水平，只有医生的待遇水平提高了，才能减少那些医生和药房合谋的行为，从而也减少了医生乱开药的行为。所以如何平衡这两者，我觉得需要我们的政府和广大人民去集思广益去商量出一个比较好的一个解决方案。 我觉得我们也不能盲目的去迷信西方，迷信西方的那套理论，因为当初二月份的时候，当我们的疫情还在刚开始发酵的时候，西方都在看我们的戏，我们当中也有不少声音，应该照搬西方的那套救助的体系，才能保证我们能够控制住疫情，可是最后的结果却让人大跌眼镜，西方的人均医疗资源类似每个人平均的病床数都比中国要高不少，可是呢？结果西方因为政治家们的作秀，导致他们失去了控制疫情的宝贵时间，导致他们疫情的大爆发，就拿美国来说，他们总的新冠疫情的确诊人数已经超过了一百万，对比中国的八万多的数据，如果把美国的数据放到我们中国，那简直是不可想象的一件事，而且重点是美国地广人稀，但是他们还是抗疫失败了，所以值得我们思考的是，要避免像西方那样，将抗疫政治化，变成政治家们的一场作秀，本来应该是一场可怕的病毒导致的疫情，却被像特朗普这样的政治家形容成“只是一个大号的流感”，并且还引用美国每年死亡于流感的人数拿新冠疫情的死亡人数来做对比。恕我直言，这样的人是对生命对自然没有一点敬畏之心的人，我真的对西方国家死亡于新冠疫情的人们感到悲哀，如果不是他们政府的无能和无视，哪会有这么多人会白白的死于新冠疫情之中？可笑的是，这些应该为这场灾难负责的政治家们现在还活蹦乱跳的活跃在生活中，并且就算到现在为止还时不时的去质疑这场灾难，还想着疫情还没完全消除的情况下就完全复工复产，可以这么说，在这些政治家的眼中早已失去了人性，失去了对生命的敬畏之心，他们在意的只是自己的选票罢了，所谓的感染人数，所谓的死亡人数，在他们的眼里可能只是简简单单的一个数字罢了，但是对于那些因新冠疫情死亡的人们，每一个数字都意味着一个家庭的破碎，所以我希望我们中国人要有自己，不仅是对自己的制度方面要有自信，而是对各个方面都要有自信 我其实也是在反思，为什么我们对西方媒体的一些宣传如此感兴趣？个人认为，说到底还是一个话语权的问题，中国现在是在国际上去找到一种认同感，但是这个话语权不在自己的手上，所以对于西方来说，无论你中国做的有多好有多差，他们在话语之间就能把一个白的东西描述成黑的，比如如果中国抗疫的好，那一定是政府偷报瞒报数据了；如果中国抗疫的不好，就是理所当然的事情，是因为社会主义没有资本主义优越，反正一个问题你从不同的角度去分析完全可以得出一个不同的结论。所以在美国为首代表的西方势力的眼里，中国就像古代还尚未开化的蛮夷一样，你做什么都是错的，哪怕连呼吸都是错的，都应该是被口诛笔伐的对象，中国应该学会像日本那样脱亚入欧才能受到我们西方的尊重，所以我觉得用一句话来总结就是用毛的话来说就是“放弃幻想，准备斗争”，就比如从中美贸易战开始，我们当时其实有很多投降派害怕美国对中国的围追堵截，诶，觉得只要美国能放过中国，那么一切代价都是可以付出的，我觉得其实这也是一种民族不自信的体现，你觉得如果真的对美国的要求一再的妥协满足，美国难道就真的会满足吗？不见得吧，反倒会一直变本加厉，苏洵早在《六国论》里面就有曾说过，“今日割五城，明日割十城，然后得一夕安寝。起视四境，而秦兵又至矣。”这句话放到如今何尝不适合？当初苏联解体之后，俄罗斯作为继承苏联的主体对美国抛出的一个个橄榄枝信以为真，把国有资产廉价的卖给西方，把航空母舰、各种武器当做废铁一样卖给别人，一味的按照西方的休克疗法一步步去瞎搞，最后差点俄罗斯元气大伤，从一个发达国家退回成发展中国家，难道这样的事实还不值得我们所警惕并吸取教训吗？ 诚然，在这个后真相时代，英文名叫做“post-trush”，我们作为个人也需要对我们眼前的所见所闻所感要有自己一个清晰的认知，不能轻易的被媒体的一些事实所带节奏，其实很多媒体所报道的事情，根本就没有辨别出事情的真相，只是为了满足当下人们的口味，为了符合人们的感性诉求然后对事实调油加醋之后再加工形成的作品，人们对事实的真相本身是什么并不感兴趣，人们对事情产生的情绪已经超过了事实的本身，我们需要警惕这种现象的发生，同时我们也要意识到所谓的媒体们所报道的事实不一定就一定是事实的真相，我们需要自己保留自己的一份独立的思考才行，不能盲目根据片面的报道就跟着起哄，同时也希望一些媒体能够以客观公正的态度去报道新闻才行。回到我们的新冠疫情带来的危机，危机危机，那么自然有危也有机，新冠疫情给我们带来的负面影响固然很大，但是我们同时需要看待，这何尝不是一场危机呢，促使我们国家加快对数字化、5G、信息互通等方面的建设。 说几个将来疫情结束之后会带来改变的产业吧。 第一就是在线教育和协同办公，这个几乎每个学生或者工作了的人都深有体会吧，学生在家里需要用手机电脑等一起上课，工作的人需要用软件的方式远程办公协同才行，我觉得这次新冠疫情是对这几个产业的一个发展的大机遇，因为它已经深刻的改变了我们平时的生活方式，所以他们需要思考，如果疫情结束之后恢复平静之后，这个产业要怎么做才能更加有竞争力，能够让人们在疫情结束之后能够习惯这样的学习或者工作方式。 第二就是新零售，疫情的原因，导致我们都不能出门到实体店去购物，去实地的考察，这个时候新零售的发展机遇就很大了，如何使得人们坐在家里就能够像线下的方式去购买到自己想要买的东西，未来新零售的发展趋势一定是线上与线下相结合的方式才能够满足未来广大消费者日益增长的需求，才能够在未来日趋激烈的竞争中生存下来 第三就是医疗建设方面的发展了，经过这次疫情，估计每个人对于医疗健康方面的意识都大大提高，我觉得这也是这些企业的一个机遇了，因为原来没有这场疫情之前人们可能都还抱着一个无所谓的态度，但是经历过后这种深刻的印象，会导致人们对于未来的医疗健康的保障方面会有着更高的要求。最后就是人们对于智慧城市方面有着更高的要求了，因为武汉这个千万人口级别的城市封城导致我们的生活带来了巨大的影响，但假设武汉对于每个市民的情况都能被掌握，每个人都能够被精确的追踪，每个流动人口都能被记录，那么即便下一次再遇到类似的灾难我们也会应对的从容有序，智慧城市包括：交通管理、物流供应链、应急灾备、信息溯源等等，都会全面数据化，甚至具备了人工智能的灾备预测等等。相信疫情过后，中国对于城市的管理水平，会更上一层台阶。 最后的最后，我想说，2020年的开局虽然很艰难，但是中国人民从来就是不怕艰难和困苦的，从哪里跌倒，就要从哪里爬起来，中国人民的学习精神一直是世界上各个民族最诚恳的，所以我对我们中国未来的发展，抱有着充分乐观的态度去看待它，但是我同时也得指出，未来可能疫情会常态化发展，很可能新冠疫情会一直伴随着我们，伴随着全世界都难以被彻底消灭，所以我们需要时刻保持一个警惕的态度去应对不同的局面，不能再有疫情一开始的麻痹大意了，但同时，我相信，只有经历过磨难之后，希望的花才能绽放的更加璀璨吧！]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>新冠疫情下的一点思考与见解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing12-NumberOfOptionsForTheBackpackProblem-dp]]></title>
    <url>%2F2020%2F05%2F02%2FAcWing12-NumberOfOptionsForTheBackpackProblem-dp%2F</url>
    <content type="text"><![CDATA[AcWing12. 背包问题求方案数 - dp45 题目 输入输出 分析这题问的就是在01背包的条件下，问最优选法的方案数 所谓的最优选法，就是找到使背包价值最大的方案的总数 我们可以用两个数组来进行计算f[i][j]和g[i][j] 其中f[i][j]表示从前i个物品中选，体积恰好为j的方案的最大价值注意这里定义的是体积恰好为j，所以初始化的时候要把除了f[0][0]之外的全部初始化为负无穷 g[i][j]表示从前i个物品中选，体积恰好为j的方案的最大价值时的方案数 那么g[i][j]就是对应着f[i][j]的方案数 那么我们看f[i][j]的状态转移方程 f[i][j] = max(f[i-1][j],f[i-1][j-v[i]]+w[i]); 如果f[i-1][j] &gt; f[i-1][j-v[i]]+w[i]意味着最大价值的方案要从f[i-1][j]转移过来那么g[i][j] = g[i-1][j] 如果f[i-1][j] &lt; f[i-1][j-v[i]]+w[i]意味着最大价值的方案要从f[i-1][j-v[i]]+w[i]转移过来那么g[i][j] = g[i-1][j - v[i]] 如果f[i-1][j] == f[i-1][j-v[i]]+w[i]说明最大价值的方案从这两条路线都能转移过来那么意味着两条路径都要相加，并且记得取模即g[i][j] = (g[i-1][j] + g[i-1][j - v[i]]) % mod; 然后从f[n][i]中找到价值最大为res然后再循环f[n][i]，如果当f[n][i] == res的时候对应cnt = (cnt + g[n][i]) % mod;这里表达的意思就是把找到最大价值时的选法总数全部加起来 这样最终得到的cnt即为最优方案的总数 没有优化前的代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N = 1e3+10,mod = 1e9+7;int n,m;//f[i][j]表示从前i个物品中选，体积恰好为j的最大价值//g[i][j]表示从前i个物品中选，体积为j时取到最大价值的方案数int f[N][N],g[N][N];int v[N],w[N];int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i]; memset(f,-0x3f,sizeof f); f[0][0] = 0; g[0][0] = 1; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 0;j &lt;= m;j++) &#123; f[i][j] = f[i-1][j]; if(j - v[i] &gt;= 0) &#123; f[i][j] = max(f[i][j],f[i-1][j-v[i]]+w[i]); if(f[i-1][j] &gt; f[i-1][j-v[i]]+w[i]) g[i][j] = g[i-1][j]; else if(f[i-1][j] &lt; f[i-1][j-v[i]]+w[i]) g[i][j] = g[i-1][j - v[i]]; else g[i][j] = (g[i-1][j] + g[i-1][j - v[i]]) % mod; &#125; else &#123; g[i][j] = g[i-1][j]; &#125; &#125; &#125; int res = 0; for(int i = 0;i &lt;= m;i++) res = max(res,f[n][i]); int cnt = 0; for(int i = 0;i &lt;= m;i++) &#123; if(f[n][i] == res) &#123; cnt = (cnt + g[n][i]) % mod; &#125; &#125; cout&lt;&lt;cnt; return 0;&#125; 把数组的二维等价化简为一维123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N = 1e3+10,mod = 1e9+7;int n,m;int f[N],g[N];int v[N],w[N];int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i]; memset(f,-0x3f,sizeof f); f[0] = 0; g[0] = 1; for(int i = 1;i &lt;= n;i++) &#123; for(int j = m;j &gt;= v[i];j--) &#123; /* int maxv = max(f[j],f[j-v[i]]+w[i]); int cnt1 = 0; if(maxv == f[j]) cnt1 = (cnt1 + g[j]) % mod; if(maxv == f[j-v[i]]+w[i]) cnt1 = (cnt1 + g[j-v[i]]) % mod; g[j] = cnt1; f[j] = maxv; */ if(f[j] &lt; f[j-v[i]]+w[i]) g[j] = g[j - v[i]]; else if(f[j] == f[j-v[i]]+w[i]) g[j] = (g[j] + g[j - v[i]]) % mod; f[j] = max(f[j],f[j-v[i]]+w[i]); &#125; &#125; int res = 0; for(int i = 0;i &lt;= m;i++) res = max(res,f[i]); int cnt = 0; for(int i = 0;i &lt;= m;i++) &#123; if(f[i] == res) &#123; cnt = (cnt + g[i]) % mod; &#125; &#125; cout&lt;&lt;cnt; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>backpackdp</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode3-LongestSubstringWithoutRepeatingCharacters-TwoPoints]]></title>
    <url>%2F2020%2F05%2F02%2FLeetCode3-LongestSubstringWithoutRepeatingCharacters-TwoPoints%2F</url>
    <content type="text"><![CDATA[LeetCode3.最长不含重复字符的子字符串 - 双指针 44 题目及输入输出 分析这题是一个经典的双指针算法的问题 暴力做法就是两重循环，就是从每个字母从前往后去找不重复的字符串 然后每次取一个max 那么我们怎么去优化呢？ 我们可以用一个双指针i和j从下标0开始 如果没有重复的字符串就把j往后移动，j++ 否则遇到了重复的字符串就把i往后移，i++ 然后每次移动的过程中都取一次max 举例 对于字符串”abcabcbb”那么j一直加到3的时候，其实表明这个时候前面有3个不同的字符串然后每次都要取一个最大值res = max(res,j-i); 对于字符串”abdvvvdcfgvdd”j加到前面的那几个v对应的第二个v的下标的时候因为这个时候对应的v始终都为true所以i会不断向右移动直至与j相等为止 所以如果中间有很多重复的元素，那么双指针算法总是可以跳过重复元素，然后从重复元素的最右端的那个元素再从前往后进行枚举 代码如下1234567891011121314151617181920212223class Solution &#123;public: unordered_map&lt;char,bool&gt; judge; int lengthOfLongestSubstring(string s) &#123; int res = 0; for(int i = 0,j = 0;i &lt; s.size() &amp;&amp; j &lt; s.size();) &#123; if(!judge[s[j]]) &#123; judge[s[j]] = true; j++; &#125; else &#123; judge[s[i]] = false; i++; &#125; res = max(res,j-i); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>TwoPoints</category>
      </categories>
      <tags>
        <tag>LeetCode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing327-CornField-StateCompression]]></title>
    <url>%2F2020%2F05%2F01%2FAcWing327-CornField-StateCompression%2F</url>
    <content type="text"><![CDATA[状压dp的简单例子 - AcWing327.玉米田43 题目 输入输出 分析考虑状态的表示通常需要保存一定的状态数据(一种状态需要对应一种数据值)同时每个状态数据可以分解成许多数据单元 通常情况下每个状态数据可以通过一个整数来表示同时将这个整数分解成二进制形式。 比如在一行棋盘的格子上放棋子，在格子上放棋子表示1不放棋子表示0。 这样用0或者1来表示状态数据的每个单元，而整个状态数据就是一个一串0和1组成的二进制数。通常这样的状态数据实现为一个基本的数据类型或者一种哈希值，同时需要注意的是状态数据中的每个单元不能太多。 具体题目的思路状态转移方程f[i][j]表示所有摆完前i行，且第i行状态为j的方案数那么对于每一个合法的状态f[i][b]，上一行的状态为f[i-1][a];那么f[i][b] += f[i-1][a]枚举每一个上一行能转移到下一行的状态如果我们能枚举出每个能从i-1行状态转移到第i行的状态，然后把所有能转移的状态全部加起来并取模就得到了所有能转移到第i行的合法状态 状态压缩dp一般都要求预先把合法的状态i能够转移到其他所有合法状态都预先处理出来注意，这里有两个要求，第一是状态合法，第二是状态i能够转移到状态j，那么我们就把能转移的合法状态记录下来即head[state[i]].push_back(state[i]); 因为题目给的条件是1表示土地肥沃可以种，0表示不能种，这里我根据习惯把所有的1变成0，把所有的0变成1，即1代表不能种，0代表可以种，即a[i][j] ^= 1，这样做的好处是不能种的地方为1方便判断，比如上一层对应的状态与这一层对应状态的同一列都为1的话说明状态i就不能转移到状态j，这个时候我们只用判断state[i] &amp; state[j] 如果大于0的话说明不合法即 1234bool check(int a,int b)//检查a和b的两个状态是否有重合的部位,这里的a和b对应着二进制状态的十进制表示&#123; return !(a &amp; b);&#125; 然后把每一行的01序列转化为十进制存放到num数组里面 枚举从0到(1 &lt;&lt; m) - 1的合法状态并且存放到state中，这里的合法状态是指状态的二进制表示不能有连续的1 枚举每一个合法的状态state，如果state[i]和state[j]没有重合的1的话说明状态可以由state[j]转移到state[i]并且存放到head[M]中，即head[state[i]].push_back(state[j]) 初始化f[0][0] = 1,表示一行都没摆的情况下，方案数为1然后枚举每一行i从1到n令c = num[i]表示第i行初始的状态然后再枚举合法的状态，如果第i行初始的状态与合法的状态state[j]没有重复的1的时候表示第i行可以种成state[j]的形式然后再枚举能转移到state[j]的每个状态，表示上一层能够转移到下一层的所有可能的合法状态，最后加上取模 1234567if(check(c,state[j])) &#123; for(int k : head[state[j]]) &#123; f[i][state[j]] = (f[i][state[j]] + f[i-1][k]) % mod; &#125; &#125; 再次强调一下，因为我这里把题目中的0和1全部都颠倒了一遍，即0变成1,1变成0，这样做的好处就是如果判断冲突的时候同一列位置如果都是1就不能种下去，方便我们判断 最后的结果就是第n行枚举每个状态i从1到 (1 &lt;&lt; m) -1res = (res + f[n][i]) % mod如果能转移到的状态就存在对应的值，不能转移到的状态对应的值就为0 当然你也可以跟y总那样枚举到n+1行，然后f[n+1][0]就是对应的最终值 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;const int N = 15,M = 1 &lt;&lt; 12,mod = 100000000;int f[N][M];//f[i][j]表示所有摆完前i行，且第i行状态为j的方案数int a[N][N];//记录初始的地图int num[M];//记录每一行初始的二进制状态的十进制表示int n,m;vector&lt;int&gt;state;//记录合法的状态vector&lt;int&gt;head[M];//head[state[i]]表示能转移到state[i]的所有合法状态int calculate(vector&lt;int&gt; t)//把每一层的二进制状态转换成十进制&#123; int res = 0; reverse(t.begin(),t.end());//把二进制翻转一下方便我们计算 for(int i = 0;i &lt; t.size();i++) &#123; res += pow(2,i)*t[i]; &#125; return res;&#125;bool judge(int t)//如果哪个状态有连续的1说明不能作为合法的状态&#123; for(int i = 0;i &lt; m;i++) &#123; if((t &gt;&gt; i &amp; 1) &amp;&amp; (t &gt;&gt; (i+1) &amp; 1)) return false; &#125; return true;&#125;bool check(int a,int b)//检查a和b的两个状态是否有重合的部位&#123; return !(a &amp; b);&#125;/*//等价写法bool check(int a,int b)//检查a和b的两个状态是否有重合的部位&#123; for(int i = 0;i &lt; m;i++) &#123; if((a &gt;&gt; i &amp; 1) &amp;&amp; (b &gt;&gt; i &amp; 1)) return false; &#125; return true; &#125;*/int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) &#123; vector&lt;int&gt;tmp; for(int j = 1;j &lt;= m;j++) &#123; cin&gt;&gt;a[i][j]; a[i][j] ^= 1;//把所有的1变成0，所有的0变成1方便我们后续的判断 tmp.push_back(a[i][j]); &#125; num[i] = calculate(tmp);//把每一层的二进制状态转化为十进制 &#125; for(int i = 0;i &lt; 1 &lt;&lt; m;i++)//保证每个状态都没有连续的1 &#123; if(judge(i))//如果每个对应的二进制中没有连续的1，说明可以作为合法的状态并记录 &#123; state.push_back(i); &#125; &#125; for(int i = 0;i &lt; state.size();i++)//state[i]和state[j]没有重合的1的话说明状态可以由state[j]转移到state[i]，并存放到head[M]里面 &#123; for(int j = 0;j &lt; state.size();j++) &#123; if(check(state[i],state[j])) &#123; head[state[i]].push_back(state[j]); &#125; &#125; &#125; f[0][0] = 1;//表示一行都没摆的情况下，方案数为1 for(int i = 1;i &lt;= n;i++) &#123; int c = num[i];//第i行初始的状态 for(int j = 0;j &lt; state.size();j++) &#123; if(check(c,state[j]))//如果第i行初始的状态与合法的状态state[j]没有重复的1的时候，表示第i行可以种成state[j]的形式 &#123; for(int k : head[state[j]]) &#123; f[i][state[j]] = (f[i][state[j]] + f[i-1][k]) % mod;//枚举能转移到state[j]的每个状态，并加上取模 &#125; &#125; &#125; &#125; int res = 0; for(int i = 0;i &lt; 1 &lt;&lt; m;i++) res = (res + f[n][i]) % mod; cout&lt;&lt;res; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>StateCompression</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCodeInterviewQuestion51-XOR]]></title>
    <url>%2F2020%2F04%2F28%2FLeetCodeInterviewQuestion51-XOR%2F</url>
    <content type="text"><![CDATA[LeetCode面试题51. 数组中数字出现的次数 - 异或 42 题目及输入输出 分析由题意可知，题目要求时间复杂度为O(n),空间复杂度为O(1) 那么也就意味着 只能通过循环去解决问题 不能去额外开哈希表、数组或者其他容器 我们的解决方法就是用异或的方法 如果题目中只有一个数出现1次，其他数都出现2两次那么我们只用初始化res = 0;for(int t : nums) res ^= t;最后相同的数都会被抵消，异或的结果为0，得到的结果肯定为只有出现1次的那个数 但是题目中有两个数出现的次数为1次对于数组中不同的只出现过1次的数a和b 我们可以先从头到尾把数组所有的数都异或一遍这样得到的结果即为a ^ b 对于a ^ b，因为a和b一定不相同，所以a和b的二进制中至少有1位是不同的那么我们就可以根据这个特点来进行分组 对于a ^ b，向右移k位时为1，就表示a和b的二进制表示在第k位一个为0一个为1那么我们重新遍历数组，对于每个数的二进制表示初始化a = 0,b = 0第k位为0就与a异或，第k位不为0就与b异或 最后得到的a和b就是数组中只出现过1次的两个数 代码如下12345678910111213141516171819202122232425262728293031class Solution &#123;public: vector&lt;int&gt; singleNumbers(vector&lt;int&gt;&amp; nums) &#123; int t = 0; for(int tmp : nums) &#123; t ^= tmp; &#125; int i; for(i = 0;i &lt; 20;i++) &#123; if(t &gt;&gt; i &amp; 1 == 1) &#123; break; &#125; &#125; int a = 0,b = 0; for(int tmp : nums) &#123; if(tmp &gt;&gt; i &amp; 1 == 1) &#123; a ^= tmp; &#125; else &#123; b ^= tmp; &#125; &#125; return &#123;a,b&#125;; &#125;&#125;;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>XOR</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing1064-StateCompression]]></title>
    <url>%2F2020%2F04%2F27%2FAcWing1064-StateCompression%2F</url>
    <content type="text"><![CDATA[一种类型的状态压缩dp - AcWing1064.骑士42 题目及输入输出 分析 由题目的分析可知，每一行状态只跟上一行的状态有关于是 我们可以从第i行开始枚举有效的状态 再枚举第i行能转移到第i+1行的状态 最后把第n行所有有效状态的数量加起来即可 闫氏dp分析法 注意点 需要预先处理出来有效的状态有效的状态需要满足：状态里面不能有连续的1我们可以提前枚举出来有效的状态然后记录到一个vector中 我们需要预先存储一个有效的状态能够转移到那些状态中去如果状态a能够转移到状态b，那么需要满足(1)a &amp; b == 0，即a和b的二进制表示的相同的位数不能同时有1(2)check(a | b)是否为true，即a和b的并集同样不能存在连续的1，如果存在连续的1说明国王的周围部分包括下一层的国王，这样的状态也是不成立的 最后的结果会爆int，需要用long long来存储最后的结果 需要预先写出一个check函数来判断状态是否有连续的1，用一个count函数来计算状态里面有多少个1 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;typedef long long LL;const int N = 12,M = 1 &lt;&lt; 10,W = 110;LL f[N][W][M];//f[i][j][k]表示前i行，放置了j个国王，且第i行状态为k的方案数vector&lt;int&gt; head[M];//存放第i个状态能转移到的合法状态vector&lt;int&gt; state;//存放合法状态int n,m;int cnt[M];bool check(int state)&#123; for (int i = 0; i &lt; n; i ++ ) if ((state &gt;&gt; i &amp; 1) &amp;&amp; (state &gt;&gt; i + 1 &amp; 1)) return false; return true;&#125;int count(int state)&#123; int res = 0; for (int i = 0; i &lt; n; i ++ ) res += state &gt;&gt; i &amp; 1; return res;&#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); for (int i = 0; i &lt; 1 &lt;&lt; n; i ++ ) if (check(i)) &#123; state.push_back(i); cnt[i] = count(i); &#125; for(int i = 0;i &lt; state.size();i++) &#123; for(int j = 0;j &lt; state.size();j++) &#123; int x = state[i],y = state[j]; if( (x &amp; y) == 0 &amp;&amp; check(x | y)) &#123; head[i].push_back(j); &#125; &#125; &#125; f[0][0][0] = 1; for(int i = 1;i &lt;= n+1;i++) &#123; for(int j = 0;j &lt;= m;j++) &#123; for(int k = 0;k &lt; state.size();k++) &#123; int c = cnt[state[k]]; int a = state[k]; for(int b : head[k]) &#123; if(c &lt;= j) &#123; f[i][j][a] += f[i-1][j-c][state[b]]; &#125; &#125; &#125; &#125; &#125; LL res = 0; for(int i = 0;i &lt; 1 &lt;&lt; n;i++) res +=f[n][m][i]; cout&lt;&lt;res; return 0; &#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>StateCompression</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ShareDealing]]></title>
    <url>%2F2020%2F04%2F27%2FShareDealing%2F</url>
    <content type="text"><![CDATA[一个稍微复杂一点的状态机模(三种状态) - 1058. 股票买卖 V41 题目 输入输出 分析由题目分析可知卖股票之后，会有一个一天的冷却期 所以需要分成三种状态 手中有股票 卖出股票后的第一天(因为有冷却期不能买股票，所以要单独分出来) 卖出股票后的第二天 代码如下1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N = 1e5+10;int f[N][3];//0对应有货，1对于无货的第一天，2对应无货的第二天及以后的天数int w[N];int n;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) cin&gt;&gt;w[i]; f[0][0] = f[0][1] = -0x3f3f3f3f; f[0][2] = 0; for(int i = 1;i &lt;= n;i++) &#123; f[i][0] = max(f[i-1][0],f[i-1][2] - w[i]); //手中有货 f[i][1] = f[i-1][0] + w[i]; //手中无货的第一天 f[i][2] = max(f[i-1][2],f[i-1][1]); //手中无货的第二天 &#125; cout&lt;&lt;max(f[n][1],f[n][2]); return 0;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
        <category>AcWing</category>
        <category>FSP</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SmallestHamiltonDistance]]></title>
    <url>%2F2020%2F04%2F25%2FSmallestHamiltonDistance%2F</url>
    <content type="text"><![CDATA[最短Hamilton路径(一种类型的状态压缩dp)40 题目 输入输出 思考题目要求的是从0到n-1的最短距离的方案我们可以发现，我们所需要的不是整个方案是什么，而只是方案最优解是多少 所以我们只需要记录当前这个方案的最优解即可那么我们考虑的状态，发现这个点访问与否可以用0和1来表示 比如如果有从0到4，5个点，那么10100就表示访问了2和4,0,1,3没有访问 所以我们可以用状态压缩的方式去做这道题 显而易见，对于每个确定的点j说明从原点能走到j 又i &gt;&gt; k &amp; 1成立的话 说明能从原点走到k 那么从原点走到j的最小值即求从原点走到不同的k再走到j所有距离的最小值 注意点 i - (1 &lt;&lt; j)可以用i ^ (1 &lt;&lt; j)来代替，因为i表示已经走过了哪个点，如果想消去j这个点，其实就是要把i里面从右往左数第j位这个位置的1改成0，因为i其实是把二进制数转化为十进制表示，那么减去j这个点其实就表示为i - $2^{j}$而2^j就相当于把1左移j位，那么i - $2^{j}$ == i - (1 &lt;&lt; j)然而因为i和(1 &lt;&lt; j)其实都是二进制，i ^ (1 &lt;&lt; j)，因为这两者从右往左数的第j为都是1，异或的时候第j位就为0了位运算会更加快一点 代码如下12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 20, M = 1 &lt;&lt; N;int n;int a[N][N];int f[M][N];//f[i][j]表示从0到j，走过的路程用二进制i来表示的路径的最小值int main()&#123; cin &gt;&gt; n; for(int i = 0;i &lt; n;i++) for(int j = 0;j &lt; n;j++) scanf("%d",&amp;a[i][j]); memset(f,0x3f,sizeof f);//初始的情况把所有点都赋成正无穷，保证所有的点一定是从0转移过来的 f[1][0] = 0; //f[1][0]表示从0走到0，走过的点二进制表示为(00000...001)即为1，这个时候路径的长度为0 //即对应f[1][0] = 0 for(int i = 1;i &lt; 1 &lt;&lt; n;i++)//枚举所有可能的状态 &#123; for(int j = 0;j &lt; n;j++)//对于每个点j &#123; if(i &gt;&gt; j &amp; 1)//如果能从原点走到j，或者说走过的路径中包含j这个点 &#123; for(int k = 0;k &lt; n;k++)//枚举每一个点k &#123; if(i &gt;&gt; k &amp; 1)//如果又能从原点走到k，或者说走过的路径中也包含k这个点 f[i][j] = min(f[i][j],f[i - (1 &lt;&lt; j)][k] + a[k][j]);//原点到j的距离最小值等于原点到k的距离，然后再加上k到j的距离取一个min &#125; &#125; &#125; &#125; cout&lt;&lt;f[(1&lt;&lt;n)-1][n-1]; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>Hamilton</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KMP]]></title>
    <url>%2F2020%2F04%2F23%2FKMP%2F</url>
    <content type="text"><![CDATA[KMP算法模板及理解39 简介KMP 算法是根据三位作者（D.E.Knuth，J.H.Morris 和 V.R.Pratt）的名字来命名的，算法的全称是 Knuth Morris Pratt 算法，简称为 KMP 算法。 KMP是一种高效的字符串匹配算法，用来在主字符串中查找模式字符串的位置(比如在“hello,world”主串中查找“world”模式串的位置)。 暴力的做法对于主串S[N]和模板串P[N],要找模板P在主串S中的每个起始位置12345678910111213主串长度为n,模板串长度为mfor(int i = 1;i &lt;= n;i++)&#123; bool flag = true; for(int j = 1;j &lt;= m;j++) &#123; if(S[i] != p[j]) &#123; flag = false; break; &#125; &#125;&#125; 如何优化暴力的做法？暴力的做法是从主串的起始位置i开始，每次从头开始枚举模板串，如果有不相同的字符就直接break掉，再从i+1的位置开始进行匹配 显然，这种做法会进行大量重复性的工作比如主串 ababaeaba模板串 ababacd我枚举到第5个字符的时候发现此时主串中的e和模板串的c并不匹配但是两个串中都有相同的前缀aba，这个时候可以滑动 如图所示，主串的i-1和模板串的j位置对应的字符串是相等的 到了i和j+1这里对应的字符就不相等 如果是暴力做法那么肯定就是把模板串整体往后挪一位然后再开始重新判断 但是显然我们在之前匹配的过程中已经做了大量的重复工作 所以我们思考怎么样才可以多挪动几位 因为这很容易可以想到如果是12主串 abcabcxhhhh模板串 abcabcyjklm我们匹配到主串的x和模板串的y这里就不匹配了但是这里再把模板串往后挪动一位也肯定不匹配啊即12主串 abcabcxhhhh模板串 abcabcyjklm因为除非是一模一样的字符串，不然两个相同的字符串其中一个往后挪动一位还完全一致是不可能的 所以模板串挪到什么地方才对呢？ 1234即挪到主串 abcabcxhhhh模板串 abcabcyjklm这里才能相同 因为从模板串可以看出来，一开始枚举到第6位的c的时候主串和模板串前面都还一致，直到枚举到第七位的时候就不相同了这个时候就需要滑动模板串 这个时候就需要next数组了next数组的含义就是：用来存模板串中每个前缀最长的能匹配前缀子串的结尾字符的下标 从模板串可知截止到第6位c之前的abcabc，后面的abc和前缀abc是相同的，此时第6位c对应的next数组的值next[6] = 3,表示模板串中以第i个字符结尾的字符串应该跳到模板串的next[i]的位置往后继续匹配，如果对应的后面一个字符不匹配的话，则需要继续滑动，对应到模板串上就相当于要匹配的位置不断的往前跳动 因为主串的abcabc….和模板串的abcabc…..已经匹配了那么我如果不想再把模板串往后挪一位从头开始匹配的话 那么我就需要找到一个方法挪动之后使得模板串的前缀部分与原来主串对应匹配的后缀部分相匹配才行 但是又因为主串对应匹配的后缀部分和一开始模板串对应匹配的后缀部分是相同的 那么第1步就可以转化为找模板串的前缀部分和后缀部分匹配的最大部分才行，而且匹配的字符串长度越大的话，从形象上来理解模板串滑动距离也越小。 个人理解 求next数组其实就是把模板串也当成一个主串，错位来跟模板串来进行最大匹配，当匹配成功的时候主串中对应的下标i和模板串中对应的下标j+1其实是对应滑动最短的距离之后可以再从j+1的位置开始进行匹配，如果后面一个字母对应不匹配就继续滑动 我们其实是找到最大前缀截止的地方方便我进行下一次匹配，然后我惊奇的发现我假设存在这种情况，和最大后缀又是相等的，所以直接转换成求最大后缀来求出next数组了。 那么对于不同的主串和模板串来说，匹配到不同的字母的时候，但是他们两个前缀都是相等的，这个时候前面相同的部分其实就可以看作是同一个模板串，然后因为我们已经处理了next数组，表示如果是模板串和模板串匹配的时候应该滑动几位，又因为这个时候主串和模板串前面的部分相同，我们就可以看成是模板串与模板串匹配然后直接套用next数组来表示模板串应该滑动多少，或者说是应该跳回到哪个位置再往后继续匹配。 注意点 模板串和主串下标都要从1开始储存，且主串和模板串需要错位去枚举，即主串是从i = 1开始枚举，模板串是从j = 0开始枚举，每次枚举S[i]与P[j+1]是否相同 当模板串和主串匹配成功的时候，我们仍需要使j = ne[j]，继续滑动模板串，看模板串从哪个地方开始进行继续进行匹配，因为继续滑动模板串的话如果能进行匹配的话，表示此时滑动之后模板串的前缀又和之前主串匹配成功的后缀是相同的，这个时候我们就又省去了很多不必要的步骤 题目 输入输出 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;iostream&gt;using namespace std;const int N = 1e5+10,M = 1e6+10;char p[N],s[M];//p是模板串，s是原串，找到p在s中的所有起始位置int next[N];int n,m;int main()&#123; cin&gt;&gt;n&gt;&gt;p+1&gt;&gt;m&gt;&gt;s+1; //求next数组 //next数组从2开始匹配就行了，因为next[1] = 0表示第一个字母匹配失败了，我就只能从0开始匹配 for(int i = 2,j = 0;i &lt;= n;i++) &#123; //这里其实是把模板串也当成一个主串来进行匹配 //当匹配的模板串对应的j没有退回起点，且主串中的i和模板串中的j+1不匹配的话，就继续滑动模板串 while(j &amp;&amp; p[i] != p[j+1]) j = ne[j]; //当i和j+1匹配的时候，表明 if(p[i] == p[j+1]) &#123; j++; next[i] = j; &#125; &#125; //KMP匹配过程 for(int i = 1,j = 0;i &lt;= m ;i++) &#123; //当匹配的模板串对应的j没有退回起点，且主串中的i和模板串中的j+1不匹配的话，就滑动模板串 //j如果退回起点就表明需要重新开始匹配 while(j &amp;&amp; s[i] != p[j+1]) j = next[j]; //当模板串和主串匹配的时候就不断往后挪动 if(s[i] == p[j+1]) j++; //当模板串匹配到最后一个字符的时候，表明这个时候匹配成功，那么这个时候就输出模板串的起始位置在主串中对应的下标 if(j == n) &#123; printf("%d ",i-n); j = next[j];// &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>KMP</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FSM-dp]]></title>
    <url>%2F2020%2F04%2F21%2FFSM-dp%2F</url>
    <content type="text"><![CDATA[一个简单的状态机模型38. 状态机模型的基本要素 AcWing1049. 大盗阿福题目 输入输出 分析用一个数组f[i]来表示抢前i家店铺的最大收益对于每一个店铺来说都有抢与不抢两种状态所以就可以用1表示选择最后一个店铺，0表示不选最后一个店铺所以分析可知对于未选最后一个店铺，那么它紧接着的后面一个店铺可以不抢，也可以抢所以状态可以从0走到0，也可以从0走到1 对于选了最后一个店铺，它就不能选择抢紧接着的后面一个店铺所以状态只能从1走到0 闫氏dp分析法 对于状态f[i,0]最后一个可以从(i-1,0) -&gt; (i,0) (表示不抢前一个店铺)也可以从(i-1,1) -&gt; (i,0) (表示抢前一个店铺) 对于状态f[i,1]只能从从(i-1,0) -&gt; (i,1) (前一个店铺不能抢，只能从0转移过来) 注意点 初始化要注意f[0][0] = 0,f[0][1] = -INF，状态机要给一个入口才能进入到状态机模型的0和1中具体问题分析理解的话就是第0个店铺如果不抢的话价值肯定为0，如果抢的话不存在这种情况，设置为负无穷 12345678910111213141516171819202122232425262728#include &lt;iostream&gt;using namespace std;const int N = 1e5+10;int f[N][2],w[N];int n,T;int main()&#123; scanf("%d",&amp;T); while(T--) &#123; scanf("%d",&amp;n); for(int i = 1;i &lt;= n;i++) scanf("%d",&amp;w[i]); f[0][0] = 0,f[0][1] = -0x3f3f3f3f; for(int i = 1;i &lt;= n;i++) &#123; f[i][0] = max(f[i-1][0],f[i-1][1]); f[i][1] = f[i-1][0] + w[i]; &#125; printf("%d\n",max(f[n][1],f[n][0])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>FiniteStateMachine</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kruskal]]></title>
    <url>%2F2020%2F04%2F21%2Fkruskal%2F</url>
    <content type="text"><![CDATA[kruskal算法37。 题目 输入输出 思路kruskal算法 将所有边按权重从小到大排序//快排O(mlogm)可以定义结构体,里面存放变量a,b,w分别代表对应的点和边的权重 枚举每条边，a—-b 权重是w 如果当前a和b不连通(find(a) != find(b)) 将这条边加入集合中 且加上这条边对应的权值 （可以用并查集来操作） 如果ab不连通，将这条边加入集合中去其实就是在a与b之间加一条边，对应add操作即p[find(a)] = find(b);判断是否连通，就是判断a和b是否在一个连通块之中 关键代码12345678int a = Edges[i].a,b = Edges[i].b,w = Edges[i].w; a = find(a),b = find(b); if(a != b) &#123; p[a] = b; cnt++;//存当前加了多少条边 res += w;//存放最小生成树边的所有权重之和 &#125; 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960int n,m;int p[N];struct Edge&#123; int a,b,w; bool operator &lt; (const Edge &amp;W) const &#123; return w &lt; W.w; &#125; &#125;Edge[N];int find(int x)&#123; if(p[x] != x) p[x] = find(p[x]); return p[x]; &#125;int kruskal()&#123; int res = 0,cnt = 0; for(int i = 1;i &lt;= n;i++) p[i] = i;//用并查集一定记得先初始化！！！ for(int i = 0;i &lt; m;i++) &#123; int a = Edges[i].a,b = Edges[i].b,w = Edges[i].w; a = find(a),b = find(b); if(a != b) &#123; p[a] = b; cnt++;//存当前加了多少条边 res += w;//存放最小生成树边的所有权重之和 &#125; &#125; if(cnt &lt; n-1) return -1;//如果连的边数少于n-1的话说明不是连通的 return res;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i = 0;i &lt; m;i++) &#123; int a,b,w; scanf("%d%d%d",&amp;a,&amp;b,&amp;w); Edges[i] = &#123;a,b,w&#125;; &#125; sort(Edges,Edges+m,cmp); int t = kruskal(); if(t == -1) puts("impossible"); else printf("%d",t); return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>kruskal</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prim]]></title>
    <url>%2F2020%2F04%2F19%2FPrim%2F</url>
    <content type="text"><![CDATA[Prim算法 第三十六次笔记。坚持一个星期没记笔记了，之前写过的又都忘了。 题目 输入输出 大致的思路123456781. 初始化所有点到集合的距离为正无穷,d[i] = +∞2. for(int i = 1;i &lt;= n;i++)&#123; 找到集合为距离最近的点t;(找到点t使得d[t]最小)(当集合还没有点的时候随便找一个点) (每次迭代找一个不在最小生成树的点，然后用这个点更新其他所有点到集合的距离，然后把这个点加到集合中去) 用t更新其他点到集合的距离(d[i] = min(d[t],g[t][i]))(集合的距离就是从集合外的一点到集合内部点最短的那条边，称为集合的距离) st[t] = true;&#125; 模拟样例因为一开始每个点到集合的距离都是正无穷第一步随便拿一个点到集合中，比如把1拿到集合中此时st[1] = true 然后拿1更新其他点到集合的距离所以d[2] = 1;d[3] = 2;d[4] = 3; 从剩下的点(2,3,4)中选着距离最近的点，也就是2st[2] = true;然后用2去更新其他点到集合的距离d[3] = min(d[3],g[2][3]) = min(2,3) = 2d[4] = min(d[3],g[2][3]) = min(2,INF) = 2从剩下的点(3,4)中选着距离最近的点，也就是3st[3] = true;然后用3去更新其他点到集合的距离d[4] = min(d[3],g[3][4]) = min(2,4) = 2最后把点4加进集合中去st[4] = true; 最后的生成树为图中绿色的边 注意点 集合中还没有点，即所有点的d[t]都是INFt == -1的时候就把第一个点加入到集合中去当找到第一个点更新了第一个d[1]之后，因为下面已经用第一个点更新了其他点所以此时集合里面都不为INF了而是有确定的值此时再到除了第一个点以外的其他点看找到其他到集合距离最短的一个点123456789101112for(int i = 1;i &lt;= n;i++) int t = -1; for(int j = 1;j &lt;= n;j++) &#123; if(!vis[j] &amp;&amp;((t == -1)||(d[j] &lt; d[t])))//当点不在集合中的时候 &#123; //1.集合中还没有点，即所有点的d[t]都是INF //t == -1的时候就把第一个点加入到集合中去 t = j; //2.当找到第一个点更新了第一个d[1]之后，因为下面已经用第一个点更新了其他点 &#125; // 所以此时集合里面都不为INF了而是有确定的值 // 此时再到除了第一个点以外的其他点看 // 找到其他到集合距离最短的一个点 &#125; 需要初始化所有点到集合的距离为正无穷，且每条边赋值之前也要把每条边的距离设置为正无穷且只要不是第一个点，就把对应点到集合的距离加起来即if(i != 1) res += d[t]; 如果不是第一个点且到集合的距离还为正无穷的话，说明这个图不是连通图 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758const int N = 510,INF = 0x3f3f3f3f;int n,m,res = 0;bool vis[N];int g[N][N],d[N];//g[i][j]表示i和j的距离,d[i]表示i到集合的距离int prim()&#123; for(int i = 1;i &lt;= n;i++) &#123; int t = -1; for(int j = 1;j &lt;= n;j++) &#123; if(!vis[j] &amp;&amp;((t == -1)||(d[j] &lt; d[t])))//当点不在集合中的时候 &#123; //1.集合中还没有点，即所有点的d[t]都是INF //t == -1的时候就把第一个点加入到集合中去 t = j; //2.当找到第一个点更新了第一个d[1]之后，因为下面已经用第一个点更新了其他点 &#125; // 所以此时集合里面都不为INF了而是有确定的值 // 此时再到除了第一个点以外的其他点看 // 找到其他到集合距离最短的一个点 &#125; vis[t] = true;//放入集合中就改为true if(i != 1 &amp;&amp; d[t] == INF) return INF;//如果不是第一个点到集合的距离还是INF的话说明这个图不是连通图，直接返回INF //if(i != 1) res += d[t]; 如果没有消除自环影响的那一步，那么就要先加入树的权重 //因为下一步用这个点更新其他点的时候当i = t时，d[t] = min(g[t][t],d[t])，自环就会导致d[t]变得更小 for(int i = 1;i &lt;= n;i++) d[i] = min(g[t][i],d[i]); //只要不是第一个点，就把对应点到集合的距离加起来 if(i != 1) res += d[t]; &#125; return res;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); memset(g,0x3f,sizeof g); memset(d,0x3f,sizeof d); while(m--) &#123; int a,b,c; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); if(a != b)//消除自环的影响 g[a][b] = g[b][a] = min(g[a][b],c);//消除重边的影响 &#125; int t = prim(); if(t == INF) printf("impossible"); else printf("%d",t); return 0;]]></content>
      <categories>
        <category>AcWing</category>
        <category>Prim</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-1010-radix]]></title>
    <url>%2F2020%2F04%2F08%2FPAT-1010-radix%2F</url>
    <content type="text"><![CDATA[PAT - 1010 Radix 第三十五天离放假过去了整整九十天。 题目 输入输出 题意题意就是给你四个数N1,N2,tag,radix当tag = 1时,radix为N1的进制;当tag = 2时,radix为N2的进制; 问你有没有当另外一个数的进制为多少的时候，N1 == N2成立 分析思路这题的思路大致为 把已知进制的那个数转化为10进制target 再二分枚举另外一个数的进制，枚举的进制转化为10进制，判断找到的数是否等于target如果相等，返回进制数，如果不相等，说明不存在，返回impossible 注意点 有一个很容易犯的思维定势，就是他已给的数的进制最大就是36，但是我们要求的另外一个数的进制可能远大于36因为N1,N2最大是十位，那么最大的数应该为zzzzzzzzzz,转换为10进制差不多就是1e16，所以我们在计算calc函数的时候，要判断1(double)res * r + get(x) &gt; 1e16， 这个时候res一定要转化成double类型，因为可能res = 1e15,然后再计算一遍res * r + get(x)会超出long long的范围，从而又从long long前面的范围开始而double可以存储最多为10^308级别的数，一定够用，所以我们这个时候要用double来转换判断是否超过范围，如果超出范围，直接返回一个很大的数即可 二分枚举的时候应该是calc(n2,mid) &lt;= target，这样我们求出的l就是小于等于target的最后一个数，那么二分过后如果calc(n2,l)如果不能与target说明就不存在，如果等于就说明存在 calc函数的第二个参数的r也应该设置成long long类型，方便后面二分的时候也计算对应进制转化为十进制的值 把k进制转化为10进制可以用秦九韶算法，即 12345for(auto x : n) &#123; if((double)res * r + get(x) &gt; 1e16) return 1e18; res = res*r + get(x); &#125; 这样可以降低时间复杂度 一个小技巧，就是如果tag == 2的时候我们直接swap(n1,n2)即可，这样我们可以保证始终n1对应的是确定进制的数，我们就不用再用if去判断对应的情况了 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;string n1,n2;LL tag,target;int radix;LL get(char s)&#123; if(s &gt;= '0' &amp;&amp; s &lt;= '9') return s-'0'; return s - 'a' + 10; &#125;LL calc(string n,LL r)&#123; LL res = 0; for(auto x : n) &#123; if((double)res * r + get(x) &gt; 1e16) return 1e18; res = res*r + get(x); &#125; return res;&#125;int main()&#123; cin&gt;&gt;n1&gt;&gt;n2&gt;&gt;tag&gt;&gt;radix; if(tag == 2) swap(n1,n2); target = calc(n1,radix); LL l = 0,r = target + 1; for(auto t : n2) l = max(l,get(t)+1); while(l &lt; r) &#123; LL mid = l + r &gt;&gt; 1; if(calc(n2,mid) &gt;= target) r = mid; else l = mid + 1; &#125; if(calc(n2,l) == target) &#123; cout&lt;&lt;l; &#125; else puts("Impossible"); return 0;&#125;]]></content>
      <categories>
        <category>PAT</category>
      </categories>
      <tags>
        <tag>每天AC的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces479-div3-E-dfs]]></title>
    <url>%2F2020%2F04%2F04%2Fcodeforces479-div3-E-dfs%2F</url>
    <content type="text"><![CDATA[Codeforces Round #479 (Div. 3) - E. Cyclic Components 第三十四天，每天还是要坚持积累才行。 题目 输入输出 题意题目的大意就是给你几个连通块，问你里面有几个环 思路 从一个点开始遍历他能遍历到的所有的点然后存到vector里面 再检查vector里面每个点的出度是否为2，如果不为2返回false然后break，全为2就返回true，res++; 注意点 因为如果是一个环的话，那么每个点的出度都是2，如果在遍历的过程中只要发现有一个点的出度不为2，直接break掉循环下一个点 dfs的过程中需要用一个st[N]数组来判断是否访问过 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748const int N = 2e5+10;vector&lt;int&gt; query[N],tmp;bool st[N],backup[N];int n,m,res = 0;void dfs(int x)&#123; st[x] = true; tmp.push_back(x); for(int i = 0;i &lt; query[x].size();i++) &#123; if(!st[query[x][i]]) &#123; dfs(query[x][i]); &#125; &#125;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); while(m--) &#123; int a,b; scanf("%d%d",&amp;a,&amp;b); query[a].push_back(b),query[b].push_back(a); &#125; for(int i = 1;i &lt;= n;i++) &#123; if(!st[i]) &#123; tmp.clear(); dfs(i); int flag = 1; for(int i = 0;i &lt; tmp.size();i++) &#123; if(query[tmp[i]].size() != 2) &#123; flag = 0; break; &#125; &#125; if(flag) res++; &#125; &#125; cout&lt;&lt;res; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
        <category>div3</category>
        <category>dfs</category>
      </categories>
      <tags>
        <tag>每天AC的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing1296-NumberTheory-Dfs]]></title>
    <url>%2F2020%2F03%2F27%2FAcWing1296-NumberTheory-Dfs%2F</url>
    <content type="text"><![CDATA[一个与约数相关的数论问题 - AcWing1296.聪明的燕姿 第三十三天 题目 输入输出 题意题目的大意就是给一个数S 让你找到有多少数能够满足它约数的和等于S 比如S = 42 这个时候就有3个数满足条件 41 = (1 + 41) == 4220 = (1 + 2 + 4 + 5 + 10 + 20) == 4226 = (1 + 2 + 13 + 26) == 42 分析思路算术基本定理N = P1^a1 * P2^a2 * … * Pn^an则N的约数个数为(a1+1)(a2+1)…(an+1) 假设N的一个约数为D D = P1^b1 * P2^b2 * … * Pn^bn其中bi可以取到0，范围是0&lt;= bi &lt;= ai 因为只有和N的质因数一一对应一定能得到约数因为bi可以从0取到ai,那么每一个bi就有(ai+1)种选法 约数的个数就是每个bi对应多少种选法相乘即约数个数就为(a1+1)(a2+1)…(an+1) 约数之和S = (1+p1+p1^2+…+p1^a1)(1+p2+p2^2+…+p2^a2)…(1+pn+pn^2+…+pn^an) 这个怎么理解呢 因为每一个约数为D = P1^b1 * P2^b2 * … * Pn^bn 那么S = (1+p1+p1^2+…+p1^a1)(1+p2+p2^2+…+p2^a2)…(1+pn+pn^2+…+pn^an) 这个公式的意思就是从每个括号里面取出来一个数然后相乘，就能得到一个约数Di然后所有的约数Di相加就得到约数之和S 举个例子对于S = 42来说，42对应的结果里面有一个为20，20 = (1 + 2 + 4 + 5 + 10 + 20)20 = 2^2*5对于两个质因数2和5来说2可以取0,1,2次，5可以取0,1次所以S = (1+2+2^2)(1+5) = 42 继续分析所以我们最暴力的想法一定就是枚举了，比如对一个数S枚举从1到S-1的所有数的约数，再判断他们的约数和是否等于S 但是这么做显然会超时，因为1 &lt;= S &lt;= 2*10^9 这个时候我们就可以观察我们的约数和的公式S = (1+p1+p1^2+…+p1^a1)(1+p2+p2^2+…+p2^a2)…(1+pn+pn^2+…+pn^an) 假设这个时候有一个约数和S满足(1+2)(1+2+2^2)(1+2+2^2+…+2^k)3x5x9x17x33x65x129 = 635037975 就已经接近1e9的量级了，可见符合条件的项不会很多 那么这个时候我们就可以用dfs进行搜索，看我们能不能得到符合条件的(1+pk+pk^2+…+pk^ak)能够使得S能够整除，即S % (1+pk+pk^2+…+pk^ak) == 0然后S /= (1+pk+pk^2+…+pk^ak),再dfs到下一层 应该先从小到大枚举P1234for(p : 2,3,5,7,...) for(a : 1,2,3,...) if(S mod (1+p1+p1^2+...+p1^a1) == 0) dfs(下一层) 这个时候我们还需要继续思考特殊情况 如果ai = 1的话，S = (1+Pi)的时候，因为Pi为质数，那么S-1也一定为质数，那么这个时候只需要判断S-1是否为质数即可 又S只会有两种情况，就是一种情况包括一个因子里面有(1+Pi)，另一种情况不包括(1+Pi)S = (1+Pi)(1+Pj+Pj^2…..)S = (1+Pi+Pi^2)(1+…..) 但是这两种情况都可以看出来Pi ^2 &lt;= S所以我们dfs枚举Pi的上限就是$\sqrt{ S }$ 所以dfs应该设置成三个参数dfs(last,product,S) 1.last参数表示上一个枚举的质数是谁，我们这样枚举的目的就是先把前面符合条件的质数枚举完了再枚举后面的质数，这样不会带来重复，降低了时间复杂度 比如质数为P = 2,3,5,7…. 如果枚举2之后再dfs到下一层，那么这个时候就应该再从3开始进行枚举而不是再从头开始枚举 2.product参数product表示 S = (1+p1+p1^2+…+p1^a1)(1+p2+p2^2+…+p2^a2)…(1+pn+pn^2+…+pn^an)中 当前进行到哪一个括号里面的最高次项Pi^ai的乘积和比如S = (1+2+2^2)(1+3+3^2+3^3)(1+….)则dfs到第三层的时候product = 2^2*3^3 (product : 1 — &gt; 2^2 — &gt; 2^2*3^3) 又由算术基本定理可知一个数N = P1^a1 * P2^a2 * … * Pn^an product = P1^a1 * P2^a2*….. 如果product要从第一层(一开始product初始化为1)进到第二层，此时product(2) = product(1) * P1^a1S = S’ / (1+p1+p1^2+…+p1^a1) 然后再dfs(last,product(2),S) ==(等价于) dfs(last , product(1)*P1^a1 , S’/(1+p1+p1^2+…+p1^a1)) 3.S参数从上面的分析可知S参数就代表着从一开始的S除以(1+pk+pk^2+…+pk^ak)后剩余的乘积 所以每一层我们都应当判断S-1是否为质数，如果S-1是质数的话,也需要记录，但是不需要返回上一层继续往下搜即可就比如2424 = (1+23) = (1+2)(1+7) = (1+3)(1+5)第一层的时候判断23是质数，所以记录res[len++] = 1*23同时也需要继续往下做然后依次判断2、7 或者3、5能不能满足条件只要有S-1为质数，说明就有满足条件的数，这个时候就需要记录结果 为什么S-1一定要大于上一层的质数？因为我们要保证质数是从小到大枚举的，只有剩下的S-1是大于上一层的质数的时候，(1+S)才有可能成为最初的那个S的一个因子 因为我们要表示S’ = (1+ 2 + 2^2+…)(1 + 3 + 3^2 + …)…(1+S)越往后枚举对应的那个Pi也越大，所以S-1一定要大于上一层的质数才能满足条件 S == 1对应的是什么情况？S == 1对应的就是S’只由一个括号即只有一个P,S’ = (1+p+p^2+…+p^k)组成的情况比如 7 = (1 + 2 + 2^2) ——-&gt;对应413 = (1 + 3 + 3^2) ——-&gt;对应915 = (1 + 2 + 2^2 + 2^3) ——-&gt;对应8这种情况表明，我从p = primes[i]开始枚举，一个p得到的序列和就把一开始的S’给整除了或者说这个序列和与S’相等，即此时的p得到的序列和(1+p+p^2+…+p^k) == S’ 所以此时S’ / (1+p+p^2+…) == 1dfs到下一层直接就是dfs(last,p^k,1)那么dfs到下一层S == 1的时候,product = p^k就是对应我们要找的那个数 注意点1.求质数的过程应该用线性筛的方法去做2.dfs(last,product,S)其中last应该初始化为-1这样我们在一开始判断S-1大于前面的质数的时候应该特判,S-1 &gt; ((last &lt; 0) ? 0 : primes[last])因为最小是(1+2)那么S起码是2,所以应该有S &gt; 1 即S-1 &gt; 0 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 50000;//N = sqrt(2e9)bool st[N];int primes[N],cnt = 0;//线性筛int S,res[N],len;void get_primes(int n)&#123; for(int i = 2;i &lt;= n;i++) &#123; if(!st[i]) primes[cnt++] = i; for(int j = 0;primes[j]*i &lt;= n;j++) &#123; st[primes[j]*i] = true; if(i % primes[j] == 0) break; &#125; &#125;&#125;int is_prime(int n)&#123; if(n &lt; N) return !st[n];//没有被筛过说明就是质数，返回true for(int i = 0;primes[i] &lt;= n / primes[i];i++) &#123; if(n % primes[i] == 0) return false; &#125; return true;&#125;void dfs(int last,int product,int S)//last表示上一个用的质数的下标是什么,product当前最高次项的结果,S表示每次处理后剩余多少&#123; if(S == 1) &#123; res[len++] = product; return ; &#125; //比如20 = 2^2 * 5 //N = P1^a1 * P2^a2 * ... * Pn^an //S = (1+p1+p1^2+...+p1^a1)(1+p2+p2^2+...+p2^a2)...(1+pn+pn^2+...+pn^an) //42 = (1 + 2 + 2^2)*(1 + 5),其中2^2和5就分别是最高次项p1^2*p2^1 if(S-1 &gt; ((last &lt; 0) ? 0 : primes[last]) &amp;&amp; is_prime(S-1)) &#123; res[len++] = product * (S-1); &#125; for(int i = last+1;primes[i] &lt;= S / primes[i];i++) &#123; int p = primes[i]; for(int j = 1+p,t = p;j &lt;= S;t *= p,j += t) &#123; if(S % j == 0) &#123; dfs(i,product*t,S/j); &#125; &#125; &#125;&#125;int main()&#123; get_primes(N-1); while(cin&gt;&gt;S) &#123; len = 0; dfs(-1,1,S); sort(res,res+len); cout &lt;&lt; len &lt;&lt; endl; if (len) &#123; sort(res, res + len); for (int i = 0; i &lt; len; i ++ ) cout &lt;&lt; res[i] &lt;&lt; ' '; cout &lt;&lt; endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>NumberTheory</category>
        <category>dfs</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Diver-dp]]></title>
    <url>%2F2020%2F03%2F25%2FDiver-dp%2F</url>
    <content type="text"><![CDATA[跟一般背包问题有区别的二维费用背包问题 - AcWing 1020.潜水员第三十二天！striving 题目 输入输出 分析如图所示，对于一般的题目来看，它似乎只是一个二维费用背包问题 但是这个题目的不同之处就在于它的要求是体积至少为j时候的最少费用 以一维费用举例的话1.体积最多为j,初始化f[N]全部初始为0，要保证体积V&gt;=0 2.体积恰好为j,只能初始化f[0] = 0，其余全部为正无穷，要保证体积V&gt;=0 3.体积至少为j,只能初始化f[0] = 0，其余全部为正无穷，不用保证体积V&gt;=0的情况 体积最多为j，那么体积不为0的情况也包含f[0] = 0的情况因为一个物品都不选的时候，总体积为多少都无所谓，那么此时f[N]全部为0 体积恰好为j，那么一个物品都不选的时候，体积只能为0，所以只有f[0] = 0合法，其余的情况都不合法根据题目情况设置成正无穷还是负无穷 体积至少为j，一个物品都不选的情况和体积恰好为j的情况一样，因为不选物品体积就只能为0 那为什么体积至少为j的时候就不用保证体积V&gt;=0呢？在这个题里面结合具体情况理解来看我觉得就是就算j &lt; V[i]的话，表示还需要的氧气或者氮气的体积j比现在提供的V[i]要少 但是提供的氧气或者氮气的体积多一点也不要紧啊，依然能满足潜水员的使用，所以没问题 但即使所需要的氧气或者氮气所需的是数量是负数，负数会越界 但其所需数量与0是等价的，因此可以通过所需数量为0来转移 当体积为0的时候就一定意味着每一个气缸都没有选，而气缸的重量都是大于0的 代码如下123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int N = 22,M = 80,K = 1e4+10;int m,n,k;int f[N][M],O2[K],N2[K],W[K];int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); for(int i = 1;i &lt;= k;i++) &#123; scanf("%d%d%d",&amp;O2[i],&amp;N2[i],&amp;W[i]); &#125; memset(f,0x3f,sizeof f); f[0][0] = 0; for(int i = 1;i &lt;= k;i++) &#123; for(int j = n;j &gt;= 0;j--) &#123; for(int l = m;l &gt;= 0;l--) &#123; f[j][l] = min(f[j][l],f[max(0,j-O2[i])][max(0,l-N2[i])]+W[i]); &#125; &#125; &#125; printf("%d",f[n][m]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TheFactorChain-Of-X]]></title>
    <url>%2F2020%2F03%2F25%2FTheFactorChain-Of-X%2F</url>
    <content type="text"><![CDATA[数论相关知识一 - AcWing 1295.X的因子链第三十一天！一个多月了！ 题目 输入输出 分析分析题意 1.最大长度如果想让X的因子组成的因子链最长，那么它的因子链一定得是质数才行，不然如果是合数的话就可以拆分成两个以上的和从而使它的长度增加 所以问最大长度就是问对X分解质因数后质因数的总和 2.最大长度序列对于X = 540 = 2^2 * 3^3 * 5来说序列的最大长度就是2 + 3 + 1 = 6最长长度就为 2 4 12 36 108 540x2 x2 x3 x3 x3 x5或者 2 6 12 36 108 540x2 x2 x2 x3 x3 x5…….等等 那么因为所有的2和所有的3都可以互换位置，那么我们就要去掉2和3他们可以互换位置的情况，即除以2!*3!从而只剩一种情况 最大长度的子序列个数就为(2+3+1)!/(2!*3!*1!) = 720/(2*6*1) = 60 3.分解质因数A.我们可以用线性筛的方法来分解质因数,st[N]数组表示有没有被筛的意思，如果没有被筛，表明当前这个数是质数，然后用这个数去筛掉其他合数 因为每个数只会被筛一次，所以时间复杂度为O(n) B.我们在筛质数的图中可以开一个minp数组，来记录对应的数X的最小质因数是谁 这样子可以方便我们对X分解质因数 X最小的质因数为p = minp[X],然后min[X / p]是另一个质因数，依次类推可以得到X的所有质因数 比如540 = 2^2*3^3*5 123456789101112131415161718void get_primes(int x)&#123; for(int i = 2;i &lt;= x;i++) &#123; if(!st[i]) &#123; minp[i] = i; primes[cnt++] = i; &#125; for(int j = 0;i*primes[j] &lt;= x;j++) &#123; int t = i*primes[j]; minp[t] = primes[j]; st[t] = true; if(i % primes[j] == 0) break; &#125; &#125;&#125; 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;iostream&gt;using namespace std;/*对于X = 540 = 2^2 * 3^3 * 5来说序列的最大长度就是2 + 3 + 1 = 6最长长度就为 2 4 12 36 108 540x2 x2 x3 x3 x3 x5或者 2 6 12 36 108 540 x2 x2 x2 x3 x3 x5等等那么因为所有的2和所有的3都可以互换位置，那么我们就要去掉2和3他们可以互换位置的情况，即除以2!*3!只剩一种情况最大长度的子序列个数就为(2+3+1)!/(2!*3!*1!) = 720/(2*6*1) = 60*/typedef long long LL;const int N = (1 &lt;&lt; 20) + 10;int primes[N],minp[N],X;bool st[N];int cnt = 0;void get_primes(int x)&#123; for(int i = 2;i &lt;= x;i++) &#123; if(!st[i]) &#123; minp[i] = i; primes[cnt++] = i; &#125; for(int j = 0;i*primes[j] &lt;= x;j++) &#123; int t = i*primes[j]; minp[t] = primes[j]; st[t] = true; if(i % primes[j] == 0) break; &#125; &#125;&#125;int main()&#123; get_primes(N-1); while(scanf("%d",&amp;X) != -1) &#123; int k = 0,tot = 0; int count[N]; while(X &gt; 1) &#123; int t = minp[X]; fac[k] = t,count[k] = 0; while(X % t == 0) &#123; count[k]++; X /= t; tot++; &#125; k++; &#125; LL res = 1; for(int i = 1;i &lt;= tot;i++) res *= i; for(int i = 0;i &lt; k;i++) &#123; for(int j = 1;j &lt;= count[i];j++) &#123; res /= j; &#125; &#125; printf("%d %d\n",tot,res); &#125; return 0;&#125;]]></content>
      <categories>
        <category>Number-theory</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TheMaxXOR]]></title>
    <url>%2F2020%2F03%2F24%2FTheMaxXOR%2F</url>
    <content type="text"><![CDATA[最大异或对(字典树)第三十天！ 题目 输入输出 分析思路暴力解法12345678int res = 0;for(int i = 0;i &lt; n;i++)&#123; for(int j = 0;j &lt; i;j++) &#123; res = max(res,a[i]^a[j]); &#125;&#125; 暴力解法的时间复杂度显然超时，所以我们需要对内层循环进行优化 那么内层循环的含义是什么？ 内层循环的含义就是从a[0]到a[i-1]这些中找到一个与a[i]异或最大的值 那么这个操作就可以用Trie树进行优化 1.因为要使异或对最大，把a[i],a[j]都转化成二进制数，那么我们从高位开始就要开始与a[i]不同 2.因为0&lt;=Ai&lt;2^31,那么从30位开始从高往低去存储Ai对应的二进制数，从而形成一个字典树 3.我们应该先存储再查询，因为如果先查询再存储的话，那么当根节点为0即字典树里面还什么都没有的情况就要特判，为了避免这种情况我们就先存储再查询 4.查询的时候因为要使得异或最大，所以如果要查询a[i]对应的最大异或值对应的a[j]，那么a[j]的二进制表示就要尽可能的与a[i]的不同，比如a[i]为(11101)那么a[j]最好就为(00010) 所以再查询字典树的时候，如果a[i]当前的二进制位为1，那么就往字典树的0方向走，如果二进制位为1，就往字典树的1方向走但是如果没有对应相反的方向的话，就只能从相同的方向去走了 在每次查询一开始就初始化res = 0,然后在循环中依次res*2+u或者res*2+!u因为我们字典树就是从高位开始存储的，所以这样做没问题 所以我们用O(n)的时间复杂度就解决了问题，这里运用的正是空间换时间的思想 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 100010,M = 31*N;int n;int a[N];int son[M][2],idx;void insert(int x)&#123; int p = 0; for(int i = 30;i &gt;= 0;i--) &#123; int t = x &gt;&gt; i &amp; 1; if(!son[p][t]) son[p][t] = ++idx; p = son[p][t]; &#125;&#125;int query(int x)&#123; int p = 0,res = 0; for(int i = 30;i &gt;= 0;i--) &#123; int t = x &gt;&gt; i &amp; 1; //如果从根节点开始和a[i]另一个方向走 if(son[p][!t]) &#123; p = son[p][!t]; res = res*2 + !t; &#125; else//如果没有另一个方向，就只有往这个方向走了 &#123; p = son[p][t]; res = res*2 + t; &#125; &#125; return res;&#125;int main()&#123; scanf("%d",&amp;n); int res = 0;//因为0异或任意值都是任意值，所以res可以设置成0 for(int i = 0;i &lt; n;i++) scanf("%d",&amp;a[i]); for(int i = 0;i &lt; n;i++) &#123; insert(a[i]);//先插入再查询，避免了特判的情况 int t = query(a[i]); res = max(res,a[i]^t);//把每次的结果都与res取一个最大值，这样一重循环就能解决问题 &#125; printf("%d\n",res); return 0;&#125;]]></content>
      <categories>
        <category>TrieTree</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TrieTree]]></title>
    <url>%2F2020%2F03%2F24%2FTrieTree%2F</url>
    <content type="text"><![CDATA[Trie字符串统计(字典树) 第二十九天！ Trie树Trie树，也叫“字典树”。顾名思义，它是一个树形结构。它是一种专门处理字符串匹配的数据结构，用来解决在一组字符串集合中快速查找某个字符串的问题。 此外Trie树也称前缀树（因为某节点的后代存在共同的前缀，比如pan是panda的前缀）。 它的Key都为字符串，能做到高效查询和插入，时间复杂度为O(k)，k为字符串长度，缺点是如果大量字符串没有共同前缀时很耗内存。 它的核心思想就是通过最大限度地减少无谓的字符串比较，使得查询高效率，即「用空间换时间」，再利用共同前缀来提高查询效率。 存储如图所示，对于很多字符串我们从根节点开始，把根节点设为0，然后对每个字符串依次从前往后存储到一课树中，到达字符串的末尾就用一个cnt[N]++数组打上一个标记，表示以这个字母结尾的字符串是有一个字符串的 查找从根节点开始走，与要寻找的单词开始匹配 1.如果找到的下一个结点不存在要寻找的单词，就返回false 2.如果要寻找的单词到结尾了没有cnt[N]数组的标记，表示Trie树里也没有要寻找的单词，返回false 题目 输入输出 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;using namespace std; //trie树，字典树const int N = 100010;int son[N][26];//每一个结点最多只会连26条边，因为只有小写字母,且这个数组存放的是每一个字母对应的idx//且第一维存放的是父节点的idx，第二位存放的是子节点字母从a到z映射到0到25的值int cnt[N];//以当前这个点解结尾的单词有多少个int idx;//下标是0的点，既是根节点，又是空节点char str[N];void insert(char str[])&#123; int p = 0;//从根节点开始 for(int i = 0;str[i];i++)//字符串结尾是\0 &#123; int u = str[i] - 'a'; //如果p这个结点不存在u这个儿子 if(!son[p][u]) son[p][u] = ++idx; p = son[p][u]; &#125; cnt[p]++;//循环完之后即为最后一个点，让这个点的cnt++，表示以这个点为结尾的多了一个&#125;int query(char str[])&#123; int p = 0; for(int i = 0; str[i];i++) &#123; int u = str[i] - 'a'; if(!son[p][u]) return 0;//如果要寻找的下一个结点不存在，返回false p = son[p][u]; &#125; return cnt[p];//返回出现了多少次&#125;int main()&#123; int n; scanf("%d",&amp;n); while(n--) &#123; char op[2]; scanf("%s%s",&amp;op,&amp;str); if(op[0] == 'I') insert(str); else printf("%d\n",query(str)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>TrieTree</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maximum-match-of-bipartite-graph]]></title>
    <url>%2F2020%2F03%2F21%2FMaximum-match-of-bipartite-graph%2F</url>
    <content type="text"><![CDATA[二分图的最大匹配第二十八天,差不多四十多天才完成了接近一个月的量，深深感受到人的惰性是多么可怕 关于二分图的定义，可以看我上一章染色法判定二分图里面的相关知识，这里不再赘述 二分图最大匹配的思路如果所示，对于一个二分图来说，左右两边为两个集合，我们要求左右两边最多能匹配多少条边一开始A连F，匹配A-F 然后下一个点B连E，匹配B-E 下一个点C连F，但是这个时候F已经被A相连了这个时候就回过头来找F对应的A，看A还有没有其他能相连的点，然后发现A还和H相连 这个时候就让A匹配H，A-H，这个时候F就没人连，然后C就可以和F匹配了，即C-F 最后一个点D匹配G 所以最终所有能匹配的边即为A-H,B-E,C-F,D-G即最多匹配四个边 如何去实现这个过程？我们可以用邻接矩阵去连接从左集合到右集合的边 然后用一个match[i]来记录右边集合已经匹配的是左边集合中的哪个点这样我们遇到矛盾的时候就可以快速找到右边集合对应匹配的左边集合的那个点 然后看左边集合的那个点时候还可以找到除了当前匹配这个点的另外的点 如果能找到，那么就皆大欢喜返回true，如果不能，就返回false 注意点1.最后我们从左边的每一个点开始寻找右边有没有能点能匹配的时候要加一个判重数组st[N]st数组用来防止重复搜索相同的点。而且当图中有环的时候，不加st数组可能会无限循环下去，就出现段错误了 且st数组每次搜索前都需要重置成false，因为匹配结果记录在match数组中，st数组用来判重，避免在某次匹配中重复遍历点和边。2.我们只用加从左边集合到右边集合的一条边即可，因为我们用match数组记录右边数组已经匹配的点，然后就可以直接find(match[j])判断是否成立 题目 输入输出 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;const int N = 510,M = 1e5+10;//因为只用加一个边，所以M不用翻倍int h[N],e[M],ne[M],idx;bool vis[N];int match[N];int n1,n2,m;void add(int a,int b)&#123; e[idx] = b; ne[idx] = h[a]; h[a] = idx++; &#125;bool find(int x)//判断x能否与二分图另一个连通块的点连上边&#123; for(int i = h[x];i != -1;i = ne[i]) &#123; int j = e[i]; if(!vis[j]) &#123; vis[j] = true; //如果j还没有已经匹配的对象的话 if(match[j] == 0 || find(match[j]))//因为已经使vis[j]等于true了， &#123; //所以在find已经match好了的t = match[j]的时候就不会再重复匹配j，而是去找下一个能够匹配的点 match[j] = x; return true;//如果能够匹配，返回true表示x已经找到匹配的对象 &#125; &#125; &#125; return false;//否则返回false表示匹配不成功&#125;int main()&#123; scanf("%d%d%d",&amp;n1,&amp;n2,&amp;m); memset(h,-1,sizeof h); while(m--) &#123; int a,b; scanf("%d%d",&amp;a,&amp;b); add(a,b);//添加a到b的一条边，因为我们的操作只需要从a找到b，就算是遇到已经匹配好的情况 //也是从已经match好了的b对应的match[b]重新去寻找除了b能够匹配的点，所以这里只需要add一条边 &#125; int res = 0; for(int i = 1;i &lt;=n1;i++)//我们只需要从左边的二分图开始进行匹配即可 &#123; memset(vis,0,sizeof vis);//匹配结果记录在match中，vis数组用来判重，避免在某次匹配中重复遍历点和边。 if(find(i)) res++; &#125; printf("%d",res); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>bipartite-graph</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bipartite-graph]]></title>
    <url>%2F2020%2F03%2F21%2Fbipartite-graph%2F</url>
    <content type="text"><![CDATA[染色法判定二分图 第二十七天，一个多月了，才发现坚持一件事是多么困难 染色法判定二分图什么是二分图 简而言之就是两个子集的内部的点没有边相连边只在两个子集之间连接 二分图的一个重要性质二分图当且仅当图中不含奇数环 因为如果存在奇数环(环当中点的数量为奇数)，从起点开始，起点属于左边的集合A那么下一个点就属于右边的集合B，下一个点的下一个点就属于左边的集合A 依次类推，可以推回起点是属于右边的集合，这与一开始起点属于左边的集合矛盾了 所以如果一个图是二分图，它肯定不存在奇数环 判断一个图是不是二分图从一个点开始，把它染色成1，把它相邻的点都染成2，把相邻的点的下一个相邻点染成1，然后依次类推 所以在染的过程中如果出现了矛盾，那么就不是一个二分图即一条边的两个点颜色不能相同 判断矛盾的条件1.染当前这个点，判断他相邻的点颜色如果和他相同的话，矛盾如果没出现矛盾的话，说明这个图是二分图 题目 输入输出 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;const int N = 1e5+10,M = 2e5+10;int h[N],e[M],ne[M],idx;//因为要加a到b和b到a的边，所以e,ne的大小要翻倍int n,m;int color[N];void add(int a,int b)&#123; e[idx] = b; ne[idx] = h[a]; h[a] = idx++;&#125;bool dfs(int u,int c)&#123; //没有被染色，先把u这个点染成c这个颜色 color[u] = c; //遍历u这个结点连接的结点，依次染成不同的颜色 for(int i = h[u];~i;i = ne[i]) &#123; int j = e[i]; //还没有被染过色的话 if(color[j] == 0) &#123; //就把当前结点染成3-c，这样做的好处是我们一开始把u染成1 //然后相邻的被染成3-1 = 2，染成2之后再进入dfs中c = 2，则相邻结点染成3-2 = 1 //如果相邻结点继续染色后返回为false产生矛盾的话说明当前的图不为二分图，返回false if(!dfs(j,3-c)) return false; &#125; //如果染过色的话就判断这个结点和相邻的结点颜色是否相同，如果相同返回false else if(color[j] == c) return false; &#125; return true;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); memset(h,-1,sizeof h); while(m--) &#123; int a,b; scanf("%d%d",&amp;a,&amp;b); add(a,b),add(b,a); &#125; int flag = 1; //因为二分图不一定是连通的，所以要从每个点开始判断 for(int i = 1;i &lt;= n;i++) &#123; if(color[i] == 0 &amp;&amp; !dfs(i,1)) &#123; flag = 0; break; &#125; &#125; if(flag) puts("Yes"); else puts("No"); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>bipartite-graph</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[recordingtime]]></title>
    <url>%2F2020%2F03%2F17%2Frecordingtime%2F</url>
    <content type="text"><![CDATA[记录自己的每一天,总结与反思 从今天开始记录自己每天干了些什么，完成多少任务，应该怎么去改进与反思 第四周4.91. 李范全书开始（8：00 - 11：00） 2. 英语单词150个（11：00 - 12：00） 3. 英语阅读继续积累（18：20 - 19：00） 4. PAT辅导课（7：00-9：00） 5. DIV3（4，5）（15：00 - 17：30） 6. 整理算法题到博客上 7. 复习acwing基础课提高课的技巧 8. 操作系统（13：30 - 15：00） 9. 完成计算化学作业 开始学习全书的内容，少看手机，提高效率如果有一个任务没完成 4.71. 李范全书开始 2. 英语单词150个 3. 英语阅读 4. 汤家凤收尾 5. 1800题继续做 6. 整理数学刷题的易错点和技巧 7. PAT辅导课（7：00-9：00） 8. DIV3 9. 整理算法题到博客上 10. 复习acwing基础课提高课的技巧 新的开始，加油了！ 第三周4.3跟昨天的任务差不多 汤家凤基础课 1800题 div3 洛谷dfs 操作系统 贪吃蛇项目 PAT辅导课 英语阅读 多弄一下贪吃蛇项目，以及重新开始背英语单词！坚持学习操作系统 4.21. acwing银行排队(pat) 2. 汤家凤基础课 3. 1800题 4. div3 5. 洛谷dfs 6. 操作系统 7. 贪吃蛇项目 8. PAT辅导课 9. 英语阅读 明天打游戏的时间挪到星期五完成上面所有任务，不完成不睡觉 除了洛谷的dfs和银行排队系统看不太懂意思没完成之外，其余或多或少都有多完成，今后要更加把控质量！ 3.31 汤家凤 1800题 英语单词 英语阅读 codeforces div3 算法提高班 洛谷dfs AC saber 贪吃蛇项目！ 操作系统 整理博客 线性代数 数据结构 完成以上任务至少70% 3.301. 汤家凤 2. 1800题 3. 英语单词 4. 英语阅读 5. codeforces div3 6. 算法提高班 7. 洛谷dfs 8. AC saber 9. 贪吃蛇项目！ 10. 操作系统 刷数学题不看手机晚上十二点前睡觉！用电脑尽量少干不相关的事情，争取每天九点前做好每一件事，九点后自己想干嘛干嘛尽量少看东方财富！！！ 总结今天状态很不多，明天继续保持！ 第二周3.281. AC saber 复习 2. PAT每日一题 3. 汤家凤数学 4. 1800题继续做 5. 英语单词 6. 英语阅读 7. 贪吃蛇项目继续开始 8. 数据结构 9. 算法提高课 10. 蓝桥杯真题继续刷 从明天开始尝试不设番茄钟进行学习同时，争取一天不看手机！ 3.25早晨 1. 汤家凤数学（8：00-10：00） 2. 数学1800题（ 10：10-11：30） 3. 英语单词（11:30-12:00) 中午 1. 睡觉（12：50-13：20） 2. 英语单词（13：20-13 : 50） 下午 1. 复习并查集（14：00-14：30） 2. 总结Acwing潜水员到博客中 3. 算法提高课dp（14：30 - 15：30） 4. 蓝桥杯数论继续学习并总结（15：30-17：30） 5. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 继续完成贪吃蛇项目 （19 ：30 - 21 ：00） 十点之后的时间自行安排继续加油！今天完成任务的一半差不多，效率很低很低，明天开始对自己设置惩罚如果没完成80%任务！ 3.24早晨 1. 英语单词（7：30-8：00） 2. 汤家凤数学（8：00-10：00） 3. 数学1800题（ 10：10-11：30） 4. 英语单词（11:30-12:00) 中午 1. 英语单词（12：30-13：00） 2. 睡觉（13：00-13：40） 下午 1. 复习快排与归并排序（14：00-14：30） 2. 算法提高课dp（14：30 - 15：30） 3. 蓝桥杯数论开始学习（15：30-17：30） 4. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 浙大数据结构（19：30-20：30） 3. 开始动手贪吃色项目（20：30 - 21：30） 十点之后的时间自行安排 总结今天的效率还行，能达到大约80%的感觉，但是在很多地方仍然需要继续更加专心才行，感觉番茄todo的每个番茄钟可以调到45分钟，适当的长一点对自己也有好处，起码不用再经常经常惦记着什么时候结束了，自己能够更加专注的去刷题今天开始了贪吃蛇项目，以后每天会分出一个半小时的时间去完成它！ 既然选择了开始，就要坚持下去。而且还要养成英文检索的习惯！加油 3.23早晨 1. 英语单词（7：30-8：00） 2. 汤家凤数学（8：00-10：00） 3. 数学1800题（ 10：10-11：30） 4. 英语单词（11:30-12:00) 中午 1. 英语单词（12：30-13：00） 2. 睡觉（13：00-13：40） 下午 1. 复习模拟散列表（14：00-14：30） 2. 复习堆排序（14：30 - 14：50） 3. 复习字典树、最大异或对（14：50-15：30） 4. 蓝桥杯数论开始学习（15：30-17：30） 5. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 浙大数据结构（19：30-20：30） 3. 开始动手贪吃色项目（20：30 - 21：30） 十点之后的时间自行安排明天加油啦，已经有小朋友比你还努力了，你还有什么不努力的理由呢？ 第一周3.21的任务安排周末的两天要加油啊！！！！早晨 1. 英语单词（7：30-8：00） 2. 数学1800题 （8：00-10：00） 3. 算法提高课dp（ 10：10-11：30） 4. 英语单词（11:30-12:00) 中午 1. 英语单词（12：30-13：00） 2. 睡觉（13：00-13：40） 下午 1. 复习染色法判定二分图（14：00-14：30） 2. 复习匈牙利算法（14：30 - 14：50） 3. 复习字典树（14：50-15：30） 4. 蓝桥杯数论开始学习（15：30-17：30） 5. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 浙大数据结构（19：30-20：30） 3. 操作系统（20：30 - 21：30） 十点之后的时间自行安排 3.20的任务安排早晨 1. 英语单词（7：30-8：00） 2. 数学汤家凤（8：00-10：00） 3. 数学1800题（10：10-11：30） 4. 英语单词（11:30-12:00) 中午 1. 英语单词（12：30-13：00） 2. 睡觉（13：00-13：40） 下午 1. 复习Prim算法（14：00-14：30） 2. 复习kruskal算法（14：30 - 14：50） 3. Floyd（14：50-15：30） 4. 蓝桥杯复习贪心最后两题以及数论开始学习（15：30-17：00） 5. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 浙大数据结构（19：30-20：30） 3. 操作系统（20：30-21：30） 十点之后的时间自行安排 总结今天的效率依旧不尽如人意，还是因为早晨看股市的缘故导致自己喜欢分心，周末需要尝试一下自己不看股市真正专注的情况了下午还好，但是PAT还是没抽时间去做题，晚上也是因为想吃外卖等因素导致没有完成今天的任务，今天的完成度还是只有65%左右但是今天把要交的作业都弄到手了，明天抽时间做完，明天多抽时间在做算法题上了 3.19的任务安排早晨 1. 英语单词（7：30-8：00） 2. 数学汤家凤（8：00-10：00） 3. 数学1800题（10：10-11：30） 4. 英语单词（11:30-12:00) 中午 1. 英语单词（12：30-13：00） 2. 睡觉（13：00-13：40） 下午 1. 复习八数码问题（14：00-14：30） 2. 八皇后（14：30 - 14：50） 3. dijkstra和SPFA（14：50-15：30） 4. 蓝桥杯复习贪心专题（15：30-17：00） 5. PAT每日一题（17：00-17：30） 晚上 1. 英语阅读（18：30-19：30） 2. 浙大数据结构（19：30-20：30） 3. 操作系统（20：30-21：30） 十点之后的时间自行安排 总结今天的学习效率还是不尽如人意，效率只有60%不到的样子，原因还是因为炒股看东方财富、以及困觉的原因，明天一定要避免这种情况发生！！！早晨多抽出时间来写1800题，下午多写写题目，今天PAT和英语阅读都没做，明天花时间补上一篇！明天一定要坚持试一试效率看能不能到90% 3.18的任务安排早晨1.英语单词 7:30-8:002.数学网课 4章 8:00-10:003.1800题 10:10-11:30 中午1.英语单词 11:30 - 12:00(or 12:00-12:30)2.睡觉 12:50 - 13:30 下午14:00-17:301.复习字符串哈希2.继续学习双指针BFS图论3.开始刷蓝桥杯的题目4.PAT每日一题 晚上1.英语阅读 18:30 - 19:302.数据结构 19:45 - 20:303.操作系统 20:30 - 21:30洗澡半个小时22：00以后自己安排时间 总结今天基本上完成了80％的任务，除了操作系统和蓝桥杯的题目没有刷之外基本上都还可以，数学刷题的速度需要加快但是由于早晨和下午看股市导致自己无法专心到学习中来，以后要从股市中脱身出来专心考研学习！！！]]></content>
      <categories>
        <category>recording</category>
      </categories>
      <tags>
        <tag>记录自己的每一天</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing-1215]]></title>
    <url>%2F2020%2F03%2F15%2FAcWing-1215%2F</url>
    <content type="text"><![CDATA[一道树状数组与逆序对思想结合的题目 第二十六天。心碎 题目 输入输出 分析思路由样例可以分析得到，这道题就相当于一个冒泡排序，每次交换相邻两个人 每次从前往后去扫，如果前面比后面大就交换 但是这其中的思想就是一种逆序对的思想 因为冒泡排序每排序一次，逆序对的数量就减1 所以冒泡排序交换的次数就是逆序对的数量 所以针对一个小朋友来说 如果前面有K1个小朋友比它高，那么必然会交换K1次到这个小朋友的后面 同理如果后面有K2个小朋友比它高，那么必然会交换K2次到这个小朋友的前面 所以交换的次数就是K1+K2次 于是我们可以用一个树状数组来进行存储，树状数组的大小为题目中最大的数值 以数值来进行存储 查询一下大于这个数的数有多少个，然后加到sum[i]中 然后把这个数加入到树状数组中 同理查询一下小于这个数的数有多少个，然后加到sum[i]中 然后把这个数加入到树状数组中 最后sum[i]中存储的就是每个数左右两边对应的k1+k2然后用等差数列求和公式sum[i]*(sum[i]+1)/2 因为最坏情况下可能要交换10^5次，那么10^5*(10^5+1)/2 = 5*10^9，但是int的范围大约在2*10^9，所以最后的结果可能会爆int，所以要在乘积里面就转换成long long res += 1LL*sum[i]*(sum[i]+1)/2 注意点1.因为从前往后循环的过程中把每个身高的人数记下来了，所以可以查询小于当前身高的人数。后半部分同理，所以要从后往前循环！2.第二次从后往前求的时候记得要把树状数组清零再求 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;//树状数组的写法const int N = 1000010;typedef long long LL;int a[N],C[N],sum[N];//树状数组维护的是每个身高的人数int n;int lowbit(int x)&#123; return x &amp; -x;&#125;int add(int x)&#123; for(int i = x;i &lt; N;i+= lowbit(i)) C[i]++;//人数加1&#125;int query(int x)&#123; int res = 0; for(int i = x;i &gt;= 1;i -= lowbit(i)) res += C[i]; return res;&#125;int main()&#123; scanf("%d",&amp;n); for(int i = 1;i &lt;= n;i++) scanf("%d",&amp;a[i]); LL res = 0; //求每个数前面有多少个比它大，对于a[i]来说，求a[i]+1到N里面有多少个数就是比它大的数 for(int i = 1;i &lt;= n;i++) &#123; sum[i] = query(N-1) - query(a[i]);//数组的最大的下标为N-1 add(a[i]); &#125; //把树状数组清零，再从后往前 memset(C,0,sizeof C); //求每个数前面有多少个比它小，对于a[i]来说，就是求从1到a[i]-1有多少个数比它要小 for(int i = n;i &gt;= 1;i--) &#123; sum[i] += query(a[i]-1); add(a[i]); &#125; for(int i = 1;i &lt;= n;i++) &#123; res += 1LL*sum[i]*(sum[i]+1)/2; &#125; printf("%lld",res); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luogu-P2392-dp]]></title>
    <url>%2F2020%2F03%2F08%2Fluogu-P2392-dp%2F</url>
    <content type="text"><![CDATA[P2392 kkksc03考前临时抱佛脚(可以转化成01背包的一个问题)第二十五天，坚持。 题目 输入输出 分析思路这一题的思路跟一开始见到的想法不一样 一开始我以为如果一共有三道题目，分别要4分钟、3分钟、2分钟 我以为写如果同时写4分钟的题和3分钟的题，必须4分钟的题写完了才能写下一道 但是根据样例来看并不是这样，比如4分钟内同时写4分钟的和3分钟的题，3分钟的题写完了的时候就可以直接写下一道题，那么就需要4 + (2 - (4 - 3)) = 5 因为可以有两个脑处理问题，如果把所有的时间平均成两半最好了，也就是两个脑所消耗的时间差为0最好，但显然不一定所有的数据都一定能满足两个脑能同时为t/2，所以我们要尽可能的保证两个脑子所消耗的时间差最小 既然不能保证同时为t/2，那么一定有一个脑子处理的时间小于t/2，另一个大于t/2 于是这题就可以转换成一个01背包问题，即在体积为t/2的情况下，能够把背包尽可能填满的最大值，这里价值也是时间，那么最后f[t/2]就是在t/2体积的情况下能够装满其中一个脑子的最多时间，那么另外一个脑子用的时间就是t - f[t/2]，最后取一个max，max(f[t/2],t - f[t/2])就是一科里面所用的最少的时间了 举一个例子10,8,7,3,2,1 合理的方案就是写10分钟和8分钟的，这时候t = 10 然后8分钟写完了，写那个7分钟的，t = 10 7分钟的写了2分钟还能5分钟写完 所以还剩5,3,2,1 这个时候写5分钟同时写3分钟的，t = 10 + 5 = 153分钟写完了同时再写2分钟的 则写完15分钟后还剩下1分钟的作业，最后t = 15 + 1 = 16 最后左脑10 + 3 + 2 + 1 = 16右脑8 + 7 = 15 所以就相当于把这么多的物品平均分到两个篮子里面使得两个篮子的物品总和相差最小，越平均越好 代码如下123456789101112131415161718192021222324252627282930313233343536#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 610,M = 21;int f[N];int num[M];int s[4];int main()&#123; for(int i = 0;i &lt; 4;i++) scanf("%d",&amp;s[i]); int t = 0; for(int k = 0;k &lt; 4;k++) &#123; int sum = 0; for(int j = 1;j &lt;= s[k];j++) &#123; scanf("%d",&amp;num[j]); sum += num[j]; &#125; memset(f,0,sizeof f); //cout&lt;&lt;sum/2&lt;&lt;"----"&lt;&lt;endl; for(int i = 1;i &lt;= s[k];i++) &#123; for(int j = sum/2;j &gt;= num[i];j--) &#123; f[j] = max(f[j],f[j-num[i]]+num[i]);//转换为01背包问题的写法 &#125; &#125; //cout&lt;&lt;f[sum/2]&lt;&lt;endl; t += max(f[sum/2],sum-f[sum/2]); &#125; printf("%d",t); return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode-1363-dp]]></title>
    <url>%2F2020%2F03%2F06%2FLeetCode-1363-dp%2F</url>
    <content type="text"><![CDATA[一个关于背包问题具体方案的求解 第二十四天，继续整理一些比较典型的题目 题目 样例 分析思路 如图所示，可以把这个题转换为一个背包问题来求解，最后如果要求具体的方案，可以最后的状态一步一步向前转移来判断，用状态的转移最后求出具体的方案 因为f[n][0]表示从前n个物品，且总体积模3余0的最大价值，那么我们应该把digits[N]数组从小到大排序，因为我们最后是从后往前推导状态能否转移过来 所以可以从后往前，把较大的数放到后面来判断，如果状态能够转移就先选最大的数，然后依次判断状态能够转移继续选数，因为是从大到小枚举，所以能选则选 因为我们最后求得的f[n][0]表示的是价值最大的选法，就是可以选的数字最多是多少，然后再从最大的数字从后往前推状态的转移即可，如果可以转移就表示能选digits[i]就先选，然后再转移判断能不能继续选 注意点1.因为存在全是{“0”,”0”,”0”,”0”…..}这种情况，为了避免消除前导0，我们可以直接判断res途中是否为”0”，因为从大到小枚举，已经出现0了，那么后面接着的不可能比0大，所以直接返回”0” 2.f[0][1],f[0][2]都是不合法的状态要赋给一个很小的值才行 代码如下1234567891011121314151617181920212223242526272829303132class Solution &#123;public: const int N = 1e4+10; string largestMultipleOfThree(vector&lt;int&gt;&amp; digits) &#123; sort(digits.begin(),digits.end());//因为我们是从最后的状态来往前推，所以数组从小到大排序即可 int f[N][3],num[N]; memset(f,0,sizeof 0); int n = digits.size(); f[0][1] = f[0][2] = -1e8;//因为f[0][1],f[0][2]都是不合法的状态，没有数不可能模余1或2，所以要设置成一个很大的负数 for(int i = 1;i &lt;= n;i++) num[i] = digits[i-1]; for(int i = 1;i &lt;= n;i++) for(int j = 0;j &lt;= 2;j++) &#123; f[i][j] = max(f[i-1][j],f[i-1][(j + 3 - num[i] % 3 )%3]+1); &#125; string res = ""; if(f[n][0] &lt;= 0) return "";//如果f[n][0]小于等于0，表示没有数字符合情况，直接返回空字符串 for(int i = n,j = 0;i;i--) &#123; if(f[i][j] == f[i-1][(j + 3 - num[i] % 3 )%3]+1)//如果能转移到右边选第i个物品的情况 &#123; res += to_string(num[i]);//选第i个物品 j = (j + 3 - num[i] % 3 )%3;//继续转移状态 &#125; if(res == "0") return res;//因为存在全是&#123;"0","0","0","0".....&#125;这种情况， //为了避免消除前导0，我们可以直接判断res途中是否为"0"，因为从大到小枚举，已经出现0了，那么后面接着的不可能比0大，所以直接返回"0" &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>dp</category>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode-1368]]></title>
    <url>%2F2020%2F03%2F03%2FLeetCode-1368%2F</url>
    <content type="text"><![CDATA[一个典型的01BFS的题目(最短路) 第二十三天，开始整理除了模板题之外的其他题目传送门 题目 样例 分析思路这题从题意上分析可知可以抽象成从点(0,0)走到点(n-1,m-1)的路径中最少修改的次数，其也跟最短路有关(一般的最短路的问题是问最短距离，这个最少的修改次数也可以跟最短路相关) 如果最短路的边权全部都是1的话可以用BFS进行求解，但是因为这个图的权值是0和1都存在，如果走的方向相同当前格子就为0，否则就为1，这个时候就不能用简单的BFS进行求解，而是用01BFS进行求解 01BFS，就不是简单的用queue去存储而是用一个双端队列deque去存储，如果当前边权为0就加入到队头、如果是1就加入到队尾，这样可以保证队列里面的单调性，确保我们取出的队头一定是最小的 说白了01BFS就是一个特殊的dijkstra算法，只不过是把堆优化版的dijkstra中的优先队列改成双端队列而已，队头必然是最小值，而且因为是从起点开始拓展的，如果边权为0加入队头，如果为1就加入队尾，然后依次拓展，这样一定保证队列里面单调的，这样子我们每次取的队头一定是最小值且是从起点拓展的。 同理，既然是最短路算法可以解决这个问题，我们同样可以用堆优化的dijkstra和SPFA去解决问题，思路跟上述类似不再详述，具体的过程在下列代码中 注意点为什么不能用dp？因为这个图更新的时候有一种环形的依赖关系，状态的更新可能是有循环的，没有一个明显的拓扑序 代码如下(01BFS)1234567891011121314151617181920212223242526272829303132333435typedef pair&lt;int,int&gt; PII;int n = grid.size(),m = grid[0].size(); int d[n+1][m+1]; bool vis[n+1][m+1];//判断是否拓展过 memset(d,0x3f,sizeof d); memset(vis,0,sizeof vis); int dx[5] = &#123;0,0,0,1,-1&#125;,dy[5] = &#123;0,1,-1,0,0&#125;; deque&lt;PII&gt; q; d[0][0] = 0; q.push_front(&#123;0,0&#125;); while(q.size()) &#123; PII t = q.front(); q.pop_front(); if(vis[t.first][t.second]) continue; vis[t.first][t.second] = true; for(int k = 1;k &lt;= 4;k++) &#123; int x = t.first+dx[k],y = t.second+dy[k]; if(x &lt; 0||x &gt;= n||y &lt; 0|| y &gt;= m) continue; int w = grid[t.first][t.second] != k ? 1 : 0; if(d[x][y] &gt; d[t.first][t.second] + w) &#123; d[x][y] = d[t.first][t.second] + w; &#125; if(w) q.push_back(&#123;x,y&#125;); else q.push_front(&#123;x,y&#125;); &#125; &#125; return d[n-1][m-1]; 代码如下(SPFA)123456789101112131415161718192021222324252627282930313233343536typedef pair&lt;int,int&gt; PII; const int N = 110;int dx[5] = &#123;0,0,0,1,-1&#125;,dy[5] = &#123;0,1,-1,0,0&#125;; int n = grid.size(),m = grid[0].size(); int d[N][N]; bool vis[N][N] = &#123;false&#125;;//这个数组是判断点是否在队列中 memset(d,0x3f,sizeof d); d[0][0] = 0; queue&lt;PII&gt; q; q.push(&#123;0,0&#125;); vis[0][0] = true; while(q.size()) &#123; auto t = q.front(); q.pop(); int x = t.first,y = t.second; vis[x][y] = false; for(int i = 1;i &lt;= 4;i++) &#123; int newx = x + dx[i],newy = y + dy[i]; if(newx &lt; 0 || newx &gt;= n || newy &lt; 0|| newy &gt;= m) continue; int w = grid[x][y] == i ? 0 : 1; if(d[newx][newy] &gt; d[x][y] + w) &#123; d[newx][newy] = d[x][y] + w; if(!vis[newx][newy]) &#123; q.push(&#123;newx,newy&#125;); vis[newx][newy] = true; &#125; &#125; &#125; &#125; return d[n-1][m-1];]]></content>
      <categories>
        <category>Leetcode</category>
        <category>SPFA</category>
        <category>BFS</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BellmanFord-and-SPFA]]></title>
    <url>%2F2020%2F02%2F29%2FBellmanFord-and-SPFA%2F</url>
    <content type="text"><![CDATA[BellmanFord和SPFA算法第二十二天。 Bellman-Ford算法题目 输入输出 分析思路dijkstra算法不能处理有负权边的情况Bellman-Ford算法适用于带负环的图，如果题目限制了最短路经过的边的个数，如上图的代码，那么有负环也无所谓了，因为限制k次导致我们不能无限的经过负环实现思路：1234for(循环n次) for(循环所有边a,b,w) dist[b] = min(dist[b],backup[a]+w)//其中所有边就可以直接用一个结构体数组来存储，不一定需要邻接表，只要能遍历到所有边就可以了 为什么用backup[N]数组来存放上一个的结果如图所示，如果题目要求k = 1，那么我们从1到3只能选择下面一条路径去求如果不用backup数组来存放上一个的话那么d[1] = 0d[2] = min(d[1]+1,d[2]) = 1此时再继续循环d[3]= min(d[2]+1,d[2]) = 2此时d[3]就是用上一个已经更新了的2来继续更新的此时则发生串联那么我们只调用上一个的backup数组d[1] = 0;backup[1] = 0,backup[2] = INF,backup[3] = INF;d[2] = min(d[2],backup[1]+1) = 1//1—2(1)d[3] = min(d[3],backup[2]+1) = INF//2—3(1)d[3] = min(d[3],backup[1]+3) = 3//1—3(3) 时间复杂度为O(nm) 注意点1.为什么是d[n] &gt; 0x3f3f3f3f/2？因为存在负权边，那么虽然n也是正无穷，但是经过负权边可能会把n的正无穷减小一点，但是也不会减太多，最多减500*10000，所以写成d[n] &gt; 0x3f3f3f3f/2即可判断2.memset函数是以字节为单位赋值的，每个int包含4个字节，所以memset完之后所有数会变成0x3f3f3f3f 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 510,M = 10010;int n,m,k;int d[N],backup[N];struct Edge&#123; int a,b,w; &#125;edges[M];int bellman_ford(int s)&#123; memset(d,0x3f,sizeof d); d[s] = 0; for(int i = 0;i &lt; k;i++) &#123; memcpy(backup,d,sizeof d); for(int j = 0;j &lt; m;j++) &#123; int a = edges[j].a,b = edges[j].b,w = edges[j].w; d[b] = min(d[b],backup[a] + w); &#125; &#125; if(d[n] &gt; 0x3f3f3f3f/2) return -1; return d[n];&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); int i = 0; for(int i = 0;i &lt; m;i++)&#123; int a,b,w; scanf("%d%d%d",&amp;a,&amp;b,&amp;w); edges[i] = &#123;a,b,w&#125;; &#125; int t = bellman_ford(1); if(t == -1) puts("impossible"); else printf("%d\n",t); return 0;&#125; SPFA算法题目 输入输出 分析思路SPFA算法是bellman-ford算法的优化在bellman-ford算法中，他要遍历所有边来进行更新，但是每一次迭代不一定每一条边都需要更新 dist[b] = min(dist[b],dist[a]+w) 那么SPFA可以对其进行优化dist[b]如果想变小的话，那么一定是dist[a]变小了如果dist[a]不变，那么dist[b]也一定不变 那么我们每次就可以用一个队列(堆、优先队列，但是一般来说用队列就可以了)进行存储，队里面就存放的就是所有变小的结点，只要队列里面不空，就取出队头t，更新t的所有出边，如果更新成功，就把b加入队列，如果队列里面已经有b了，就不用再存放进队列里面了 它的基本思路就是我更新过谁，我就再拿谁去更新别人，一个点如果没有被更新过，那么它就没有必要去更新别人，只有前面的点变小了，后面的点才会跟着变小 我的理解就是，它这个点变小了，他肯定会影响更多的点，所以就需要放入队列里面进行操作 注意点1.spfa只会更新所有能从起点走到的点，所以如果无解，那么起点就走不到终点，那么终点的距离就是0x3f3f3f3f 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;using namespace std;const int N = 100010;int h[N],e[N],ne[N],d[N],w[N],idx;bool vis[N];//vis[i]是判断是否存入过队列中int n,m;void add(int a,int b,int c)&#123; e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++;&#125;int spfa(int s)&#123; queue&lt;int&gt;q; q.push(s); vis[s] = true;//存入队列，vis[s] = true d[s] = 0; while(!q.empty()) &#123; int t = q.front(); q.pop(); vis[t] = false;//从队列中取出就改为false for(int i = h[t];i != -1;i = ne[i]) &#123; int j = e[i]; if(d[j] &gt; d[t] + w[i]) &#123; d[j] = d[t] + w[i]; if(!vis[j]) &#123; q.push(j); vis[j] = true;//加入队列就改为true &#125; &#125; &#125; &#125; if(d[n] == 0x3f3f3f3f) return -1; return d[n]; &#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); memset(h,-1,sizeof h); memset(d,0x3f,sizeof d); while(m--) &#123; int a,b,c; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); add(a,b,c); &#125; int t = spfa(1); if(t == -1) puts("impossible"); else printf("%d",t); return 0;&#125; SPFA判断负环题目 输入输出 分析思路在SPFA算法中dist[x]表示从起点s到x的最短距离那么我们可以用一个cnt[N]数组来存放，表示边数12345dist[x] = dist[t] + w[i]cnt[x] = cnt[t] + 11----------t——x| |---------------因为上面表示从1到t再到x的路径比下面的要短那么从1到t再到x的边数就是从1到t的边数再+1即cnt[x] = cnt[t] + 1此时如果cnt[x]&gt;=n的话，意味着从1到x至少经过了n条边，经过了n条边如果没有环的话就意味着有n+1个点，但是我们题目只有n个点，说明最短路径中存在环，这个环一定是负权的，因为如果是正权的，那经过这个环路径会变大，那我肯定不会经过这个环所以SPFA算法可以用来判断是否有负环 注意点1.有负环的话相当于某些点到起点的距离为负无穷，然后SPFA算法是正确的，且初始时这些点的距离为0,0大于负无穷，所以一定会把这些距离为负无穷的点不断更新，所以不需要把d数组赋值为正无穷 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cstring&gt;using namespace std;const int N = 100010;int h[N],e[N],ne[N],d[N],w[N],idx,cnt[N];bool vis[N];//vis[i]是判断是否存入过队列中int n,m;void add(int a,int b,int c)&#123; e[idx] = b; w[idx] = c; ne[idx] = h[a]; h[a] = idx++;&#125;int spfa()&#123; queue&lt;int&gt;q; for(int i = 1;i &lt;= n;i++) &#123; vis[i] = true; q.push(i); &#125; while(!q.empty()) &#123; int t = q.front(); q.pop(); vis[t] = false; for(int i = h[t];i != -1;i = ne[i]) &#123; int j = e[i]; if(d[j] &gt; d[t] + w[i]) &#123; d[j] = d[t] + w[i]; cnt[j] = cnt[t] + 1; if(cnt[j] &gt;= n) return 1; if(!vis[j]) &#123; q.push(j); vis[j] = true; &#125; &#125; &#125; &#125; return 0;&#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); memset(h,-1,sizeof h); //memset(d,0x3f,sizeof d); while(m--) &#123; int a,b,c; scanf("%d%d%d",&amp;a,&amp;b,&amp;c); add(a,b,c); &#125; int t = spfa(); if(t) puts("Yes"); else puts("No"); return 0;&#125;]]></content>
      <categories>
        <category>AcWing</category>
        <category>BellmanFord</category>
        <category>SPFA</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OptimizationOfDijkstra-byheap]]></title>
    <url>%2F2020%2F02%2F28%2FOptimizationOfDijkstra-byheap%2F</url>
    <content type="text"><![CDATA[堆优化的djiksra二十一。 题目 输入输出 分析dijkstra算法是针对单元最短路的一个算法n为点的数量,m表示边的数量但是朴素的dijkstra算法的时间复杂度为O(n^2)堆优化的dijkstra算法时间复杂度为O(mlogn) 因为朴素的dijkstra算法时间复杂度最高的部分就是两重循环找到离t距离最近的点，那么在一堆数里面找最小的数就可以用堆来进行优化了，那么时间复杂度会变成O(mlogn)具体的分析思路和关键步骤看如下代码即可 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;queue&gt;#include &lt;climits&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;using namespace std;const int N = 100010;typedef pair&lt;int,int&gt; PII;//维护距离的时候还需要知道结点编号，所以需要用一个pair来存储int h[N],e[N],w[N],ne[N],idx = 0,d[N];int n,m;bool vis[N] = &#123;false&#125;;void add(int a,int b,int c)//记住模板&#123; //e[i]存放的是从a指向b的结点 e[idx] = b; //w[i]存放的是a到b的边权 w[idx] = c; ne[idx] = h[a]; h[a] = idx++;&#125;int dijikstra()&#123; fill(d+1,d+1+n,INT_MAX); d[1] = 0; priority_queue&lt;PII,vector&lt;PII&gt;,greater&lt;PII&gt;&gt; heap;//用小根堆，使得堆最上面的元素最小 heap.push(&#123;0,1&#125;); while(heap.size()) &#123; auto t = heap.top(); heap.pop(); int distance = t.first,ver = t.second; if(vis[ver]) continue; vis[ver] = true; //h[i]、w[i]中的i都是指的下标idx，求d[j]时候中的j是具体的点，所以j = e[i]取出对应被指向的那个点是谁 //ver是起点，i = h[ver]表示从起点能指向的下一个点，然后继续寻找，找到它能够到达的所有的点 for(int i = h[ver];i != -1;i = ne[i]) &#123; int j = e[i];//i = h[ver]为被指向那个的点对应的下标，然后e[i]就是存放被指向那个点是谁 if(distance + w[i] &lt; d[j])//w[i]指的是从起点指向下一个点对应的边权 &#123; //比如a指向b，那么w[b]就表示a到b的距离 //distance就表示从起点到ver的距离 d[j] = distance + w[i];//distance + w[i] &lt; d[j]表示从ver经过i这个点到j比直接到j的距离要短的话，就更新 heap.push(&#123;d[j],j&#125;);//并把更新后的距离和对应点的编号都插入到堆里面 &#125; &#125; &#125; if(d[n] == INT_MAX) return -1; return d[n]; &#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); memset(h,-1,sizeof h);//设置从起点指向最后一个点到-1结束，取边界 while(m--) &#123; int a,b,c; scanf("%d %d %d",&amp;a,&amp;b,&amp;c); add(a,b,c);//用邻接表进行存储就不需要再对重边进行处理，因为它可以保证会选最短的边 &#125; printf("%d",dijikstra()); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20200225]]></title>
    <url>%2F2020%2F02%2F25%2F20200225%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! U2FsdGVkX1+q/VboPD0ngrfvvj0Gc7ExKGUWgJ9QUBjYOHL0EvN9d2G6DHtN/3sTlPXIH3ByqOGH5hJ2T4n97LZPujC1uHGBrCHz2yd3qo75hBL6dyKBqysMq471UiAe/YyfrMWBvignW17pnZNblg67xHjNb6QsO5OA+zHIg2GdYhMht8UoRwy/hxamI39XTR6WfSjyXjn4Tu77kGowRx12q0VYv1s3vGd60RE6S4Hoqt6M9FLh7d9Q1XbuX4DgFGidNq/2By8mvdBC+f378GmRm7R9mB2omZeUM+2o19HdE3eEYmguw13nvQJYrEGrY6zbneBQ9eq9aUql4M7u6CfMZRVybqEMGKKkd9R8+qb91GiQ5GuwobJfdU60UOtyKMY5ulxg/BwlyMWfiNOZnP2WGx4cF4sjnxgYGeN6GA7bwNepd3ULFHBUOYwfgfrfxgPGCYN5d2l93D3plPUx2IGLbd9Me23M0JeA9L5/J5dpT/4voNBR+EvmO3VknwNz1lkxPZn7m1W3x3yQiQxhxtV/gRKPbX4e1cU2pwDrjmqlOLN6JmtX30IEdoO4MBeldAGpUEZXGQtrosIRXStUBpCgH7QSqoZa7V7UJwAshgVjWIAjdnSmOpGSIb5hQscWoK8vy8YXaiADdQJjTBAgK1RT1WGCGWhUE4h7qdwRWabrKi1AwTsR7EQqdz59yVI4zwVemuqTUFvR/oJl0Cyt2fMSVwnKGKB4BxyBFoFDrJFfvBX0SNECafZZ4q+zOWAok/XTaYm//+3DvAGIBk0JkHmy03tDi8SMWug2Ic+x6FvS7GBO/hx+jvwYg3Ce++P2gkfepaeUkK0C057SY9uNdjAxa0mkw6nbyKLX/9L5Xz9IKmeyZgugMguGP71olpgttnb+cAsq7a15CLuRi5Eh/afkJWDGo7rqDOpWlIp0jPM9Uz3FpQFw5Pk3MLDvphpcMRg8L0oGq9DSa1PqR5DxK29+/xrk12SUjUsFtu4EjDEhP4Usd2gvoNrwuPwUOgUzZRPIGGSvpF/+F4KhPrfHNeXZsohzoaw64FDG+dBMTWZdHmO3bRmntLDGi3T2kvWtQ9leMnHPDj9JZmUL7MV935hvJ1mRdvZPXg1cc9N5nnCjb2xCAdtiSe+QtNkwhg08XIkwhWGCsYOR8HijxUBWbEYDrpUxAX0gZCp2cihw0YiO6C0ZmAwnhMoAKxfcve3iy8neywCN5gDuMpdnss5h40vT23qiiSQf7bE46YxzF6uCR1WK+03tHt8wrWes4adCTkj91T50tZ+z0RxVkcHDLn5E3yocYjcIJ0HPoFMFmsnPHx2R09UwDWH976rxjpE4YR3+n753YyX+uoCMnVJ4T1zS9qxvpSev13i7/pBCAk4N0qz7+20TbOL9tZBDZXGFfHP/eKkPnTxpwqcLQ1SJR3oBGvFIXMNo8jvudXhQj9KUEI+oT3nMY/NgLQtJIYzjPfCxrgOi7q5ZRB1ztaer7lMLGHcD9LzCWAZZwGDpkK/fLv8c8OfoIp7EIei92WVxNSQVzifBRhC4Sqkml4FGBub6Ct91Nran8wL3DEQOcpH7SZZD1PT858OG24n/hW8sRGSZKGInvIS67yjy8QCKZe/T0hEK+Fdbk2jfWZ0D6ZRg9B3nwkETIHwccTMZwYcSEIRd5553HWHivrrvHaqBThtF3i9G0Hrs5+xxlKGMYRdjA642RGBorark/uVyYFB/kc+h+dYY2gisn8nWN4tfyzj4AnuvqCGGCTTSF/LM3gm6Vsj0YOiIcjQ9uq2J9Dq6cp0OwhG5Wd0oPtwkhPcmDcebvTAqrHPxiyCEsTzOXsQTZBVUZkA4DlRc4lpecy2UaK9YfrV3GNk3rno4BXzZKm46QeL/Bx48sEja4dgOb21hVV2FwgAA2X5Q3R1qP90TUs9t/25Ekb0Z604t5FUal/RNbqb6SjG3A7aTvPdt3zGzAaRTj4+a17BQpTxEJee/ZfkVnl/un/oBnzia7XODWTYtxu9tPajsbCJJ8wAeIf3BTBNFlY7oVPhouSUGkewHfy4XYZL4GNeRo9+auqdUn/rMWKUteTqjI61kRZAhaq9fvb4hGQ1cm3mL7MHz/YVE0aySc9mcI8s0rXdWHVKj4Epzvr+L3qRVh+Wgb5uhZcffCFGa0VNkeBnJHZ8xC5ZOz4kSXjmsJoJy8LZRBuN0rLB3EzlDxoXoP8Q0C+1NNHs+d90EI8zq8ARPNNAP+Jbd5uwzkZc8pJAYlRT+27p0hMWMilB+GtBBqmOjgjG94autpPnLXKuqX1SsejaNVxTZBgvxvlcSDBUZpnoTx01KYhOUAIkUNv0nWuXKIghi99QWWhT+W7xsohMjvdo9gWmgzLOHZOzbc9TiDywwcRgmTq3AkZglTN1gIMHF6/cEyuPxQ7d1xWlJGJJ/pZT5mLZP49KiG+ia4Akke8doQS1czs0CdSHxGkBmL4E9ml0PSnSD3RM7dg1Fn7R+JjLkNyCcC9ldqYN/TnnW/XnUIpvIliU1VzSnUSnfj8Pe8oJkCsbQmvudYm48O61DH45OfdWMqM8BOWW/p/Sn+Sy7oJZ06c5BOwcubcV7B7HcgF2gwbrip5ZZJZPS4hD6JFkBIDYQ5CVwocS0sF9h58+4pJyFDhQHDWVeARWfAG0TQjKhaRUuMs6rEVyMm0t8ueW9tUgyEIcRbpPjOCTOee5vyw5gGLG2xxw/kQt4uUb8uaINCKai+WFveWiewGLCSweYZcXk9DZ8hm1IEiWY3BCjgRzjsYYe5+29Q31V2c4pkhO1z115EBUuePFJH+B6wKA6hDPgsMaKRvGzbbJMOpQD2DcxEuLBq+Vxn5qk4mZjYNPYw6oVNIMppTl/GDBXZS3xUUZXumRjob4FsgbINhUgJasIUiwYGWoKR1L4kZlNPYazlyU+0Ud24/c561u7C4f1+cLJ/O4ifocejVkeo6lguyhw1D/aA2FMp9oxpmytG0+UdmErgRMRGhMAri9Ff68aoOlJxKJJeUHdIWmP/HHQrsxRvtRjbtjR+JniKzLzYNUhCBvV0qYtUxSVhlxYwkuqOvTgDXBWvk/mweGup5ywhtl+LdGfSJfNpkaRyEHhzbmV7igR0PMVx7ZXwDkmmdexEvxz+lZKaON9GmWLH70iZVdD0lqpx4qEBBxyZXUedKA8e+JF+attaMlyDUW0sAlWRR9tFliJ/NRH1oYLElA3a3/eYNCxpv2qUuxf+0+qBtc2gf3yrhaol7laniCgWnihgB4rxqRlj15Ya/wKZFaxznJUTFuceK1ctQPpfd7I3Fw66KBCIJDR3f1m7x/ZhjaQd4IXx4VTFr1D+eOhXGvWntYbIvHtoSSlXARjR5zBPggN1sDKL315ofqtz+vjerie5mZkeITsfkRICtzRWFWqaGqUnPZ8GMN1eP9y4oCM+TbMyT2an84UM37T8ZCQKDTZTx6upYfRu3SI9GgZRqRMmaAo6cDQeNX8i0TJWBxV+y1UvL80mejdtwUJAGlFv8dLB3d0nN2r9/d1sqBwHKVxF1bclMq4p77COjbs1Y3pcGqLOS+K8Cc3L+vS8Z/nnpbZK5xBFYwSc9h3d2AFmFWvZcXe7kIHVaygalnvxmi2cpPdmCuim0QnhdcaQhqlBD9fj8jRgEiQGb1iglcdcN1RmMsOwRc7nm4+Z+VQEzKJJC0Cexow1Rs9prGsulTMIOD2+FDtySjZTnrAvw1TvuIYp9eq/CxL0R2m9QeVLYo6R2hcMJR6iBEpFkMlnQWr3+fE6o0nZjv5+W44pYjYB0bJTPffwbwSDzi/ZSFoiN7jxZK2XiTWlqNR6I8DCWUcg0se0opbyyKmxjTEuf5QP2E8MROaeXcOfC5Nsr8F8xOCg16xLLFG5Eb/k3CeiVAiBQO3wXjP6v/0Rq6NH1g7DSSHddBB2qGFdCixF6aZXj6PH4metdgyZJx9slMstCtcxW4kNTfrXJU3QuPLoYdImoUHaUPVjUuH4fH13bTCash3kEDFEmxQLtqK7uiDgN1K30UATIHZBmZzKVKBevvwz6QJMrHH1xqaFanGqyIsazb+O9CDCS1+Z2maHrcb/39dpZ3OXfh9rk3RN6dJPQHSf2J5RHHBMq6dkom7wmFk5IoCeA7d1pprcQJjZSkZXLv2UCNeSIznoUOWHpdHprsNyOHkqpOer9LFS4YKeWwmdJrMyOFu8athWwF4SwbEYsLv6XkJVn+W223gyRtDWM26+BNtDmb+rUvwlfRFFAJ7WS7goA87spvhSSmmVPyzMSpv9+fFXhVOpDLwHTLPyzrczjcafPsVlgBgsk554EKdXo2/KSALx0tn3J96ZJHfutlun864QnDiwxfL8s1Zfd3HFMb5PX0NuGpYIvLLxPsGJ7SKziadDTKbLVS6OMK0fZwA8jmQs9/JabfZfigZn4stpKd5tjTNkX76NX+8gFk2WGeHL/cUABOR7ZQmwNf5+jkxOwCSvSCBVuFawyKz5ykTeOWrU71ETO+BpeIMn3YqW6zDc6t+wGuB7Klf5fYZJTBldsHl1TI392NzT4pUKoqLJ8TQTORVrYZyk6LdZOxaVQ1Nd6Gk2eBFU7DOai1Y9rU062/578ufeSpWQ9SUbenabDeeiEi8TCaBIptGT6qqeNukCBBiqIF4FQ9Cq55drpI5SiqqR9fWR2FzLAlcBnTMYh3vhYb7B89V3NbQ+JI2HPEEdX28EeiylDdSqrdOXoJ9n8mygeAU+rg8+sRbOchQUOAYvUa6lr2sqnPCnbkrfRQv20N+eWyI43ZcgKULZPO3lLF++5wcvakpNpsWO1+sL3xhhxR0tKI2CObop4exytfS1J5Vhap0T/un0yu4bKkaxqMxJxpUXubUy2NRcHiIYAkHgEbyvwV3PgDBYmgzUXfK5Nir2VbmiDGLSAafOnvvYNh7zoqtnBjlMROTeRj8FLMV4zC9GezCCajPx/sONe+A4X+Y1YEZXX3tTAeXhaEdOJZtbnvjq3O0piYNybATqSTDG5AZjDWNlm/GctJoh2E0AgpBiGRHxl4MtIRoElSkBzSRQZCXWQcXhRGgANRLqhKSzxZgC9zNS52+Rs1pcc48htuByIDnGDcVoOEXT1g1QxGUF92hqVQUVgYKb+qZYn9shZcGZHrg2krTNwRS3AD0vleDL+z3uIJG5YGvwwTrypiqHpZk5ms6OA/mhShjaYX30hmCR/naH1ks9tW3+k5k00pwxA4U7wO02I9nWJ+CDVy2X+ZQ4PkxrJ47omL29TfyYQitDhUYh2vI15Gn3I5ePQtwD7XEgmarJG8AfhERnyPdcy57nbopYnJ0tir0pjwS1iIe8oVFSckdUisSeXgRvihpp5LK/6/wKRX5Ia23GdUVMeegM6lk3J2rQeRlIBiwxW2pFEhpFOZFORTL/Byq5oi3N7H7wuFIeYCYsYPwNBJNZwQzbBXjWuJQmVHA1sozCBcePmzDJfwqffluchVhwZMx7SXO04Gz3owX7kNoO4qtEKtpD+ih0k5KK4zzPhpCjxHfT2+VdPpxRUN7v9cVbMt53B2/l53iT4J4lyw97xC09H0tnD2UBZtOvmQG6RVkzqU0RemnzE9f/4j0+lGaYljNhst0SS6G56bQWUyNrgSRDG/VpBUmlDLzps9jtgjgz3z4oALislDJ4PP6zIDK/aneeL+LqEVpjRROzCBdAc2y7beowrCowdWKUcnZNxCvVAisRz/5CSCFE9bwaTfUlMeCoaUJGwrIrAKezdzPjIf95hz8SRBc1761/zcGzBdeajYfeRuJz/sfw664hdRtXeZ5kfB0i1uLQElHM0OoPHwMvoqLonVBPip6EyImsV0OcAGEMRbnPXD4ujtzhxSumEiAgO54Sv2Tw/KbMcSmHLDhqeUF]]></content>
      <categories>
        <category>DiaryOfInvestment</category>
      </categories>
      <tags>
        <tag>投资心得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MatrixOfFastPower]]></title>
    <url>%2F2020%2F02%2F25%2FMatrixOfFastPower%2F</url>
    <content type="text"><![CDATA[矩阵快速幂第二十天。 题目 输入输出 分析思路 注意点1.在计算矩阵快速幂的时候可能会爆int，所以要用long long存储2.f[N] = f[1]*A^N-1 因为f[n] = {fn,fn+1,Sn}那么f[2]就对应Sn经过快速幂最后得到的Sn的值3.对于计算fn*A12345for (int i = 0; i &lt; N; i ++ ) for (int j = 0; j &lt; N; j ++ ) temp[i] = (temp[i] + (LL)a[j] * b[j][i]) % m; a代表1X3的矩阵，b代表3X3的矩阵 这两个矩阵相乘后得到1X3的矩阵，所以是a的每一行a[j]去乘以b的第i行的j个数从上往下4.对于计算A*A1234567int temp[N][N] = &#123;0&#125;; for (int i = 0; i &lt; N; i ++ ) for (int j = 0; j &lt; N; j ++ ) for (int k = 0; k &lt; N; k ++ ) temp[i][j] = (temp[i][j] + (LL)a[i][k] * b[k][j]) % m; a和b都代表3X3的矩阵，那么最后相乘会得到3X3的矩阵 a[i][k]*b[k][j]表示a的每一行的第k个数乘以b的每一列的第k个数 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;typedef long long LL;int n,m;const int N = 3; //int f[N];int a[3][3] = &#123;&#123;0,1,0&#125;,&#123;1,1,1&#125;,&#123;0,0,1&#125;&#125;;void mul(int a[],int b[],int c[][N])&#123; int temp[N] = &#123;0&#125;; for(int i = 0;i &lt; N;i++) &#123; for(int j = 0;j &lt; N;j++) &#123; temp[i] = (temp[i]+(LL)b[j]*c[j][i]) % m; &#125; &#125; memcpy(a,temp,sizeof temp); &#125;void mul(int a[][N],int b[][N],int c[][N])&#123; int temp[N][N] = &#123;0&#125;; for(int i = 0;i &lt; N;i++) &#123; for(int j = 0;j &lt; N;j++) &#123; for(int k = 0;k &lt; N;k++) &#123; temp[i][j] = (temp[i][j] + (LL)b[i][k]*c[k][j])% m; &#125; &#125; &#125; memcpy(a,temp,sizeof temp); &#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); n--; int f[N] = &#123;1,1,1&#125;; while(n) &#123; if(n &amp; 1) mul(f,f,a);//res = res *a; mul(a,a,a);//a *= a; n &gt;&gt;= 1; &#125; cout&lt;&lt;f[2]; //f[N] = f[1]*A^N-1 因为f[n] = &#123;fn,fn+1,Sn&#125;那么f[2]就对应Sn经过快速幂最后得到的Sn的值 return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>FastPower</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HashOfString]]></title>
    <url>%2F2020%2F02%2F24%2FHashOfString%2F</url>
    <content type="text"><![CDATA[字符串哈希 第十九天，加油！ 题目 输入输出 样例 分析思路这题可以用字符串哈希的方式去解决把字符串看成是一个P进制的数str = “ABCABCDEYXC…..”那么h[0] = 0;h[1] = “A”的hash值h[2] = “AB”的hash值h[3] = “ABC”的hash值h[4] = “ABCA”的hash值…1.那么对于1到N的字符串来说如果想求L到R区间的hash值因为h[R]表示1到R的hash值h[L-1]表示1到L-1的hash值那么对于P进制来说，由于从左到右是从高位往低位走对于h[R]来说，下标R对应的为P^0,R-1为P^1,…,依次类推1对应的就是P^(R-1)对于h[L-1]，下标L-1对应的为P^0,L-2为P^1,…,依次类推1对应的就是P^(L-2)那么我们把h[L-1]向左移直到与h[R]对齐，左移的位数就是R-1-(L-2) = R-L+1比如123456789，我们要求789这个哈希值那么就找到7之前的哈希值123456然后向左移3位得到123456000最后123456789 - 123456000 = 789所以从L到R这段的hash值就表示为h[R] - h[L]*P^(R-L+1) 2.对于字符串hash来说ABCD假设映射为(1234)p那么ABCD的hash值就为(1*P^3+2*P^2+3*P^1+4*P^0)mod Q那么映射的hash值就是0到Q-1的数了PS:Q经验值取2^64，p一般取131或者13331 注意点1.字符串哈希默认P进制中的P = 131或者133312.不能把某一个字母映射成0，假设A映射成0，A的hash值为0，那么AA的hash值也为0，这样不同的字符串映射成了同一个数字，所以需要避免这种现象3.因为映射的Q为2^64,我们可以不用取模运算，直接用unsigned long long 来存储我们所有的h[i]，溢出的时候就相当于模上2^644.预处理前缀就是h[i] = h[i-1]*P + str[i]; 应用可以应用于一个字符串里面判断有没有两段是完全相同，这个方法比KMP要更好而且很多拓展的题目也可以应用到这个字符串哈希方法 草稿 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;typedef unsigned long long ULL;const int N = 100010,P = 131;int n,m;char str[N];ULL h[N],p[N];ULL get(int l,int r)//计算(l,r)的hash值&#123; return h[r] - h[l-1]*p[r-l+1]; &#125;int main()&#123; scanf("%d%d%s",&amp;n,&amp;m,str+1); p[0] = 1;//令P^0 = 1 for(int i = 1;i &lt;= n;i++) &#123; p[i] = p[i-1] * P;//预处理P^i h[i] = h[i-1]* P + str[i];//计算字符串的前缀和取模hash值，因为用的是ULL类型所以就不用取模运算了 &#125; while(m--) &#123; int l1,r1,l2,r2; scanf("%d%d%d%d",&amp;l1,&amp;r1,&amp;l2,&amp;r2); if(get(l1,r1) == get(l2,r2)) printf("Yes\n"); else printf("No\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>Hash</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing240-UnionFind]]></title>
    <url>%2F2020%2F02%2F22%2FAcWing240-UnionFind%2F</url>
    <content type="text"><![CDATA[一个稍微复杂一点的并查集模型摸了两天，今天是第十八天，争取一周能有五篇吧 题目 输入输出 分析思路我们可以用一个并查集的思路来做这道题不管是不是同类我们都放到一个集合里面或者说是放到一个子树里面我们可以设置距离根节点距离为1的点为吃掉根节点的，距离为2的点为被根节点吃的，距离为0的点(即模3余0)判断思路1.如果x,y均大于n，说明是假话2.A.当t == 1的时候，如果x和y的祖宗节点px,py相同的话，那么说明x和y在同一个集合里面，这个时候就判断x到根节点的距离d[x]和y到根节点的距离d[y]的关系，因为如果只有x和y到根节点距离相等的时候表示x和y是同类,那么距离不等的时候就不是同类，即(d[x] - d[y]) %3 != 0的时候表示距离不等，为假B.当t == 1的时候，如果x和y的祖宗节点px,py不相同的话，那么说明x和y不在同一个集合里面，那么这个时候就令x的祖宗结点px指向y的祖宗结点py这个时候px到根节点的距离需要计算令px指向py，(d[x] + ？)%3 = d[y] % 3则？ = d[y] - d[x] ，？ = d[px];即d[px] = d[y] - d[x];下面代码里有更形象的解释3.当t == 2的时候A.当x和y的祖宗结点相同的时候即px == py时，说明x和y在同一个集合里面如果x比y的距离多1,即(d[x] - d[y]-1)%3 == 0，说明他俩就是x吃y，否则不是下面代码里有更形象的解释B.当x和y的祖宗结点不相同的时候即px != py时，说明x和y不在同一个集合里面，这个时候就令x的祖宗节点指向y的祖宗节点，因为x吃y所以(d[x] + d[px]) % 3 == (d[y] + 1) % 312345678910因为是x吃y，那么x到根节点的距离比y要多1 因为距离根节点为1的点是吃根节点的，距离为2的点是被根节点吃的 ----------------- | | v | | | 0-----&gt;1-------&gt;2 比如0是根节点，1是吃根节点的距离为1,2是被根节点吃的距离为2 那么2吃1的话即2到根节点的距离要比1到根节点的距离多1 代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include &lt;iostream&gt;using namespace std;const int N = 50010;int n,m;int p[N],d[N];//d[i]表示到父节点的距离，只不过find之后才会变成到祖宗节点的距离int find(int x)&#123; if(p[x] != x)//如果x不是树根的话 &#123; int t = find(p[x]);//先找到根节点，并存起来 //p[x] = find(p[x]); d[x] += d[p[x]];//d[x]就是点x到点p[x]之间的距离，而d[p[x]]就是点p[x]到根节点的距离 p[x] = t; &#125; return p[x];&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i = 1;i &lt;= n;i++) p[i] = i; int res = 0; while(m--) &#123; int t,x,y; scanf("%d%d%d",&amp;t,&amp;x,&amp;y); if(x &gt; n|| y &gt; n) res++; else &#123; int px = find(x),py = find(y); if(t == 1) &#123; //如果x和y在同一个根节点上，但是x到根节点的距离和y到根节点距离模3不相同，说明x和y不是同类 //因为如果是同类的话到根节点的距离模3应该相同 if(px == py &amp;&amp;(d[x] - d[y]) %3 != 0) res++; else if(px != py)//如果x和y不在同一个根节点上 &#123; p[px] = py;//令x的根节点指向y的根节点，即px----&gt;py d[px] = d[y] - d[x];//那么px到根节点的距离就是如下所示 /* d[x] x-----px | |？ V y-----py d[y] 令px指向py，(d[x] + ?)%3 = d[y] % 3 则? = d[y] - d[x] ，？ = d[px]; 即d[px] = d[y] - d[x]; */ &#125; &#125; else//如果t == 2 &#123; //x吃y，那么x到根节点的距离比y要多1 //因为距离根节点为1的点是吃根节点的，距离为2的点是被根节点吃的 /* ----------------- | | v | | | 0-----&gt;1-------&gt;2 比如0是根节点，1是吃根节点的距离为1,2是被根节点吃的距离为2 那么2吃1的话即2到根节点的距离要比1到根节点的距离多1 */ if(px == py &amp;&amp; (d[x] - d[y]-1)%3 != 0)//x和y在同一个集合里面 &#123; //如果x比y的距离多1,即(d[x] - d[y]-1)%3 == 0 //说明他俩就是x吃y，否则不是 res++; &#125; else if(px != py)//x和y不在一个集合里面 &#123; p[px] = py;//令x的祖宗节点指向y的祖宗节点 d[px] = d[y] + 1 - d[x]; //因为x吃y所以(d[x] + d[px]) % 3 == (d[y] + 1) % 3 /* d[x] x-----px | |d[px] V y-----py d[y] */ &#125; &#125; &#125; &#125; printf("%d\n",res); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>UnionFind</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing-154-SlidingWindow]]></title>
    <url>%2F2020%2F02%2F19%2FAcWing-154-SlidingWindow%2F</url>
    <content type="text"><![CDATA[AcWing154.滑动窗口第十五天！今天开始单推AKi！！！！！！！！ 题目 样例 输入输出 分析思路这题应该用单调队列的思路去解决问题1.如果用暴力方法来维护的话每次需要遍历一遍队列然后去找到最大值和最小值每次把一个数插入队尾然后再删除队头时间复杂度为O(NK)挪动N次，扫描K次 2.如何去优化？比如当前队列里面3,-1,-3只要-1在，-3一定在，那么一定不会用到-1，所以我们就可以把这个元素删掉所以在队列里面，如果后面有一个元素比当前这个元素小的话，就可以把当前这个元素删掉了所以删掉一定不会用到的元素后，那么队列里面应该变成从小到大的元素了因为如果如果后面一个元素比当前元素小，就会删掉当前这个元素所以最大值和最小值就不用再继续遍历了，可以直接从队头/队尾取出最值，时间复杂度为O(1)同理求最大值的方法对称再来一遍就行了 注意点1.单调队列应该存放数组的下标，这样可以方便我们去判断队头是否滑出了窗口2.至少扫描了K个数之后再进行输出即i &gt;= k-1,表示扫描了0到k-1这k个数之后再输出队头元素 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using namespace std;const int N = 1000010;int n,k,a[N],st[N];int hh = 0,tt = -1;//hh为队头,tt为队尾int main()&#123; cin&gt;&gt;n&gt;&gt;k; for(int i = 0;i &lt; n;i++) scanf("%d",&amp;a[i]); //找到窗口中的最小值 for(int i = 0;i &lt; n;i++) &#123; //判断队头是否还在窗口内 //如果队头小于队尾，且滑动窗口超过了最左边的队头，那么hh就右移 if(hh &lt;= tt &amp; i - k + 1 &gt; st[hh]) hh++; //如果队尾的值大于a[i]，即队尾的元素大于后面那个元素，这个时候就把队尾大的元素出队 //直到队列里面都是比后面元素a[i]小的时候停止 while(hh &lt;= tt &amp;&amp; a[st[tt]] &gt;= a[i]) tt--; //这个时候再把a[i]的下标加入队列中，加入下标到队列中的好处是可以判断是否超过边界 st[++tt] = i; //最小值一定是在队头的位置 if(i - k + 1 &gt;= 0)//当至少扫描了K个数之后输出 printf("%d ",a[st[hh]]); &#125; cout&lt;&lt;endl; hh = 0,tt = -1; //找到窗口中的最大值 for(int i = 0;i &lt; n;i++) &#123; if(hh &lt;= tt &amp; i - k + 1 &gt; st[hh]) hh++; while(hh &lt;= tt &amp;&amp; a[st[tt]] &lt;= a[i]) tt--; st[++tt] = i; if(i - k + 1 &gt;= 0) printf("%d ",a[st[hh]]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>SlidingWindow</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[intervaldp-qujiandp]]></title>
    <url>%2F2020%2F02%2F16%2Fintervaldp-qujiandp%2F</url>
    <content type="text"><![CDATA[一个需要思考的区间dp问题第十四天desu！ 题目 输入输出 分析题目提取模型分析题目我们可以知道密码是由A、B、C、D四个回文子串串成的一个序列但是因为年代久远，A、B、C、D中有的密码脱落了所以它组成的这个序列就不是回文子串了我们需要找到当初最少添加多少个字母才能重新组成一个回文子串———&gt;添加n个字母组成回文子串,意味着原序列S里面也有n个字母没有对应的字母———&gt;继续转化,即转化为原序列S中删除n个字母可以形成回文串比如ABCDCBA,原本需要加一个D形成回文子串,我们可以转化为减去一个D形成ABCCBA回文子串———&gt;所以我们需要找到原序列S中的最长回文子序列即ABCDCBA里面的”ABC_CBA”回文子序列可以不连续 用dp的思想去解决问题显然，这题可以用区间dp的思路去解决问题状态用f[L,R]表示所有S[L,R]之间回文子串集合长度的最大值我们可以从f[L,R]来分解为四个部分1.如果S[L] == S[R]即区间[L,R]的两个端点相等的话那么f[L,R] = f[L+1,R-1] + 2;即等于去除这两个端点里面子序列的值加上22.如果S[L] != S[R]那么可以继续分情况讨论A.如果S[L]这个端点不在回文子序列里面B.如果S[R]这个端点不在回文子序列里面C.如果S[L]和S[R]都不在回文子序列里面然后f[L,R]对上述三种情况取一个max即可，虽然这三种情况有重复的部分，但是不影响我们取最大值，且C这种情况可以包含到AB两种情况中去那么f[L,R] = max(f[L+1,R],f[L,R-1]); 注意点1.我们这题应该从长度为1来开始进行枚举比如ABCBAC,A、B、C、B、A、C对应的f[L][R] = 1,即L == R的时候然后依次AB、BC、CB、BA、AC依次进行枚举这样子长度从小到大进行枚举，从而保证不漏2.我们求出的是最长回文子序列的长度f[0][n-1]，还要用n减去f[0][n-1]从而得到要删去字母的个数，同时也是题目要求添加字母形成回文串的个数 代码如下：1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;using namespace std;const int N = 1010;int f[N][N];//f[L][R]表示区间[L,R]之间的所有回文子序列集合长度的最大值， //最后f[0][n-1]对应的就是最大回文子序列的长度，n - f[0][n-1]即为脱落的种子数//注意，最大回文子序列和最大回文子串不同，最大回文子序列可以不连续而最大回文子串需要连续string str;int main()&#123; cin&gt;&gt;str; int len = str.size(); for(int i = 1;i &lt;= len;i++) &#123; for(int l = 0;l + i -1 &lt; len;l++ ) &#123; int r = l + i - 1; if(l == r) &#123; f[l][r] = 1; continue; &#125; if(str[l] == str[r]) f[l][r] = f[l+1][r-1] + 2; else f[l][r] = max(f[l+1][r],f[l][r-1]); &#125; &#125; cout&lt;&lt;len - f[0][len-1]; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SumOfCountInversions]]></title>
    <url>%2F2020%2F02%2F14%2FSumOfCountInversions%2F</url>
    <content type="text"><![CDATA[逆序对的数量 第十三天,加油！ 逆序对的定义对于数列的第 i 个和第 j 个元素，如果满足 i &lt; j 且 a[i] &gt; a[j]，则其为一个逆序对。重要的地方在于，一个元素可以不只是在一个逆序对中存在。如果 k &gt; j &gt; i 且 a[i] &gt; a[j] &gt; a[k]，那么这里有两个逆序对，分别是 (a[i], a[j]) 和 (a[i], a[k]), a[i]是可以使用多次的。 题目 输入输出 思路这道题可以用分治的思路解决，因为我们观察可知如果把一个数组一分为二，那么有三种情况1.两个数都在左边2.两个数都在右边3.两个数一个在左边一个在右边 假设数组的左右两边都已经按顺序排序好了我们这个时候就要考虑第三种情况假设数组为4,5,6,8,12,1,2,3,7,8这个时候我们枚举左边进行排序比如4比1大，那么4右边一直到中间的数一定也都比1大这个时候我们直接令res = mid - i + 1即为1对应的逆序对然后依次类推 为什么要排序？如上图所示，当进行排序过后方便我们进行计算以上面的数组为例归并排序最后分组8 | 5 | 12| 4| 6 | 8| 2 | 3 | 7 | 1 | 当一半一半的递归下去进行分组的时候8 和 5分到了左右两边这个时候第一种情况和第二种情况为0考虑第三种情况因为8比5大所以res += 1然后把8和5进行排序成5和8依次类推再合并进行5,8|4,6,12然后再合并左右两边，从而得到最终的结果 为什么这样排序不会改变逆序对数量？我个人的理解是左边的逆序对和右边的逆序对分别单独计算不会改变既在左边也在右边的逆序对，把左右的逆序对数目统计了之后就可以分别排序然后再计算第三种情况的逆序对数目 总之，这题就是在归并排序里面加一个计算逆序对的思想 注意点1.这题的数据会爆int，所以要转化成long long的形式记录数据2.当l == r的表示[l,r]区间只有一个数，返回0 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;typedef long long LL;const int N = 100000 + 10;int a[N],tmp[N];int n;LL merge_reverse(int l,int r)&#123; if(l == r) return 0; int mid = l + r &gt;&gt; 1; LL res = merge_reverse(l,mid)+merge_reverse(mid+1,r); int i = l,j = mid + 1,k = 0; while(i &lt;= mid &amp;&amp; j &lt;= r) &#123; if(a[i] &lt;= a[j]) tmp[k++] = a[i++]; else &#123; tmp[k++] = a[j++]; res += mid - i + 1; &#125; &#125; while(i &lt;= mid) tmp[k++] = a[i++]; while(j &lt;= r) tmp[k++] = a[j++]; for(int i = 0;i &lt; k;i++) a[l+i] = tmp[i]; return res; &#125;int main()&#123; cin&gt;&gt;n; for(int i = 0;i &lt; n;i++) scanf("%d",&amp;a[i]); cout&lt;&lt;merge_reverse(0,n-1); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
        <category>others</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[difference_chafen]]></title>
    <url>%2F2020%2F02%2F13%2Fdifference-chafen%2F</url>
    <content type="text"><![CDATA[差分模板 Day12,struggling! 差分的意义对于一维数组A[i],在[l,r]区间上使得每一个数同时加上一个C这个操作需要O(n)的时间复杂度而差分可以让我们从O(n)的时间复杂度降低到O(1)的复杂度 一维差分操作原数组a[N]存放每个数,b[N]为差分数组使得b[1] = a[1];b[2] = a[2] - a[1];b[3] = a[3] - a[2];…b[N] = a[N] - a[N-1]; 从而b[1] + b[2] + b[3] + … + b[i] = a[i];即b[N]数组的前缀和为a[i] 思路对于一个区间[l,r]上，我们想要让a[l]到a[r]所有数都加上C那么我们可以使b[l] += C,b[r+1] -= C;因为b[l] += C意味着求前缀和的时候在区间[l,N]的所有数都加上了一个Cb[r+1] -= C意味着求前缀和的时候在区间[r+1,N]的所有数都减去了一个C这样使得求前缀和的时候得到a的时候[l,r]区间都加上了一个C因为只要b[l] += C之后，最后求前缀和的时候l之后r之前的对应的a都会加到b[l]即a[i] = b[1] + b[2] + … + b[l] + … + b[i] 同理如果i在l之前的区间则不会加到b[l]，如果在r之后的区间也会加到b[r+1]，加C减C抵消 一维差分的例题题目 输入输出 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;const int N = 100000 + 10;int a[N],b[N];int n,m;int l,r,c;void insert(int l,int r,int c)&#123; b[l] += c; b[r+1]-=c;&#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); for(int i = 1;i &lt;= n;i++) &#123; scanf("%d",&amp;a[i]); insert(i,i,a[i]); &#125; while(m--) &#123; scanf("%d %d %d",&amp;l,&amp;r,&amp;c); insert(l,r,c); &#125; for(int i = 1;i &lt;= n;i++) &#123; b[i]+=b[i-1]; &#125; for(int i = 1;i &lt;= n;i++) &#123; printf("%d ",b[i]); &#125; return 0;&#125; 注意点我们在进行插入操作的时候可以把a[N]看成一个全为0的数组然后在区间(i,i)的地方一个一个插入a[i]. 二维差分思路二维差分就是把一维差分的操作扩展到了二维 即二维数组a[i][j]存储每个数b[i][j]存储差分和计算b[i][j]的二维前缀和求出a[i][j] 关键对于矩阵(x1,y1),(x2,y2)这一块区域如果要同时加上C对应的操作为b[x1][y1] += C;b[x2+1][y1] -= C;b[x1][y2+1] -= C;b[x2+1][y2+1] += C; 注意图里面虽然是紧挨着的，但是计算机里面是对应一个一个坐标所以我们要从(x2+1,y1)和(x1,y2+1)开始 题目 输入输出 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;const int N = 1000 + 10;int a[N][N],b[N][N];int n,m,q;void insert(int x1,int y1,int x2,int y2,int c)&#123; b[x1][y1] += c;//相当于(x1,y1)到右下角的区域全部加了c b[x2+1][y1] -=c;//相当于(x2+1,y1)到右下角的区域全部减去c b[x1][y2+1] -=c;//相当于(x1,y2+1)到右下角的区域全部减去c b[x2+1][y2+1] += c;//相当于(x2+1,y2+1)到右下角的区域全部加了c&#125;int main()&#123; scanf("%d %d %d",&amp;n,&amp;m,&amp;q); for(int i = 1;i &lt;= n;i++) for(int j = 1;j &lt;= m;j++) &#123; scanf("%d",&amp;a[i][j]); insert(i,j,i,j,a[i][j]); /*等价写法 b[i][j] = a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]; 因为a[i][j]是b[i][j]的前缀和，那么a[i][j] = b[i-1][j] b[i][j]的前缀和数组为S[i][j] S[i][j] = S[i-1][j] + S[i][j-1] - S[i-1][j-1] + b[i][j]; 因为a就是b的前缀和数组，所以S可以转换为a 那么a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1] + b[i][j]; 即b[i][j] = a[i][j]-a[i-1][j]-a[i][j-1]+a[i-1][j-1]; */ &#125; int x1,y1,x2,y2,c; while(q--) &#123; scanf("%d%d%d%d%d",&amp;x1,&amp;y1,&amp;x2,&amp;y2,&amp;c); insert(x1,y1,x2,y2,c); &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; b[i][j] += b[i-1][j] + b[i][j-1] - b[i-1][j-1]; &#125; &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; printf("%d ",b[i][j]); &#125; printf("\n"); &#125; return 0;&#125; 注意点同一维差分，我们在进行插入操作的时候相当于在区域[(i,j)(i,j)]这个地方插入a[i][j]]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing1209-dfs]]></title>
    <url>%2F2020%2F02%2F11%2FAcWing1209-dfs%2F</url>
    <content type="text"><![CDATA[AcWing1209.带分数第十一天~ 题目 输入输出 分析思路n可以表示成n = a + b / c的形式且a、b、c组成的数字为1到9且只能出现一次那么a、b、c就是1到9组成的全排列然后再随机分配成3个数 思路1第一种思路就是枚举1到9的全排列然后把每次的排列隔两个板子分成3个数然后再判断是否符合n = a + b / c 时间复杂度9!*9(枚举全排列的时间复杂度为n!*n)*C(8,2)(即9个数之间插两块板子) = 91445760差不多九千多万的复杂度大致的思路即为1.枚举全排列2.枚举位数3.判断等式是否成立 注意点在把1到9的全排列用两个板子分成三段可以用一个calc函数来进行计算calc(i,j)表示对数组里面i到j位转换为对应的数，即123456789int calc(int l,int r)&#123; int re = 0; for(int i = l;i &lt;= r;i++) &#123; re = re*10 + num[i]; &#125; return re;&#125; 思路2第二种思路是在第一种思路上进行的优化因为n = a + b / c，那么即b = n*c - a*c我们只需要枚举a和c就可以求出b来再判断1.b里面是否有0或者a和c重复的数字2.最后判断1到9里面是否还有数字没用到过这样可以降低时间复杂度大致的思路就是1.枚举a2.在枚举a的基础上去枚举c3.根据a和c求出b，然后再去判断是否满足条件(枚举a的基础上去枚举c其实是一个嵌套的dfs) 注意点这里 b = n*c - a*c中c可能有8位然后和n最大6位相乘会爆int，需要转化成long long 进行计算 思路1对应的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int N = 10;int num[N];//num数组存放每次全排列的结果int used[N] = &#123;false&#125;;//定义一个数组来判断全排列的时候哪些数用过哪些数没用过int res = 0,n;int calc(int l,int r)&#123; int re = 0; for(int i = l;i &lt;= r;i++) &#123; re = re*10 + num[i]; &#125; return re;&#125;void dfs(int u)&#123; if(u == 9) &#123; for(int i = 0;i &lt; 7;i++) for(int j = i+1;j &lt; 8;j++) &#123; int a = calc(0,i); int b = calc(i+1,j); int c = calc(j+1,8); if(a &gt; n) continue; if(b == n*c - a*c) res++; &#125; return ; &#125; for(int i = 1;i &lt;= 9;i++) &#123; if(!used[i]) &#123; used[i] = true; num[u] = i; dfs(u+1); used[i] = false; num[u] = 0; &#125; &#125; &#125;int main()&#123; cin&gt;&gt;n; dfs(0); cout&lt;&lt;res; return 0;&#125; 思路2对应的代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;typedef long long LL;const int N = 10;int n;bool st[N], backup[N];int ans;bool check(int a, int c)&#123; LL b = n * (LL)c - a * c; if (!a || !b || !c) return false; memcpy(backup, st, sizeof st); while (b) &#123; int x = b % 10; // 取个位 b /= 10; // 个位删掉 if (!x || backup[x]) return false; backup[x] = true; &#125; for (int i = 1; i &lt;= 9; i ++ ) if (!backup[i]) return false; return true;&#125;void dfs_c(int u, int a, int c)&#123; if (check(a, c)) ans ++ ; for (int i = 1; i &lt;= 9; i ++ ) if (!st[i]) &#123; st[i] = true; dfs_c(u + 1, a, c * 10 + i); st[i] = false; &#125;&#125;void dfs_a(int u, int a)&#123; if (a &gt;= n) return; if (a) dfs_c(u, a, 0); for (int i = 1; i &lt;= 9; i ++ ) if (!st[i]) &#123; st[i] = true; dfs_a(u + 1, a * 10 + i); st[i] = false; &#125;&#125;int main()&#123; cin &gt;&gt; n; dfs_a(0, 0); cout &lt;&lt; ans &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing93-dfsCombination]]></title>
    <url>%2F2020%2F02%2F10%2FAcWing93-dfsCombination%2F</url>
    <content type="text"><![CDATA[一个简单的递归实现的枚举问题 第十天，好好总结之前学过的东西！明天得开始好好按计划执行了 题目 输入输出 分析思路这题是要我们从1到n这n个整数里面随机选出m个数且按照从小到大进行输出 举例假设我们从1到5这5个数里面随机选出3个来我们可以从三个位置来进行分析如果所示我们第一个位置选1之后，那么第二个位置只能从2到5进行选择所以我们dfs函数的参数应该这样考虑1.因为要枚举每个位置，用一个数组way[N]来记录每个位置放什么数2.要用一个参数来判断枚举到哪个位置，用一个变量u来表示当前枚举到第几个位置3.因为枚举完一个数到一个位置之后，后面的数只能比已经枚举的数要大，所以要用一个变量start来表示当前最小可以从start开始枚举4.排列性枚举里面需要判重数组，因为他不知道哪个数有没有用过，但是组合枚举就不需要这个判重数组了 代码如下1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 26;int n,m;//n表示1到n个数，m表示从n个数中随机选取m个int way[N];//定义一个数组来存放每个位置对应的数void dfs(int u,int start)//u表示当前数组枚举在第几个位置,start表示可以从start向后选&#123; if(u == m+1) &#123; for(int i = 1;i &lt;= m;i++) cout&lt;&lt;way[i]&lt;&lt;" "; cout&lt;&lt;endl; return ; &#125; for(int i = start;i &lt;= n;i++) &#123; way[u] = i; dfs(u+1,i+1); way[u] = 0; &#125; &#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; dfs(1,1); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EulerSieve]]></title>
    <url>%2F2020%2F02%2F09%2FEulerSieve%2F</url>
    <content type="text"><![CDATA[欧拉筛模板 Day 9! 12345678910111213141516171819202122int primes[N], cnt;int minp[N];bool st[N];void get_primes(int n)&#123; for (int i = 2; i &lt;= n; i ++ ) &#123; if (!st[i]) &#123; minp[i] = i; primes[cnt ++ ] = i; &#125; for (int j = 0; primes[j] * i &lt;= n; j ++ ) &#123; int t = primes[j] * i; st[t] = true; minp[t] = primes[j]; if (i % primes[j] == 0) break; &#125; &#125;&#125; st[i] == 0表示没有被筛过,1表示被筛过否则从小到大枚举质数，然后把质数的i倍都筛掉1.我们筛掉的一定是合数，primes[j]一定不大于i的最小质因子，故一定是用最小质因子筛除的 2.合数一定会被筛掉，因为合数一定包含一个最小质因子设数N的最小质因子为pN = p * N/p则当i枚举到N/p的时候,因为p是最小质因子一定在primes数组里面会被枚举到t = N/p * p = N即合数N一定会被筛掉 核心本题的核心在于if (i % primes[j] == 0) break;这句话上当 i是prime[j]的倍数时，i = kprime[j]，如果继续运算 j+1，i * prime[j+1] = prime[j] * k prime[j+1]，这里prime[j]是最小的素因子，当i = k * prime[j+1]时会重复，所以才跳出循环。 举例假设2, 3, 4, 5, 6, … 12 请问12在什么时候被筛去的呢？ 按上述解释以及程序计算，在i == 4时，质数表中已有2, 3，可以4 * 3 == 12. 后续 i == 6时， 质数表2, 3, 5，也可以 6 * 2 == 12 筛去12. 跟着程序算一次便知，i == 4时只筛去了8，为何不筛去12，因为12的最小质因数为2，由4 mod 2 == 0也可以看出4不是最小质因数，与2配对的因数6将在后面筛去12，这样才是用最小质因数去筛。 而线性的证明，只需由上述例子中看出每个被筛去的数都是唯一的由 最小质因数（其实也就是最小正因数，易证）配对的因数（相应的最大因数）筛去，每个数只被筛去一次，故为O(n)。]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SegmentTree]]></title>
    <url>%2F2020%2F02%2F08%2FSegmentTree%2F</url>
    <content type="text"><![CDATA[线段树 第八天！加油啊！！！！奥利给！ 线段树的两个功能1.单点修改，时间复杂度为O(logn)2.区间查询，时间复杂度为O(logn) 四个基本操作1.pushup: 用子节点的信息更新当前结点信息2.build: 在一段区间上初始化线段树3.modify: (单点)修改4.query: 查询操作 根据具体例子来写一个线段树同上次用树状数组的那题，这次用线段树进行求解 题目 输入输出 线段树会存到一个一维数组里面其中下标为x的结点 父节点为x/2 或 x &gt;&gt; 1 左儿子是2x 或 x &lt;&lt; 1 右儿子是2x+1或 x &lt;&lt; 1|1 因为线段树是一棵树，所以一开始第一层会有n个点然后第二层有n/2个点，第三层有n/4个点依次类推，由于最后一层参差不齐可能会有前面所有点之和的个数所以最后一层最多有2n个n + n/2 + n/4 + …+ 1 + 2n &lt; 4n 所以结点个数小于4n我们设置的数组大小应为4*N我们用一个结构体数组来存放各个结点的信息1234struct Node&#123; int l,r; int sum;&#125;tr[4*N];其中l,r代表当前结点的左右边界,sum为当前结点左右边界里面所有数的和 具体的四个基本操作pushup操作pushup是把子节点的信息更新到父节点这里的题就对应着把子节点的值更新以后，向上更新到父节点1234void pushup(int u)&#123; tr[u].sum = tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1|1].sum;&#125; build操作我们这里设置一个函数build(u,l,r)表示把(l,r)这一段的数初始化为线段树其中u一般为根节点,l,r一般为我们要初始化成线段树的数组的边界1234567891011void build(int u,int l,int r)//u为当前结点边界,l,r为左右边界&#123; if(l == r) tr[u] = &#123;l,r,w[r]&#125;; else &#123; tr[u] = &#123;l, r&#125;; int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1,l,mid),build(u &lt;&lt; 1|1,mid+1,r); pushup(u);//把信息往上传递 &#125;&#125; 我们设置mid = l + r &gt;&gt; 1然后u的左儿子对应的就是build(u &lt;&lt; 1,l,mid)右儿子对应的就是build(u &lt;&lt; 1|1,mid+1,r) 需要注意的点当l == r的时候表示到达了根节点，这个时候直接赋值同时在进行每个操作的时候同样要进行初始化即tr[u] = {l, r};表示进入这个函数后u结点对应的边界为l到r query操作在这个题目里面query操作对应的就是计算区间和了我们定义query(u,l,r)为计算区间(l,r)的区间和，其中u一般为根节点开始12345678910111213int query(int u,int l,int r)&#123; //如果结点u对应的边界l1,r1在区间l到r之间，直接返回sum if(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum; //否则计算u对应边界的中点 int mid = tr[u].l + tr[u].r &gt;&gt; 1; int sum = 0; //如果l小于u对应的中点，说明需要到u的左儿子里面继续寻找 if(l &lt;= mid) sum += query(u &lt;&lt; 1,l,r); //同理如果r大于u对应的中点，说明需要到u的右儿子里面继续寻找 if(r &gt; mid)sum += query(u &lt;&lt; 1|1,l,r); return sum;&#125; modify操作在本题里面modify为修改某个点对应的值我们定义modify(u,x,v)为修改下标为x对应的值要加上v，u一般从根节点开始1234567891011void modify(int u,int x,int v)&#123; if(tr[u].l == tr[u].r) tr[u].sum += v; else &#123; int mid = tr[u].l + tr[u].r &gt;&gt; 1; if(x &lt;= mid) modify(u &lt;&lt; 1,x,v); else modify(u &lt;&lt; 1|1,x,v); pushup(u); &#125;&#125;本人的理解就是有点二分查找的意思，u从根节点开始假设一个数组下标为1,2,3,4,5,6,7，我们要修改下标为5的数那么根节点u边界为1到7mid = 1 + 7 &gt;&gt; 1 = 4 &lt; 5这个时候就要从5到7去找，即u的右儿子继续寻找mid = 5 + 7 &gt;&gt; 1 = 6 &gt; 5这个时候就找5到6，即u的左儿子继续寻找然后mid = 5 + 6 &gt;&gt; 1 = 55 == 5这个时候即为根节点，修改对应的值后再pushup(u)更新结点 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;//线段树//对应的操作//pushup: 用子节点的信息更新父节点//build: 在一段区间上初始化线段树//modify: 单点修改或者修改操作//query: 查询操作/*假设第一层有n个点，那么第二层有n/2个点，第三层有n/4个点 依次类推，由于最后一层参差不齐可能会有前面所有点之和的个数 所以最后一层最多有2n个 n + n/2 + n/4 + ...+ 1 + 2n &lt; 4n 所以结点个数小于4n 线段树存到一个一维数组里面 下标为x的结点 父节点为x/2 或 x &gt;&gt; 1 左儿子是2x 或 x &lt;&lt; 1 右儿子是2x+1或 x &lt;&lt; 1|1*/const int N = 100010;int n,m;int w[N];struct Node&#123; int l,r; int sum;&#125;tr[4*N];void pushup(int u)&#123; tr[u].sum = tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1|1].sum;&#125;void build(int u,int l,int r)//u为当前结点边界,l,r为左右边界&#123; if(l == r) tr[u] = &#123;l,r,w[r]&#125;; else &#123; tr[u] = &#123;l, r&#125;; int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1,l,mid),build(u &lt;&lt; 1|1,mid+1,r); pushup(u);//把信息往上传递 &#125;&#125;int query(int u,int l,int r)&#123; if(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum; int mid = tr[u].l + tr[u].r &gt;&gt; 1; int sum = 0; if(l &lt;= mid) sum += query(u &lt;&lt; 1,l,r); if(r &gt; mid)sum += query(u &lt;&lt; 1|1,l,r); return sum;&#125;void modify(int u,int x,int v)&#123; if(tr[u].l == tr[u].r) tr[u].sum += v; else &#123; int mid = tr[u].l + tr[u].r &gt;&gt; 1; if(x &lt;= mid) modify(u &lt;&lt; 1,x,v); else modify(u &lt;&lt; 1|1,x,v); pushup(u); &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) scanf("%d",&amp;w[i]); build(1,1,n); int k,a,b; while(m--) &#123; scanf("%d%d%d",&amp;k,&amp;a,&amp;b); if(k == 0) printf("%d\n",query(1,a,b)); else modify(1,a,b); &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BinaryIndexedTree]]></title>
    <url>%2F2020%2F02%2F06%2FBinaryIndexedTree%2F</url>
    <content type="text"><![CDATA[树状数组及其模板题第七天！777777777 从求区间和的问题来进行深入思考对于这种求区间和的问题，一般我们都是通过一个前缀和数组计算S[n]-S[m-1]从而求得区间[m,n]的和但是，如果我们中途要随时给第x个整数加上某一个数v那么我们需要重新更新前缀和数组S，时间复杂度为O(n)如果进行K次这样的操作那么时间复杂度为O(Kn)我们难以接受 于是我们就要想一个办法来解决这个问题降低时间复杂度 于是我们就应用树状数组来解决问题 树状数组的两个应用1.给区间中的某个位置加上一个数2.求前缀和从而方便得到区间和 树状数组仍然是一个数组C[N]，只不过它存的不是从1到N的前缀和而是从区间(x-2^k,x]即C[x] = (x-2^k,x]其中k表示当前下标x对应的数在第k层 举例设有原数组A[N],树状数组C[N]其中对于奇数来说C[1] = A[1]C[3] = A[3]C[5] = A[5]C[7] = A[7]C[9] = A[9]C[11] = A[11]C[13] = A[13]C[15] = A[15] 对于偶数来说第一种C[2] = A[1] + A[2]C[6] = A[5] + A[6]C[10] = A[9] + A[10]C[14] = A[13] + A[14] 第二种C[4] = A[4] + C[3] + C[2] = A[1] + A[2]+ A[3]+A[4]C[8] = A[8] + A[7] + C[6] + C[4] = A[1]+ … + A[8]….C[16] = A[1] + … + A[16] 不难看出，如果把x转换为二进制表示C[x]就表示区间(x-2^k,x]这个前开后闭区间的和其中k表示二进制后面有多少个0对应到我们样例中就是第几层到当前下标x对应层的和 lowbit运算我们定义lowbit(x) = x &amp; -x拿x = 844来举例x|——0000001101001100-x|—-1111110010110100x&amp;-x|-0000000000000100即844对应1后面有2个0lowbit(844) = 2^2 = 4(lowbit(x)也可以理解为能整除x的最大2的幂次) 于是我们可以把区间(x-2^k,x]转换为(x-lowbit(x),x] 最后求出树状数组C[N]即可进行更多的操作 AcWing 1264. 动态求连续区间和题目 输入输出 树状数组模板题 注意点1.lowbit运算 即x &amp; -x2.在下标为x的位置加上v 我们就需要更新树状数组C[i] 即把下标为x,x+lowbit(x),x+2*lowbit(x),…,的树状数组更新3.求前缀和因为C[x]表示区间(x-lowbit(x),x]这个里面的区间和我们只需从x开始从后往前加和直到i等于0为止比如12345res += C[x];y = x - lowbit[x];res += C[y]//而C[y]表示区间(y-lowbit(y),y]即区间一直往前延伸直到为0为止然后依次类推 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;const int N = 100010;int n,m,k;int a[N],tr[N];int lowbit(int x)//进行lowbit运算&#123; return x &amp; -x;&#125;void add(int x,int v)//add函数表示在下标为x的位置加v&#123; for(int i = x;i &lt;= n;i += lowbit(i)) tr[i] += v;&#125;int query(int x)//利用树状数组求前缀和&#123; int res = 0; for(int i = x;i &gt; 0;i -= lowbit(i)) &#123; res += tr[i]; &#125; return res;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i = 1;i &lt;= n;i++) scanf("%d",&amp;a[i]); for(int i = 1;i &lt;= n;i++) add(i,a[i]);//生成树状数组 int a,b; //查找操作 while(m--) &#123; scanf("%d %d %d",&amp;k,&amp;a,&amp;b); if(k == 1) add(a,b); else printf("%d\n",query(b) - query(a-1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[quickSort]]></title>
    <url>%2F2020%2F02%2F05%2FquickSort%2F</url>
    <content type="text"><![CDATA[快速排序[模板]因为各种事情断了两天，就算是第六天吧！接下来还会一直坚持的 题目 输入输出样例 分析思路快速排序的思路,对于一个数列q[N]1.确定分界点 q[l]、q[r]或者是q[l + r &gt;&gt; 1]或者是l到r区间上的随机点值得注意的是如果数据范围很复杂最好不取两个端点而是取中间的点 2.调整区间使得最后调整的区间x点左边都小于等于xx点右边都大于等于x 3.递归处理左右两个区间 注意点1.如果是取区间的中点那么l + r &gt;&gt; 1有可能要改成l + r &gt;&gt; 1 防止出现死循环2.最后左右递归区间的时候要注意那个分界点对x取点的影响，防止出现死循环3.因为最后从循环中出来i可能大于j所以划分区间的时候如果以j为准那么就要(l,j),(j+1,r) 反之则划分为(l,i-1),(i,r),这个时候对应的x的取值就要相应改变 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;const int N = 100000 + 10;int n;int f[N];void quick_sort(int num[],int l,int r)&#123; if(l &gt;= r) return ;//如果l&gt;=r则直接返回 int i = l-1,j = r+1; //这里i和j要从区间左右两端的外侧开始，因为后面是先i++,j--然后再进行判断 int x = num[(i + j) / 2]; //当区间划分为下面这种的时候 //quick_sort(num,l,i-1); //quick_sort(num,i,r); //int x = num[(i + j + 1) / 2]; x应该上取整才能防止死循环 while(i &lt; j) &#123; do i++; while(num[i] &lt; x); do j--; while(num[j] &gt; x); if(i &lt; j)swap(num[i],num[j]); &#125; //因为最后从循环中出来i可能大于j所以划分区间的时候如果以j为准那么就要(l,j),(j+1,r) //反之则划分为(l,i-1),(i,r) quick_sort(num,l,j); quick_sort(num,j+1,r);&#125;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) scanf("%d",&amp;f[i]); quick_sort(f,1,n); for(int i = 1;i &lt;= n;i++) printf("%d ",f[i]); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AcWing122-GreedyAlgorithm]]></title>
    <url>%2F2020%2F02%2F02%2FAcWing122-GreedyAlgorithm%2F</url>
    <content type="text"><![CDATA[一个稍微复杂的贪心问题 第五天了，我真的是一天都没有停下来呢。 题目 输入输出格式 分析思路n个小朋友围成一个环，然后每个人只能给左右两个人传递糖果且传递x个糖果消耗的代价为x 第一直觉肯定是糖果多的人怎么传给糖果少的人一时半会看不出来用什么方法可以解决问题，我们于是可以先建立一个数学模型 建立数学模型我们可以设n个小朋友现在手里的糖果数分别为A1,A2,A3 … ,An-1,An我们约定，从An传递到An-1为Xn个糖果数 其中,Xn为正表示糖果从An传递到An-1 反之如果为负，则表示从An-1传递到An 则依题意可知我们最终要求的就是|X1| + |X2| + |X3| + … + |Xn|的最小值 第二次做题的思路然后转化成求一个点到各个C[i]的距离之和最小，就是排序之后的C[i]数组的中点到各个C[i]点之差的和即为最小的距离之和 代码如下12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1000000 +10;typedef long long LL;int A[N],C[N],S[N];//A[i]记录原数据,S[i]为A[i]的前缀和数组LL n,sum = 0,avg,res;int main()&#123; scanf("%lld",&amp;n); for(int i = 1;i &lt;= n;i++) &#123; scanf("%d",&amp;A[i]); sum += A[i]; S[i] = S[i-1]+A[i]; &#125; avg = sum / n; for(int i = 1;i &lt;= n;i++) &#123; C[i] = S[i-1]-avg*(i-1); &#125; sort(C+1,C+1+n); for(int i = 1;i &lt;= n;i++) &#123; res += abs(C[n/2]-C[i]); &#125; cout&lt;&lt;res; return 0;&#125; 第一次做题的思路那么，显而易见最后每个点的结果一定是Ā每个点起初都是Ai，结果都是Ā那么我们通过每个点可以得到n个关系式即A1 - X1 + X2 = ĀA2 - X2 + X3 = ĀA3 - X3 + X4 = Ā … An-1 - Xn-1 + Xn = ĀA1 - Xn + X1 = Ā 整理上式X1 - X2 = A1 - ĀX2 - X3 = A2 - Ā…Xn-2 - Xn-1 = An-2 - ĀXn-1 - Xn = An-1 - ĀXn - X1 = An - Ā 感觉跟差分数列差不多的样子于是我们从最后一项依次递加i项比如最后两项相加可以得到X2 = X1 - ((n-1)Ā - An - An-1 -…- A2)最后三项相加可以得到X3和X1的关系依次类推我们可以得到Xi与X1的一个线性关系从而我们可以把所有的Xi转换成X1+Ci继续进行求解 继续整理Xn = X1 - (Ā - An)Xn-1 = X1 - (2Ā - An - An-1)…X2 = X1 - ((n-1)Ā - An - An-1 -…- A2)X1 = X1 于是我们要求的|X1| + |X2| + |X3| + … + |Xn|可以转换成|X1 - C1| + |X1 - C2| + |X1 - C3| + … + |X1 - Cn| 即转换成在直线上求一点X使得X到C1,C2,C3,…,Cn的距离最小 其中C1 = Ā - AnC2 = 2Ā - An - An-1…Cn-1 = (n-1)Ā - An - An-1 -…- A2Cn = 0 可以发现其中的一个递推关系就是Cn - Cn-1 = Ā - An-1又C1 = Ā - An我们可以根据这个递推关系求出所有的Ci然后再对Ci从小到大排序找到Ci的中间的点就是使得它到其他Ci距离之和最小的点 注意点1.数列最好从1开始方便计算2.当数列从1开始的时候，中间点即为(n+1)/2，需要+13.数据可能爆int，所以要用long long 长整形表示结果 总结这题是AcWing 104. 货仓选址的一个进阶题目，或者说是区间选点加了一个套子难点在于我们在考试的时候如果遇到这种题很难静下心来去分析出题目的数学模型并进行进一步的整理所以需要我们多做题多总结模型才行啊（ 代码如下：12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1000000 +10;typedef long long LL;int A[N],C[N],S[N];//A[i]记录原数据LL n,sum = 0,avg;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) &#123; scanf("%d",&amp;A[i]);//数据范围较大最好用scanf进行输入 sum += A[i];//计算所有糖果的和 &#125; avg = sum / n;//计算糖果的平均值 int k = 1; C[k] = avg - A[n];//初始化，C[1] = Ā - An for(int i = n;i &gt; 1;i--) &#123; C[k+1] = C[k] + avg - A[i-1];//根据Cn - Cn-1 = Ā - An-1递推关系来算出所有C[i]的值 k++; &#125; C[n] = 0; sort(C+1,C+n+1);//对各个点到原点的距离进行排序 LL res = 0; for(int i = 1;i &lt;= n;i++) &#123; res += abs(C[(n+1)/2] - C[i]);//找到中间的那个点再计算到其他个点的距离之和 &#125; cout&lt;&lt;res;//因为数据保证一定有解，所以我们直接输出res return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mergeSort]]></title>
    <url>%2F2020%2F02%2F01%2FmergeSort%2F</url>
    <content type="text"><![CDATA[归并排序模板今天是第四天！ 归并排序的三个要点1.确定分界点 mid = l + r &gt;&gt; 12.递归排序 然后分成左右两个部分继续递归3.用一个额外的数组来依次从小到大左右两部分，并且还要循环左右两边看是否还有剩余然后再赋值给原数组 *注意点merge_sort的边界条件是区间里面的个数为1个或者没有的话就直接return; 代码如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;const int N = 100010;//归并排序的三个要点/*1.确定分界点 mid = l + r &gt;&gt; 12.递归排序 然后分成左右两个部分继续递归3.用一个额外的数组来依次从小到大左右两部分，并且还要循环左右两边看是否还有剩余 然后再赋值给原数组* 注意点 merge_sort的边界条件是区间里面的个数为1个或者没有的话就直接return;*/int q[N],tmp[N];//设一个额外的tmp数组来int n;void merge_sort(int q[],int l,int r)&#123; if(l &gt;= r) return ;//当区间里面的个数为1个或者没有的话就直接返回 int mid = l + r &gt;&gt; 1; merge_sort(q,l,mid); merge_sort(q,mid+1,r);//把原数组分成左右两边然后继续归并排序 int k = 0,x = l,y = mid+1;//k为tmp里面有几个数 while(x &lt;= mid &amp;&amp; y &lt;= r) &#123; if(q[x] &lt; q[y]) tmp[k++]= q[x++]; else tmp[k++] = q[y++]; &#125; while(x &lt;= mid) tmp[k++] = q[x++];//如果还有剩余的就存放进tmp数组里面 while(y &lt;= mid) tmp[k++] = q[y++]; for(int i = 0;i &lt; k;i++) q[l+i] = tmp[i];//把tmp数组里面的数重新赋值给原数组&#125;int main()&#123; cin&gt;&gt;n; for(int i = 0;i &lt; n;i++) scanf("%d",&amp;q[i]); merge_sort(q,0,n-1); for(int i = 0;i &lt; n;i++) printf("%d ",q[i]); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[binarySort]]></title>
    <url>%2F2020%2F01%2F31%2FbinarySort%2F</url>
    <content type="text"><![CDATA[四个常用的二分模板第三天 二分查找的条件判断如果1 2 3 4 4 5 6 7我们如果想找到大于4的最小的那个数，即num[mid] &gt;= 4都得满足条件才行同理找小于4的最后一个数就是num[mid] &lt; 4，使得num[mid]所有的数都得满足小于4这个条件才行 代码如下12345678910111213141516171819202122232425262728293031323334353637383940int main()&#123; int num[9] = &#123;1,2,3,3,4,4,5,5,7&#125;;//测试数据 int L = 0,R = 8; int target = 5;//求小于等于target的最后一个数的下标 while(L &lt; R) &#123; int mid = L + R + 1 &gt;&gt; 1; if(num[mid] &lt;= target) L = mid; else R = mid - 1; &#125;//求大于等于target的第一个数的下标 while(L &lt; R) &#123; int mid = L + R &gt;&gt; 1; if(num[mid] &gt;= target) R = mid ; else L = mid + 1; &#125;//小于target的最后一个数的下标 while(L &lt; R) &#123; int mid = L + R + 1 &gt;&gt; 1; if(num[mid] &lt; target) L = mid ; else R = mid-1; &#125;//大于target的第一个数的下标 while(L &lt; R) &#123; int mid = L + R &gt;&gt; 1; if(num[mid] &gt; target) R = mid; else L = mid + 1; &#125; cout&lt;&lt;L; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个看起来很复杂的组合问题用dp求解]]></title>
    <url>%2F2020%2F01%2F31%2FAcWing1214-dp%2F</url>
    <content type="text"><![CDATA[AcWing1214. 波动数列Day3，striving 题目 输入输出样例 分析思路分析题目的大意一开始分析这道题咋一看是个序列模型，但其实是个组合模型因为可以肯定的是第一个数是不变的设为X那么数列即为X X+d1 X+d1+d2 X+d1+d2+d3 … X+d1+d2+…+dn-1其中di = {+a,-b}整理可得nx + (n-1)d1 + (n-2)d2 + … + dn-1 = S转换后 x = {S-[(n-1)d1 + (n-2)d2 + … + dn-1]} / n 则当S和di确定的时候x是一定确定的任何一个满足要求的合法序列对应一个d1到dn-1的取值，反过来也成立这是一一对应的关系 即原序列不同的方案数，等于所有d1到dn-1合法的取值的方案数 转换题目转换为求所有满足要求的所有d1到dn-1所有取法的方案数那么满足的要求是什么？1.di为+a或者-b2.因为x = {S-[(n-1)d1 + (n-2)d2 + … + dn-1]} / n 那么S % n == [(n-1)d1 + (n-2)d2 + … + dn-1]即有多少种选法的d1到dn-1的取值代入序列之和对n的余数等于总和S对n的余数 用dp的思路去求解问题状态的表示这道题目就相当于一个组合问题，可以相当于背包问题来做分析状态应该用两维去表示f[i,j]状态对应的集合即为所有从前i个数(前i个di)，且当前总和(总和即表示代入[(n-1)d1 + (n-2)d2 + … + dn-1])除以n的余数的方案的集合属性应该为数量 状态计算f[i,j]考虑最后一步，抓住最后一个不同点最后一步有两种情况因为最后一步是+dn-1有可能是+a,也有可能是-b d1 + d2 + … di(+a)d1’+ d2’+ … di(+a)不管前面的di是多少,di都为+a所以可以所有先去掉这个最后这个di去掉之后就相当于只考虑前i-1项，然后代入(n-1)d1 + (n-2)d2 + … + dn-1但是为了方便我们变换成d1 + 2d2 + … + (n-1)dn-1 (一一对应)(不换也可以)假设前i-1项的原序列和为C则有C(mod n) + ia(mod n) == j(mod n)即 C(mod n) = (j - ia)(mod n)即f[i,j] = f[i-1,(j - ia)%n] 同理当di = -b时f[i,j] = f[i-1,(j + ib)%n] 注意点1.凡是问满足要求不同选法的数量或者最大值时，都可以用以上类似的背包问题的模型2.这题不能用dfs来做因为长度n为1000，dfs时间复杂度为2^1000，不予考虑3.这个题取模的时候有可能为负数那么需要把负余数转换为正余数所以需要写一个函数get_mod4.S的范围包含负数,所以最后不能直接写S%n，也应代入get_mod函数中5.初始化f[0][0] = 1，表示当一项都不选的时候方案数为1，一项都不选代入原序列和为0,0对n取模的余数也为0 结论最后把f[i][j]所有的方案数都求出来最后对应的f[n-1][get_mod(s,n)]即为结果因为S % n == [(n-1)d1 + (n-2)d2 + … + dn-1]所以j = get_mod(s,n)时候对应的方案数为我们所求的结果因为对应的最后一项为dn-1所以i = n-1，表示前n-1项 代码如下：12345678910111213141516171819202122232425262728#include &lt;iostream&gt;using namespace std;const int maxn = 1010,MOD =100000007; int n,s,a,b;int f[maxn][maxn];int get_mod(int x,int y)//因为x有可能为负数，那么我们取模的时候需要加上y再取模得到正余数&#123; return (x % y + y) % y;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;s&gt;&gt;a&gt;&gt;b; f[0][0] = 1;//初始化，当一项都不选的时候方案数为1 for(int i = 1;i &lt; n;i++) &#123; for(int j = 0;j &lt; n;j++) &#123; f[i][j]= (f[i-1][get_mod(j-a*i,n)] + f[i-1][get_mod(j+b*i,n)]) % MOD; &#125; &#125; cout&lt;&lt;f[n-1][get_mod(s, n)];//注意S也有可能为负数 return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由两个简单dp组合而成的复杂dp问题]]></title>
    <url>%2F2020%2F01%2F30%2FAcWing1212-dp%2F</url>
    <content type="text"><![CDATA[第二天，坚持。 题目 分析题目题目有两个限制1.只能往右或者往下走2.一定要按照递增的顺序取物品3.一共要恰好取K件 数据范围n和m都为50所以这个题的维度可能比较多 分析f里面一定要有两维i,j来存坐标如果还要存当前取的数的坐标那么就会有四维了这是一个不明智的行为但是我们发现所有数的大小很小，才0到12，有很强的限制所以不需要存最后一个数是哪个数，只需要存最后一个数是多少就行了还有一维就是存最后一个取的物品价值是多少即f[i,j,k,c]前两维表示坐标,k表示当前取多少件,c表示取最后一件的价值是多少 计算时间复杂度50*50*50*12*13 = 390000用最多的时间复杂度10^7/390000约等于25即状态转移的计算量(大概还可以再循环一次)所以大概是五重循环的样子，前四重是状态，还有一重是状态的转移 y氏dp分析法分析dp问题 分为四种情况两大类AB分析最后一步A最后一步从上往下走 B最后一步从左往右走然后A B两类又可以继续划分A：A1：不取第W[i][j]个物品 A2：取第W[i][j]个物品B：B1：不取第W[i][j]个物品 B2：取第W[i][j]个物品 考虑不取第W[i][j]个物品，那么拿A1举例的话f[i][j][k][c] = f[i-1][j][k][c]因为不取第W[i][j]个物品那么k没变，对应的C也没变考虑取第W[i][j]个物品，那么拿A2举例的话f[i][j][k][c] = f[i-1][j][k-1][c-W[i][j]]因为取第W[i][j]个物品那么对应的就是从k-1转移过来的对应的C应该从之前已经选取k-1个物品中最大的价值C’，这个时候直接从0到V进行循环相加即可 对应的代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;/*分为四种情况两大类AB分析最后一步A最后一步从上往下走 B最后一步从左往右走然后A B两类又可以继续划分A：A1：不取第W[i][j]个物品 A2：取第W[i][j]个物品B：B1：不取第W[i][j]个物品 B2：取第W[i][j]个物品考虑不取第W[i][j]个物品，那么拿A1举例的话f[i][j][k][c] = f[i-1][j][k][c]因为不取第W[i][j]个物品那么k没变，对应的C也没变考虑取第W[i][j]个物品，那么拿A2举例的话f[i][j][k][c] = f[i-1][j][k-1][c-W[i][j]]因为取第W[i][j]个物品那么对应的就是从k-1转移过来的对应的C应该从之前已经选取k-1个物品中最大的价值C`*/const int N = 51,MOD = 1000000007;int f[N][N][13][14];//f[i,j,k,c]int W[N][N];int n,m,k;int main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;k; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; cin&gt;&gt;W[i][j]; W[i][j]++;//所有物品的价值都+1 &#125; &#125; //初始化 f[1][1][1][W[1][1]] = 1; //取第一件物品 f[1][1][0][0] = 1; //不取第一件物品,这里初始化C为-1其实更好理解,因为C的范围是在0到12，也就是说有可能为0 //取-1表示没取第一件物品，所以C初始化为-1，后面所有的物品价值都会大于-1 //但是数组下标最好不取负数，所以把所有的物品价值W[i][j]都++，第一件不取C初始化为0 for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; if(i == 1 &amp;&amp; j == 1) continue;//已经初始化 for(int u = 0;u &lt;= k;u++)(u和v都是从0开始的) &#123; for(int v = 0;v &lt;= 13;v++) &#123; int &amp;val = f[i][j][u][v];//用一个val做别名免除很长的f[i][j][u][v] val = (val + f[i-1][j][u][v]) % MOD;//每加一次都需要取模 val = (val + f[i][j-1][u][v]) % MOD; if(u &gt; 0 &amp;&amp; v == W[i][j])&#123;//因为要取出一件来，所以u必须大于0(保证u-1大于0)，且只有当C对应的为W[i][j]时才能取出这一件来 for(int c = 0;c &lt; v;c++) &#123; val = (val + f[i-1][j][u-1][c]) % MOD;//因为MOD为1000000007，那么最多只能加两个数取模，否则有可能爆int val = (val + f[i][j-1][u-1][c]) % MOD; &#125; &#125; &#125; &#125; &#125; &#125; int res = 0; for(int i = 1;i &lt;= 13;i++) res = (res + f[n][m][k][i]) % MOD;//最后再把走到[n,m]取了k个数，价值从1到13(因为之前把W[i,j]都加了1)每个相加再取模得到最后的结果res cout&lt;&lt;res; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二维前缀和]]></title>
    <url>%2F2020%2F01%2F29%2FAcWing796-TwoDimensionOfSum%2F</url>
    <content type="text"><![CDATA[二维前缀和 什么是前缀和？前缀和的定义:对于给定的数列A，它的前缀和数列S是通过递推来求出来的部分和即S[0] = A[0];S[1] = A[0] + A[1];S[2] = A[0] + A[1] + A[2];…S[n] = A[0] + A[1] + A[2] + … + A[n]; 这样做有什么好处？对于一个数列来说，我想求从下标m到n这一个区间的和如果不处理的话一个一个累加A[m] + A[m+1] + … + A[n]需要O(n)的复杂度我如果询问n次那么每次都要累加n次时间复杂度就是O(n^2) 很显然，如果每次询问的区间有重叠的话那我们每次都要累加多余的次数这个时候我们就要想办法去消除这种多余的步骤来降低我们的时间复杂度 于是我们可以提前预处理数组，取一个前缀和数组来存放数列的前缀这样，如果要求区间[m,n]的和的话值为S[n] - S[m-1]通过预处理把时间复杂度降到了O(1) (用前缀和数组存放也是一种空间来换时间的思想) 这便是一维前缀和的情况但是如果我们遇到了二维的情况应该怎么办呢？ 下面来用一个例题来为讲解二维前缀和 二维前缀和传送门 题目： 输入输出样例 从例题给的数据开始举例当前的二维数组(前缀和数组的下标统一从1开始)原数组A[i][j]表示存放原始数据二维前缀和数组S[i][j]表示从A[1][1]到A[i][j]这个矩阵的所有的和 怎么求二维前缀和数组？ 假设我想求[2,2]这个点的二维前缀和可以利用容斥原理即图中的两个黄色部分(黄色部分包括那个小的蓝色部分)中间那个蓝色部分被加了两次所以要减去最后剩下那个白色部分A[2,2]加上即得到了整个二维前缀和 用代码表示即s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j]; 计算了二维前缀和接下来就要计算子矩阵的和了假设我要计算从[x1,y1]到[x2,y2]这一部分的前缀和同样利用容斥原理大的矩形S[x2,y2]减去y1旁边的小矩形(黄色部分)s[x2,y1-1]减去x1旁边的小矩形(黄色部分)s[x1-1,y2]最小的那个部分减去了两次需要重新加回来s[x1-1,y1-1]即s[x2][y2] - s[x1-1][y2] - s[x2][y1-1] + s[x1-1][y1-1] 代码如下1234567891011121314151617181920212223242526272829303132333435#include &lt;cstdio&gt;#include &lt;iostream&gt;using namespace std;const int maxn = 1010;int a[maxn][maxn],s[maxn][maxn];int n,m,q;int x1,y1,x2,y2;int main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;q; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; scanf("%d",&amp;a[i][j]); s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j];//计算二维前缀和 &#125; &#125; while(q--) &#123; scanf("%d %d %d %d",&amp;x1,&amp;y1,&amp;x2,&amp;y2); printf("%d\n",s[x2][y2] - s[x1-1][y2] - s[x2][y1-1] + s[x1-1][y1-1]);//从二维前缀和计算子矩阵的和 &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记念自己的21岁。]]></title>
    <url>%2F2020%2F01%2F22%2F20200122%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[认真你就输了]]></title>
    <url>%2F2019%2F12%2F25%2F2019-year-end-summary%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191216]]></title>
    <url>%2F2019%2F12%2F16%2F20191216%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191209]]></title>
    <url>%2F2019%2F12%2F09%2F20191209%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dijkstra]]></title>
    <url>%2F2019%2F11%2F30%2Fdijkstra%2F</url>
    <content type="text"><![CDATA[浅谈Djikstra算法前言：前几天在算法笔记上看到了晴神对于最短路径算法Dijikstra的一个深入的分析，我感觉挺感兴趣的，顺便想借此机会来深入分析，顺带也是更新下博客了咳咳，顺带说一句我的博客看起来挺乱的，等有时间会做一个分类吧，但我不想把它变成单纯的一个技术博客，而是记录一个我的学习，生活，感悟，以及展示自己兴趣爱好的地方(虽然现在从哪方面看上去这人都挺low的) 好吧，那就开始我对Djikstra算法的认识吧 从最短路径算法Djikstra初谈什么是Djikstra? 迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。 这是百度百科上的定义，用我们生活中的例子来讲就相当于我们每天在地图上用的导航，导航可以帮我们在错综复杂的街道上，找到一条从出发地到达终点的最短路径 所以我们需要一个好的算法来干这事，而这种算法就叫做最短路算法(SSSP) 而其中Djikstra算法就是最短路算法中的一种(当然也是最简单的一种) 至于为什么叫Djikstra算法，因为Dijkstra算法是由一个叫Dijkstra的荷兰人发明的，故称此算法为Dijkstra算法。(怎么这么多废话) 好了，那现在进入正题 Dijkstra算法的工作原理？因为这个算法是为了求出来在一系列限制条件下两个地方的最短路径，那么我们一般怎么找到从一个地方到另外一个地方的最短路呢？ 对，我们首先得有一张地图才行啊 就拿我国庆去上海玩的经历来说吧 你现在刚从火车站出来搭地铁到人民广场这个下站了，天色已经很晚了，，但是你突然想走去黄浦江边的外滩去看风景 你可能要问，诶我为什么不继续坐地铁到那个南京东路下站然后再走去外滩啊，这样不是更近吗？(然鹅不幸的是国庆的前几天南京东站的晚上基本上都是被封的) 所以你只能选择走去外滩，当然你不可能像红色箭头这样飞过去了，不然警察叔叔会罚你 $10^{10} RMB的，所以你只能找到合适的道路走过去，也就是说你只能走那些标记为“路”的地方 于是我们就可以把每一个路口或建筑看作一个点，有些点与另一些点之间有边连接，这个边其实就是马路，连结了两个地方。 当然，有些马路的车流量比较大，有些在比较小；于是有的马路通过需要花费的时间多，有的花费的时间少。我们把一条马路通过所需要花费的时间，称作这条边的权值。所有的点和边连在一起，就成为了一个图。(没错如果你想直接从人民广场直接直接走到外滩几乎是不可能的，人流量可以把你窒息死) 图这种东西大概长这样： 一个圆就是一个点，圆上的数字是点的序号，绿色的线是边，边旁边的橙色数字是边的权值。之所以加上箭头，是因为我们假设所有马路都是单行线（双向车道改成两条单向车道不就好了）。 具体的Dijikstra算法的证明过程在这里不再给出，具体的过程可以自行百度好了(其实是我的证明水平还8太行) 但是djikstra算法不适用于有负边权的图，在这里不再赘述(才不会告诉你别人已经有更好的解释了啦) 戳这里 对我的理解来说，Djikstra算法最直观的一个解释就是以起点开始寻找有没有其他中介点能够使起点到达其他顶点的距离能够变小 Djikstra算法的一个伪代码12345678910111213141516bool vis[maxn] = &#123;false&#125;;void Djikstra(G, d[],s)&#123; 初始化 for(循环n次)&#123; u = 使d[u]最小的还未访问的顶点的标号 vis[u] = true;//记下u已被访问 for(从u出发能到达的所有顶点v)&#123; if(vis[v] == false &amp;&amp; 以u为中介点使s到达顶点v的最短距离d[v]更优) &#123; 优化d[v]; &#125; &#125; &#125;&#125; 其中G为邻接矩阵，s为起点 vis[i] == true时表示顶点Vi已被访问，vis[i] == false时表示顶点Vi还未访问 d[]表示起点s到达顶点Vi的最短距离，初始化时除了起点的d[s]赋为0，其余的顶点都赋予一个很大的数(比如INT_MAX或者自己赋一个很大的INF)(即相当于把除了起点与其他顶点的边权确认后，其余各个顶点之间的距离设为无穷大(即INF)，这样可以保证后来各个点的最短距离d[i]都是从起点s得来的) 举一个简单的例子拿一个简单的有向图来举例子吧 起点的d[s] = 0，其余点的d[i] = INF; 开始循环，起点1可以到达点3和点2先把vis[1] = true;下次就不再循环到起点1因为d[1] + weight[1][3] &lt; d[3]所以更新d[3]d[3] = d[1] + weight[1][3] = 3;同理d[1] + weight[1][2] &lt; d[2]所以更新d[2]d[2] = d[1] + weight[1][2] = 6; 继续循环，寻找d[i]中最小的点(即离起点最近的)再开始计算这时候d[3] = 3最小(因为d[1]已经被标记过了不再访问)此时就以点3为中介点，看起点以它为中介点到达另外点的距离能不能变短标记vis[3] = true;此时d[3] + weight[3][2] &lt; d[2]; 3 + 2 &lt; 6(即从1-&gt;3-&gt;2的距离比1-&gt;2的离更小)所以更新d[2] = d[3] + weight[3][2] = 5; 又以点3中介点可以到达点4d[3] + weight[3][4] &lt; d[4]; 3 + 3 &lt; INF此时更新d[4] = d[3] + weight[3][4] = 6; 同理以点3中介点可以到达点5d[3] + weight[3][5] &lt; d[5]; 3 + 4 &lt; INF此时更新d[5] = d[3] + weight[3][5] = 7; 此时还能访问的d[2] = 5,d[4] = 6,d[5] = 7,d[6] = INF;然后继续循环发现d[2]最小，于是再以2为中介点进行寻找vis[2] = true;d[2] + weight[2][4] &gt; d[4]; 5 + 5 &gt; 6此时不更新，由于2只能到达4所以结束循环 此时还能访问的d[4] = 6,d[5] = 7,d[6] = INF;于是以点4为中介点进行循环vis[4] = true;由于点4可以到达点5和点6d[4] + weight[4][5] &gt; d[5] 6 + 2 &gt; 7不更新，继续循环d[4] + weight[4][6] &lt; d[6] 6 + 3 &lt; INF所以d[6] = d[4] + weight[4][6] = 9;然后结束循环 此时还能访问的d[5] = 7,d[6] = 9;以点5为中介点进行循环vis[5] = true;由于点5可以到达点6d[5] + weight[5][6] &gt; d[6] 7 + 5 &gt; 9所以不更新，结束循环 此时还能访问的d[6] = 9;vis[6] = true;最后发现除了6自己以外其他点都已访问过，所以结束循环 最后的结果就是d[1] = 0d[2] = 5d[3] = 3d[4] = 6d[5] = 7d[6] = 9 至此算法结束。如果您人脑模拟出来跟上面的图示有不一致的地方建议您重新阅读本拙文。如果您还看不懂请戳这里。 具体实现的代码，以邻接矩阵作为举例这里是以PAT1003为举例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 510;//最大的城市数//N表示一共有N座城市 M表示一共有M条道路 C1 C2分别表示起点和终点int N,M,C1,C2;bool vis[maxn] = &#123;false&#125;;//定义一个数组来判断城市是否被访问int G[maxn][maxn];//表示城市与城市之间的距离int pre[maxn];//存储前驱结点int d[maxn];//记录最短距离,d[u]表示从起点s到达顶点u的最短距离int weight[maxn];//每个点的权值int w[maxn];//记录起点到每个点的最大权值int num[maxn];//num[u]表示起点s到达顶点u的最短路径条数void dijkstra(int s)//s表示起点&#123; fill(d,d+N,INT_MAX);//把所有点的距离都抹掉 d[s] = 0;//把起点的最短距离设置为0 w[s] = weight[s];//起点开始的权值即为起点的权值 num[s] = 1; for(int i = 0;i &lt; N;i++)&#123; //循环n次 int u = -1,MIN = INT_MAX;//u设置为-1是为了方便当找不到可以连接的点时方便判断,MIN存放最小的d[u], for(int j = 0;j &lt; N;j++) &#123; //找到未访问顶点中d[]最小的顶点,因为从起点开始更新了后面的d[u],然后下次循环就要从这个点寻找能到达顶点中距离最小的那个点 if(d[j] &lt; MIN &amp;&amp; vis[j] == false) &#123; u = j;//找到跟起点相距最短的那个点 MIN = d[j];//更新最短的距离 &#125; &#125; if(u == -1) return ;//如果找不到小于INT_MAX的d[]，意味着剩下的顶点和起点s不连通 vis[u] = true;//标记为已访问 for(int v = 0;v &lt; N;v++) &#123; //如果u能到达v 且 v未访问 -&gt; 则以u为中介点到达v可以使d[v]更优 if(G[u][v] != 0 &amp;&amp; vis[v] == false ) &#123; //当以u为中介点的时候能使d[v]变小 if(d[u] + G[u][v] &lt; d[v] ) &#123; d[v] = d[u] + G[u][v];//覆盖d[v] w[v] = w[u] + weight[v];//更新w[v] num[v] = num[u];//覆盖num[v] &#125; else if(d[u] + G[u][v] == d[v])//找到一条相同长度的路径后 &#123; if(w[v] &lt; w[u] + weight[v])//如果这条路径的点权之和更大 &#123; w[v] = w[u] + weight[v];//更新 &#125; num[v] += num[u];//有相同路径长度,则相加num[u],因为当d[u] + G[u][v] &lt; d[v]时候已经算出一个num[v]是符合条件的 &#125; //那么当d[u] + G[u][v] == d[v]时之前d[u] + G[u][v] &lt; d[v]算的num[v]仍然符合条件,则继续加上现在相等时候的num[u] &#125; &#125; &#125;&#125; 分析算法的复杂度？从复杂度来看，主要是外层循环O(V)与内层循环(寻找最小的d[u]需要O(V)、枚举v需要O(V))产生的，总复杂度为O(V*(V+V)) = O(V^2). 但其实Djikstra算法是可以优化到O(nlogn + m)的级别的为什么？因为必须把每个点都标记为已访问(即vis[i] = true)，所以外层循环的O(V)时间是无法避免的但是寻找最小的d[u]的过程可以不必要一个一个重新循环去寻找最小的那个的d[u]可以通过堆优化来降低复杂度，最简单的做法就是直接用STL中的优先队列priority_queue(STL依赖症) 看了上面的代码你可能已经发现了一个问题，那就是如果题目除了最短路径还有其他的要求怎么办？比如PAT1003里面就要求找到从起点到终点的最短路径的条数以及最短路径的数目之和即最短的路径可能不止一条 于是有三种主要的方式来进行考察①新增边权，即以新增的边权花费为例cost[u][v]表示从u -&gt; v的花费，并增加一个数组c[]，令起点s到达顶点u的最少花费为c[u]同理初始化的时候c[s] = 0,其余均为INF这样就可以在d[u] + G[u][v] &lt; d[v]时更新d[v]和c[v]而当d[u] + G[u][v] == d[v]时且c[u] + cost[u][v] &lt; c[v]时更新c[v](即可以是s到v的最少花费更优时更新c[v]) 样例代码:12345678910111213for(int v = 0;v &lt; n;v++)&#123; //如果v未访问 &amp;&amp; u能到达v if(vis[v] == false &amp;&amp; G[u][v] != INF)&#123; if(d[u] + G[u][v] &lt; d[v])&#123; d[v] = d[u] + G[u][v]; c[v] = c[u] + cost[u][v]; &#125; else if(d[u] + G[u][v] == d[v] &amp;&amp; c[v] &gt; c[u] + cost[u][v])&#123; c[v] = c[u] + cost[u][v]; &#125; &#125;&#125; ②新增点权，即以新增的点权代表城市能收集到的物资为例，用weight[u]表示城市u中的物资数目，并新增一个数组w[]，即从起点s到达顶点u可以收集到的最大的物资为w[u]，初始化的时候w[s] = weight[s],其余均为0，这样就可以在d[u] + G[u][v] &lt; d[v]时更新d[v]和w[v]而当d[u] + G[u][v] == d[v]时且w[u] + weight[u][v] &gt; w[v]时更新w[v](即可以使s到v的最大物资更优)代码与上面类似不再给出 ③求最短路径条数，只需要增加一个数组num[]，令从起点s到达顶点u的最短路径条数为num[u]，初始化时num[s]为1，其余num[u]均为0这样可以使当d[u] + G[u][v] &lt; d[v]使num[v]继承num[u]而当d[u] + G[u][v] == d[v]时将num[u]加到num[v]上 代码如下12345678910111213for(int v = 0;v &lt; n;v++)&#123; //如果v未访问 &amp;&amp; u能到达v if(vis[v] == false &amp;&amp; G[u][v] != INF)&#123; if(d[u] + G[u][v] &lt; d[v])&#123; d[v] = d[u] + G[u][v]; num[v] = num[u]; &#125; else if(d[u] + G[u][v] == d[v])&#123; num[v] += num[u]; &#125; &#125;&#125; 鉴于时间关系暂时就先总结这么多，Dijikstra算法其实能扩展的东西还有很多，比如如果题目要求具体的最短路径的话还要另外增加一个记录前驱结点的数组之类的东西，等以后有时间我再来补齐吧!]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191120]]></title>
    <url>%2F2019%2F11%2F20%2F20191120%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>每天一点小感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-1032]]></title>
    <url>%2F2019%2F11%2F13%2FPAT-1032%2F</url>
    <content type="text"><![CDATA[1032 Sharing传送门 题目的大意就是: 给出两条链表,要你找出两条链表第一个相交点如果有相交点,给出相交点地址值,如果没有,返回-1 思路：1.给出两条链表，我把所有的结点都标记为false(或者0)，然后我标记第一条链表的所有点为ture(或者1)，我再从第二条链表开始遍历，如果遇到标记点为1就为相交点，如果没遇到就说明两条链表没有相交点 注意事项：1.这题应该用静态链表比较合适，用map容易超时2.再用静态链表的时候定义maxn一定要大一点,因为数组的index值也很大(比如11111,22222)，否则数组会越界，PAT会报错“段错误”3.最后输出的时候要用print(“%05d”)来输出，因为我是用int型来保存地址的嘛，所以在输入00002的时候他会保存为2，那么我在输出的时候就应该在前面补0才行4.静态链表的next结点不是指针 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;using namespace std;//PATA 1032 Sharing//题目大意：给出两条链表,求出两条链表的第一个共用结点const int maxn = 100010;struct Node&#123; char data; int next; bool flag;&#125;node[maxn];int main()&#123; int s1,s2;//s1和s2分别为第一二条链表的首节点 int N;//N表示一共有N个结点 cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;N; int result = -1; int address,next; char data; for(int i = 0;i &lt; N;i++) &#123; cin&gt;&gt;address&gt;&gt;data&gt;&gt;next; node[address].data = data; node[address].next = next; &#125; for(int i = 0;i &lt; N;i++) &#123; node[i].flag = false; &#125; for(int p = s1;p != -1;) &#123; node[p].flag = true;//flag为true表明在第一条链表上 p = node[p].next; &#125; for(int q = s2;q != -1;) &#123; if(node[q].flag == true) &#123; result = q; break; &#125; q = node[q].next; &#125; if(result != -1) &#123; printf("%05d",result); &#125; else &#123; cout&lt;&lt;result; &#125; return 0;&#125;]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-1059]]></title>
    <url>%2F2019%2F11%2F02%2FPAT-1059%2F</url>
    <content type="text"><![CDATA[1059 Prime Factors传送门 题目大意：就是分解一个质因数 思路：如果要分解一个质因数，那么最简单的思路就是从2开始相除，直到不能除尽为止，同时记录除每个质因数的次数，最后按题目的要求输出 所以要几个步骤：1.首先列出一个素数表2.从素数表里面依次相除，并记录每个可以相除质数的次数3.打印的时候要注意最后一个不能有*符号(所以我需要用一个num来记录有多少个不同的质数方便最后打印)4.用一个fac的结构体来记录质数和次数 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;bits/stdc++.h&gt;using namespace std;//分解质因数的实现const int maxn = 10001;int prime[maxn],pNum = 0;bool p[maxn] = &#123;false&#125;;void setPrime()&#123; for(int i = 2;i &lt; maxn;i++) &#123; if(p[i] == false) &#123; prime[pNum++] = i; &#125; for(int j = 0;j &lt; pNum;j++) &#123; if(i * prime[j] &gt; maxn) break; p[i * prime[j]] = true; if(i % prime[j] == 0) break; &#125; &#125;&#125;struct factor&#123; int x,cnt;//x记录质因数,cnt记录质因数的个数&#125;fac[10];int num = 0,n;//num为不同质因子的个数void decomposePrimeFactor(int n)&#123; int temp = 0,i = 0,sum = 0; while(n) &#123; while(n % prime[temp] == 0) &#123; fac[i].x = prime[temp]; fac[i].cnt++; n /= prime[temp]; if(n % prime[temp] != 0)&#123; i++; num++; break; &#125; &#125; temp++; if(n == 1) break; &#125;&#125;int main()&#123; setPrime(); int cmp = 0; cin&gt;&gt;n; if(n == 1) &#123; cout&lt;&lt;"1=1"; &#125; else &#123; decomposePrimeFactor(n); cout&lt;&lt;n&lt;&lt;'='; for(int i = 0;i &lt; 10;i++) &#123; if(fac[i].cnt == 1) &#123; if(cmp == num-1) &#123; cout&lt;&lt;fac[i].x; &#125; else &#123; cmp++; cout&lt;&lt;fac[i].x&lt;&lt;'*'; &#125; &#125; else if(fac[i].cnt &gt; 1) &#123; if(cmp == num-1) &#123; cout&lt;&lt;fac[i].x&lt;&lt;'^'&lt;&lt;fac[i].cnt; &#125; else &#123; cmp++; cout&lt;&lt;fac[i].x&lt;&lt;'^'&lt;&lt;fac[i].cnt&lt;&lt;'*'; &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191007]]></title>
    <url>%2F2019%2F10%2F07%2F20191007%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190926]]></title>
    <url>%2F2019%2F09%2F26%2F20190926%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-1003]]></title>
    <url>%2F2019%2F09%2F09%2FPAT-1003%2F</url>
    <content type="text"><![CDATA[1003 Emergency传送门 英文描述:As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible. Input Specification:Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (≤500) - the number of cities (and the cities are numbered from 0 to N−1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c1​​ , c2 and L, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from C1 to C2. Output Specification:For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2 , and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line. Sample Input:5 6 0 21 2 1 5 30 1 10 2 20 3 11 2 12 4 13 4 1 Sample Output:2 4 中文题意给出N个城市，M条无向边。每个城市都有一定数目的救援小组，所有边的边权已知。现在给出起点C1和终点C2，求从起点C1到终点C2的最短路径条数及最短路径上的救援小组数目之和。如果有多条最短路径，则输出数目之和最大的。 思路：把样例输入来举例子吧5 6 0 2分别代表5座城市(对应N)6条道路(对应M)0表示对应的起点是第0号城市(因为城市的编号是从0到N-1)这里我把0到4的五个城市分别从A到E来表示比较方便那么如图所示ABCDE五座城市,起点为A终点为C红色的数字表示每座城市的救援人员人数绿色的数字表示城市与城市之间的道路距离所以我们要求的是在从A到C道路距离最小的情况下,沿途城市一起的救援人数越多越好 所以我们定义一个rescueWorkers和val_distance来存放最后的结果并且令rescueWorkers = INT_MIN,val_distance = INT_MAX方便后面比较结果 定义一个邻接矩阵road[maxn][maxn],其中如果road[i][j]为0表示i和j之间没有道路,如果不为0则表示i和j之间有道路,且值即为图中绿色颜色的数字所代表的距离 再定义一个visit[maxn]来判断城市是够走过定义一个mapcity来存放每个城市的救援人数,其中city[i]表示第i个城市的救援人数(map也可以用一个数组来代替,因为城市是从0到N-1的所以没有影响) 所以我的思路就是用dfs从起点开始来进行搜索,直到到达终点位置然后就继续回溯,直到全部搜索完于是有两种情况1.搜索到C2的时候,当前的distance比之前更新过的val_distance要小这个时候应该重新更新sum为1,因为这是只有一种最小的情况,并且更新val_distance2.搜索到C2的时候,当前的distance和之前更新过的val_distance相等,这时表示当前找到了另一条最短路径,则此时sum++,然后再判断people和rescueWorkers的大小,如果当前的people比rescueWorkers大则重新更新rescueWorkers 几点需要注意的地方:1.在输入邻接表的时候不仅要更新road[i][j],一定也要还更新road[j][i]！！！否则会造成错误2.dfs的思路就是从0开始进行遍历,所以用一个for循环从头开始进行遍历,当visit[i] == 0 &amp;&amp; road[nowVisit][i]不为0的时候进一步dfs3.dfs后一定要令visit[i] = 1,回溯的时候一定要令visit[i] = 04.dfs直接从最初的C1点开始搜索,dfs(C1,city[C1],0)表示从C1开始搜索,最初的人数为city[C1],距离为0开始 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;//P1003 Emergencyconst int maxn = 501;//邻接矩阵最大的数目int N,M,C1,C2,sum = 0;//N表示城市数量,M表示道路的条数,C1表示当前所在城市,C2表示要去的城市int rescueWorkers = INT_MIN;//rescueWorkers来存放最多的救援队人数int val_distance = INT_MAX;int road[maxn][maxn];int visit[maxn];//表示是否访问过map&lt;int,int&gt;city;//定义一个map来存放城市对应的救援队的数目void dfs(int nowVisit,int people,int distance)&#123; if(nowVisit == C2) &#123; if(distance &lt; val_distance) &#123; sum = 1; val_distance = distance; rescueWorkers = people; &#125; else if(distance == val_distance) &#123; sum++; rescueWorkers = max(rescueWorkers,people); &#125; return ; &#125; if(distance &gt; val_distance) return ;//如果现在的距离已经超过最短的距离直接返回 for(int i = 0;i &lt; N;i++) &#123; if(visit[i] == 0 &amp;&amp; road[nowVisit][i] != 0) &#123; visit[i] = 1; dfs(i,(people+city[i]),(distance+road[nowVisit][i])); visit[i] = 0; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;N&gt;&gt;M&gt;&gt;C1&gt;&gt;C2; for(int i = 0;i &lt; N;i++) &#123; int temp; cin&gt;&gt;temp; city[i] = temp; &#125; for(int j = 0;j &lt; M;j++) &#123; int a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; road[a][b] = c; road[b][a] = c; &#125; dfs(C1,city[C1],0); cout&lt;&lt;sum&lt;&lt;" "&lt;&lt;rescueWorkers; return 0;&#125;]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1449]]></title>
    <url>%2F2019%2F09%2F05%2FluoguOJ-P1449%2F</url>
    <content type="text"><![CDATA[P1449 后缀表达式传送门 题目描述所谓后缀表达式是指这样的一个表达式：式中不再引用括号，运算符号放在两个运算对象之后，所有计算按运算符号出现的顺序，严格地由左而右新进行（不用考虑运算符的优先级）。 如：3*(5–2)+7对应的后缀表达式为：3．5．2．-*7．+@。’@’为表达式的结束符号。‘.’为操作数的结束符号。 输入格式输入：后缀表达式 输出格式输出：表达式的值 输入输出样例输入 #13.5.2.-*7.+@ 输出 #116 说明/提示字符串长度，1000内。 思路：从左到右扫描后缀表达式 如果是操作数就压入栈 如果是操作符就连续弹出两个操作数(且后弹出的是第一操作数,先弹出的是第一操作数)然后再进行对应操作符的操作最后再把新生成的操作数压入栈里面,直到后缀表达式扫描完毕那么此时栈只剩下的一个数就是最终的答案 代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152stack&lt;int&gt; num;string str;int val = 0;int main()&#123; cin&gt;&gt;str; for(int i = 0;i &lt; str.size();i++) &#123; if(str[i] =='.') &#123; num.push(val); val = 0; continue; &#125; else if(str[i] &lt;= '9' &amp;&amp; str[i] &gt;='0') &#123; val *= 10; val += str[i] - '0' + 0; &#125; else if(str[i] != '@') &#123; int temp1,temp2,temp; temp2 = num.top(); num.pop(); temp1 = num.top(); num.pop(); if(str[i] == '+') &#123; temp = temp1 + temp2; &#125; else if(str[i] == '-') &#123; temp = temp1 - temp2; &#125; else if(str[i] == '*') &#123; temp = temp1 * temp2; &#125; else if(str[i] == '/') &#123; temp = temp1 / temp2; &#125; num.push(temp); &#125; else if(str[i] == '@') &#123; cout&lt;&lt;num.top(); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1433]]></title>
    <url>%2F2019%2F09%2F03%2FluoguOJ-P1433%2F</url>
    <content type="text"><![CDATA[P1433 吃奶酪传送门 题目描述房间里放着n块奶酪。一只小老鼠要把它们都吃掉，问至少要跑多少距离？老鼠一开始在(0,0)点处。 输入格式第一行一个数n (n&lt;=15) 接下来每行2个实数，表示第i块奶酪的坐标。 两点之间的距离公式=sqrt((x1-x2)(x1-x2)+(y1-y2)(y1-y2)) 输出格式一个数，表示要跑的最少距离，保留2位小数。 输入输出样例输入 #141 11 -1-1 1-1 -1 输出 #17.41 思路：double一个sum来统计每次dfs到底的时候比较最短距离，如果s比sum要小就更新sum 我觉得这里面最重要的就是用visit[maxn]数组来判断是否走过因为每次用now在dfs里面表示当前第几个点 因为要走过所有的点，所以从哪个点开始进行dfs是无所谓的，所以默认dfs(0,0,0.0)开始没问题 然后double Distance[maxn][maxn]来存放点与点之间的距离 Distance[i][j]表示第i个点和第j个点之间的距离 然后再dfs(i+1,j,s+Distance[now][j]) 这个的意思就是现在位于now点,然后再准备走向下一个点,也就是走向j对应的点 然后就先令visit[j] = 1表示j这个点即将要走到了 那么s就加上一个Distance[now][j],此时继续dfs 那么此时的now就等于j点,如果一直dfs,一直递归到条件不成立,那么就回溯,令visit[j] = 0 因为每一层dfs里面的for循环都是从1一直到n的,所以怎么无论dfs多少次都是会从1开始遍历 如果经过了就不考虑,如果没经过就继续dfs,直至每层dfs为止然后再更新最小的sum值 又因为输出的格式要求要保留两位小数,所以最后就printf(“%0.2f”,sum)得到最后的结果 代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 16;int n;double sum = 10000.0;//sum来存放跑动的最少距离double Distance[maxn][maxn];//存放点与点之间的距离double x[maxn],y[maxn];//存放每个点的坐标int visit[maxn];void dfs(int i,int now,double s)//i表示已经走了几个点，now表示当前第几个点，s表示距离&#123; if(s &gt;= sum)//如果发现s已经大于当前最小的sum则直接返回 &#123; return ; &#125; if(i == n)//全部走完的时候 &#123; sum = min(sum,s); return ; &#125; for(int j = 1;j &lt;= n;j++) &#123; if(!visit[j]) &#123; visit[j] = 1;//把即将要走过的这个点设置为走过 dfs(i+1,j,s+Distance[now][j]); visit[j] = 0;//回溯 &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) &#123; cin&gt;&gt;x[i]&gt;&gt;y[i]; &#125; for(int i = 0;i &lt;= n;i++) &#123; for(int j = 0;j &lt;= n;j++) &#123; Distance[i][j] = sqrt((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j])); &#125; &#125; dfs(0,0,0.0); printf("%0.2f",sum); return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1403]]></title>
    <url>%2F2019%2F09%2F02%2FluoguOJ-P1403%2F</url>
    <content type="text"><![CDATA[P1403 [AHOI2005]约数研究传送门 题目描述：科学家们在Samuel星球上的探险得到了丰富的能源储备，这使得空间站中大型计算机“Samuel II”的长时间运算成为了可能。由于在去年一年的辛苦工作取得了不错的成绩，小联被允许用“Samuel II”进行数学研究。 小联最近在研究和约数有关的问题，他统计每个正数N的约数的个数，并以f(N)来表示。例如12的约数有1、2、3、4、6、12。因此f(12)=6。下表给出了一些f(N)的取值： f(n)表示n的约数个数，现在给出n，要求求出f(1)到f(n)的总和。 输入格式:输入一行，一个整数n 输出格式:输出一个整数，表示总和 输入输出样例输入 #13输出 #15 说明/提示【数据范围】 20%N&lt;=5000 100%N&lt;=1000000 思路： (数学方法)f(1)到f(n)的和，即为1到n之间因子的和那么1到n之间1的因子总共有n/1个2的因子总共有n/2个3的因子总共有n/3个…依此类推那么1到n之间因子的和即为f(i) = n / i;i从1到n的总和 代码如下：123456789101112int n;int result;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) &#123; result += n / i; &#125; cout&lt;&lt;result; return 0;&#125; (非数学方法)(用筛法) 定义一个数组num[maxn]，result = 0；从1到n,int i = 1,然后每隔1就累加一次num[i]++,表示从1到n每个数都拥有的1的个数,然后再从1到n,s加一次ai然后i++递增,同理,i = 2,每隔2就累加一次num[i]++,然后依次类推表示从2到n里面每个数如果含有2就会++一次,然后结束循环之后,s再加一次a[i]依此类推 代码如下：123456789101112int n,a[10000001],s;int main()&#123;cin&gt;&gt;n;for (int i=1;i&lt;=n;i++)&#123; for (int j=i;j&lt;=n;j+=i)a[j]++; s+=a[i]; &#125;cout&lt;&lt;s;return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1118]]></title>
    <url>%2F2019%2F08%2F31%2FluoguOJ-P1118%2F</url>
    <content type="text"><![CDATA[P1118 [USACO06FEB]数字三角形传送门 题目描述有这么一个游戏： 写出一个1至N的排列ai，然后每次将相邻两个数相加，构成新的序列，再对新序列进行这样的操作，显然每次构成的序列都比上一次的序列长度少1，直到只剩下一个数字位置。下面是一个例子： 3,1,2,4 4,3,6 7,9 16 最后得到16这样一个数字。 现在想要倒着玩这样一个游戏，如果知道N，知道最后得到的数字的大小sum，请你求出最初序列ai，为1至N的一个排列。若答案有多种可能，则输出字典序最小的那一个。1234567891011121314输入输出样例输入：4 16输出：3 1 2 4说明/提示对于40%的数据，n≤7；对于80%的数据，n≤10；对于100%的数据，n≤12,sum≤12345。 思路：假设n = 5,那么a b c d e依次对应a b c d e a+b b+c c+d d+e a+2b+c b+2c+d c+2d+e a+3b+3c+d b+3c+3d+e a+4b+6c+4d+e此时1到5对应的权值即为位数 1 2 3 4 5权值 1 4 6 4 1 假设n = 8,那么a b c d e f g h依次对应a b c d e f g h a+b b+c c+d d+e e+f f+g g+h a+2b+c b+2c+d c+2d+e d+2e+f e+2f+g f+2g+h a+3b+3c+d b+3c+3d+e c+3d+3e+f d+3e+3f+g e+3f+3g+h a+4b+6c+4d+e b+4c+6d+4e+f c+4d+6e+4f+g d+4e+6f+4g+h a+5b+10c+10d+5e+f b+5c+10d+10e+5f+g c+5d+10e+10f+5g+h a+6b+15c+20d+15e+6f+g b+6c+15d+20e+15f+6g+h a+7b+21c+35d+35e+21f+7g+h 此时1到8对应的权值为位数 1 2 3 4 5 6 7 8权值 1 7 21 35 35 21 7 1 所以这其实就是一个杨辉三角的一个模型那么构建一个杨辉三角的代码如下所示1234c[1][1]=1;//最左上角的数初始化为1for(int i=2;i&lt;=n;i++)//由于这里数组的记录是从1开始记的，所以不用担心越界 for(int j=1;j&lt;=i;j++) c[i][j]=c[i-1][j]+c[i-1][j-1];//每个数都等于它肩上两数之和或者直接套用杨辉三角的通用公式来直接解出来,和上式一样C(n-1,m-1)=(n-1)!/[(m-1)!(n-m)!](其中!表示阶乘，n！=n(n-1)…21) 那么当n为几,sum的和就是n个数乘以杨辉三角第n行分别对应系数得到的结果 然后直接从1开始进行dfs,因为是从1开始储存的,所以得到的结果肯定也是字典序最小的 完整代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;//万能头文件using namespace std;int n,p;//输入必备int a[13];//输出必备int c[13][13];//杨辉三角必备bool b[13];//判重必备void dfs(int dep,int s)&#123; if(s&gt;p)//如果现在累加的数已经超过了给定的数，就返回 return; if(dep&gt;n)//如果已经搜完了n个数，就返回 &#123; if(s==p)//如果答案跟给定的数相等 &#123; cout&lt;&lt;a[1]; for(int i=2;i&lt;=n;i++) cout&lt;&lt;" "&lt;&lt;a[i];//输出 exit(0);//终止程序 &#125; return;//如果没有输出答案，就返回 &#125; for(int i=1;i&lt;=n;i++) &#123; if(b[i]==false)//如果当前这个数没有用过 &#123; b[i]=true;//标记成用过 a[dep]=i;//保存第dep个取的数 dfs(dep+1,s+i*c[n][dep]); b[i]=false;//注意这里要将状态回归，不然TLE &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;p;//输入 c[1][1]=1; for(int i=2;i&lt;=n;i++) for(int j=1;j&lt;=i;j++) c[i][j]=c[i-1][j]+c[i-1][j-1];//生成杨辉三角 dfs(1,0);//开启深搜之旅 return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190823]]></title>
    <url>%2F2019%2F08%2F23%2F20190823%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190816]]></title>
    <url>%2F2019%2F08%2F16%2F20190816%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190810]]></title>
    <url>%2F2019%2F08%2F10%2F20190810%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190727]]></title>
    <url>%2F2019%2F07%2F27%2F20190727%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190724]]></title>
    <url>%2F2019%2F07%2F24%2F20190724%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1168]]></title>
    <url>%2F2019%2F07%2F10%2FluoguOJ-P1168%2F</url>
    <content type="text"><![CDATA[P1168 中位数传送门 这题主要的思路 1.因为这题的数据很大,常规思路就是我每隔两个就sort一下,然后再找出中位数 显然这样做重复的次数会很多,一定会TLE,所以需要转换思路* 2.所以应该从输入的时候一开始就进行插入操作,输入1个插入1个,然后以插入的方式直接有序的插入进去 然后插入3个之后则第2个即是前三个的中位数,然后依次类推。* 3.然后考虑插入操作应该怎么插入,很容易就能想到用二分查找的方式查找到X附近的位置然后进行插入 因为是进行的插入操作所以应该用upper_bound()(或者lower_bound())进行二分查找,然后再进行插入* 自己遇到的坑: 我以为要输入完之后再全部进行输出,但是其实可以一边输入一边进行插入操作 从而降低了时间复杂度。 代码如下：12345678910111213141516171819202122#include &lt;bits/stdc++.h&gt;using namespace std;//P1168 中位数int N;//N表示整个序列的长度vector&lt;int&gt; val;//定义一个数来存放int main()&#123; cin&gt;&gt;N; for(int i = 1,x;i &lt;= N;i++)//直接用一个变量x就可以代替数组 &#123; cin&gt;&gt;x; //val.insert(val.begin()+(upper_bound(val.begin(),val.end(),x)- val.begin()),x); val.insert(lower_bound(val.begin(),val.end(),x),x);//上式等价的写法,val.begin()被抵消了 if(i % 2 == 1) cout&lt;&lt;val[(i-1)/2]&lt;&lt;endl;//因为存入vector中下标是从0开始的,所以要用i-1,(i-1)/2即是排序好的奇数个数中的中位数 &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1325]]></title>
    <url>%2F2019%2F07%2F09%2FluoguOJ-P1325%2F</url>
    <content type="text"><![CDATA[P1325 雷达安装传送门 题目描述1234567描述：假设海岸线是一条无限延伸的直线。它的一侧是陆地，另一侧是海洋。每一座小岛是在海面上的一个点。雷达必须安装在陆地上（包括海岸线），并且每个雷达都有相同的扫描范围d。你的任务是建立尽量少的雷达站，使所有小岛都在扫描范围之内。数据使用笛卡尔坐标系，定义海岸线为x轴。在x轴上方为海洋，下方为陆地。样例1如图所示 ！样例12345678输入输出格式输入格式：第一行包括2个整数n和d，n是岛屿数目，d是雷达扫描范围。接下来n行为岛屿坐标。输出格式：一个整数表示最少需要的雷达数目，若不可能覆盖所有岛屿，输出“-1”。 12345678输入输出样例输入样例#1： 3 21 2-3 12 1输出样例#1： 2 这题我的思路过程 这题遇到的坑 1.雷达的范围,以及坐标值最好都要用double来确定精度,否则int和double混用来进行计算的时候往往会出现问题* 2.这题的思路刚开始有问题,刚开始我是把所有岛屿的横坐标作参照进行排序,但其实这样会漏掉很多种情况,虽然也是基于贪心的思想, 但是这样子会把横坐标小但是纵坐标很高的情况排到左边,于是就会产生误差* 正确的思路应该是:因为已经知道每个岛屿的坐标和雷达的范围,所以以每个岛屿为圆心以雷达的半径作圆交于X轴都能够得到两个坐标 此时这两个坐标即是雷达所在位置的两个极值,此时按一般的思路从左往右从小到大进行排序, 把所有确定雷达的右坐标从小到大进行排序,首先确定第一个雷达的位置为确定第一个岛屿的右坐标,num++, 然后以这个右坐标为基准,因为贪心的思想,我在两个极值(a,b)之间虽然我放在a或者ab之间的某点都能够覆盖这个岛屿, 但是我如果把这个雷达放在最右边的b点的时候能够覆盖更多的岛屿,所以我放在最右边的b点, 判断这个b点是否大于第二个点最左边的a点,如果可以的话说明这个雷达能够覆盖第二个点,说明就不需要再新加雷达了 然后依次类推,如果这第一个的b点小于某一个点最左边的a点,说明覆盖不到,所以需要新加雷达站,num++ 所以再以这个点的b点为基准来进行判断,然后依次类推,就可以算出雷达站最少的数目了。‘* 3.第三个坑就是雷达站怎么也覆盖不到的情况,即岛屿的纵坐标y恒大于雷达的范围d,那么不管怎么样 都覆盖不到该岛屿,即返回-1 代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;using namespace std;//P1325 雷达安装const int maxn = 1010;int num = 0;//存放雷达数int N;//N表示岛屿的数目double d;//d表示雷达的范围struct Node&#123; double x,y;//x,y分别代表岛屿的横坐标和纵坐标&#125;;Node radar[maxn];//定义一个结构体数组来存放岛屿的横纵坐标Node coordinate[maxn];//定义一个结构体数组来存放确定半径之后每个岛屿左右雷达的坐标值double cmp(Node a,Node b)//待会sort的时候以每个岛屿确定的最右边的雷达坐标来从小到大进行排序&#123; return a.y &lt; b.y;&#125;double rightradar(Node a)//已经确定最右边的岛屿,算最右边雷达的X坐标&#123; return a.x + pow((d*d-a.y*a.y),0.5);&#125;double leftradar(Node a)//已经确定最右边的岛屿,算最左边雷达的X坐标&#123; return a.x - pow((d*d-a.y*a.y),0.5);&#125;bool val(Node x)//判断岛屿是否超出了雷达站的范围&#123; if(x.y &gt; d) &#123; return false; &#125; return true;&#125;int main()&#123; //输入数据 cin&gt;&gt;N&gt;&gt;d; for(int i = 0;i &lt; N;i++) &#123; cin&gt;&gt;radar[i].x&gt;&gt;radar[i].y; &#125; for(int i = 0;i &lt; N;i++) &#123; if(!val(radar[i])) &#123; cout&lt;&lt;-1; return 0; &#125; &#125; for(int i = 0;i &lt; N;i++)//计算每个岛屿的左右雷达坐标的极值,并存放到结构体数组中 &#123; coordinate[i].x = leftradar(radar[i]); coordinate[i].y = rightradar(radar[i]); &#125; sort(coordinate,coordinate+N,cmp);//以每个雷达站的右坐标为标准从左往右进行排序 double temp = coordinate[0].y;//先计算第一个雷达站 num = 1; for(int i = 1;i &lt; N;i++)//然后根据第一个雷达站的坐标为基础来进行进一步的计算 &#123; if(temp &gt;= coordinate[i].x) &#123; continue; &#125; else &#123; temp = coordinate[i].y; num++; &#125; &#125; cout&lt;&lt;num;//输出结果 return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1182]]></title>
    <url>%2F2019%2F07%2F09%2FluoguOJ-P1182%2F</url>
    <content type="text"><![CDATA[P1182 数列分段`Section II`传送门 题目 输入输出 分析这题是要求最小段的最大值，很明显是要用二分思想。 又因为这题求的是数列分段，那么我们可以使用贪心的策略去求每一个值分成k段 如果k小于等于m，说明我们每一个区间对应的最大值还可以减小，否则，每一个区间对应的最大值应该增加 那么问题来了，我应该怎么进行二分？ 我们应该把每个区间的最大值进行二分 把二分的左边界设置成为区间里面的最小的那个值，把二分的右边界设置成为数组中所有值的和 然后如果以mid的值来分割数组的话，如果能分的组数小于等于m，说明区间的最大值太大了，应该减小令L = mid 否则能分的组数大于m，说明这个时候区间的最大值太小了，使得分的组数超过了m，这个时候应该减小区间的最大值令R = mid 注意点为什么要设置二分的左边界为数组中值的最大的那个点？ 因为如果直接把L设置成从0开始 n=5,m=5,Ai={5,5,5,5,5} 那么如果把0作为区间的最大值来判断，因为我们是用贪心的思想去求解的 区间最大值为0的情况应该不存在，但是我们用贪心的judge判断会继续分成5组，但事实上，不存在分法，因为没有一个区间的最大值能够小于等于0，这样就不符合题意了 同理右端点也是，不能设置成很大的数，而是要设置成数组的所有和才行 代码如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;//P1182 数列分段 Section IItypedef long long LL;const int N = 1e5+10;int n,m;LL a[N];bool judge(LL mid,LL *a)&#123; int sum = 0,ans = 0; for(int i = 1;i &lt;= n;i++) &#123; if(sum + a[i] &gt; mid) &#123; sum = 0; ans++; &#125; sum += a[i]; &#125; if(sum != 0) ans++; if(ans &lt;= m) return true; else return false;&#125;int main()&#123; scanf("%d %d",&amp;n,&amp;m); LL l = 0,r = 0; for(int i = 1;i &lt;= n;i++) &#123; scanf("%d",&amp;a[i]); r += a[i]; l = max(a[i],l); &#125; while(l &lt; r) &#123; LL mid = l + r &gt;&gt; 1; if(judge(mid,a)) r = mid; else l = mid + 1; &#125; printf("%lld",l); return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190706]]></title>
    <url>%2F2019%2F07%2F06%2F20190706%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190616]]></title>
    <url>%2F2019%2F06%2F16%2F20190616%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-033]]></title>
    <url>%2F2019%2F06%2F09%2FLeetcode-033%2F</url>
    <content type="text"><![CDATA[33. 搜索旋转排序数组题目描述传送门123456789101112131415161718假设按照升序排序的数组在预先未知的某个点上进行了旋转。( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。你可以假设数组中不存在重复的元素。你的算法时间复杂度必须是 O(log n) 级别。示例 1:输入: nums = [4,5,6,7,0,1,2], target = 0输出: 4示例 2:输入: nums = [4,5,6,7,0,1,2], target = 3输出: -1 思路:数组在某个点进行了旋转，那么原来的数组就不是有序的了，所以我们需要遍历数组来找到那个分界点那么问题来了，怎么才能找到那个分界点呢？ 因为题目要求算法的时间复杂度为 O(log n) 级别,所以我们就不能遍历数组来找到那个分界点 而是应该用二分查找的方式来找到那个分界点才能满足时间复杂度的要求 那么怎么用二分查找来获取那个分界点呢？ 答案就是比较low,mid,high三个点的值的大小比较,如果mid &gt; low,说明low到mid之间是有序的所以令low = mid + 1,否则low到mid之间是无序的，令high = mid 最终知道low == high的时候就找到了分界点，然后再比较分界点之间与target的大小然后再分别到两个区间进行二分查找，可以满足要求 代码如下:1234567891011121314151617181920212223242526class Solution &#123; public int search(int[] nums, int target) &#123; if (nums == null || nums.length == 0) return -1; int left = 0; int right = nums.length - 1; while (left &lt; right) &#123; int mid = left + (right - left) / 2; if (nums[mid] &gt; nums[right]) left = mid + 1; else right = mid; &#125; //System.out.println(left); int split_t = left; left = 0; right = nums.length - 1; if (nums[split_t] &lt;= target &amp;&amp; target &lt;= nums[right]) left = split_t; else right = split_t; while (left &lt;= right) &#123; int mid = left + (right - left) / 2; if (nums[mid] == target) return mid; else if (nums[mid] &gt; target) right = mid - 1; else left = mid + 1; &#125; return -1; &#125;&#125;]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190528]]></title>
    <url>%2F2019%2F05%2F28%2F20190528%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1141]]></title>
    <url>%2F2019%2F05%2F24%2FluoguOJ-P1141-dfs%2F</url>
    <content type="text"><![CDATA[P1141 01迷宫传送门题目描述有一个仅由数字0与1组成的n×n格迷宫。若你位于一格0上，那么你可以移动到相邻4格中的某一格1上，同样若你位于一格1上，那么你可以移动到相邻4格中的某一格0上。 你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。 输入输出格式输入格式：第1行为两个正整数n,m。 下面n行，每行n个字符，字符只可能是0或者1，字符之间没有空格。 接下来mm行，每行22个用空格分隔的正整数i,j对应了迷宫中第i行第j列的一个格子，询问从这一格开始能移动到多少格。 输出格式：m行，对于每个询问输出相应答案。 输入输出样例：1234567891011121314151617181920212223242526272829303132输入样例#1： 2 201101 12 2输出样例#1： 44--------------------------------------------------输入样例#2： 8 410010011011001001001001101011011100010000001101100101000000000101 28 66 24 3输出样例#2： 2519125 思路：定义一个数组val来存放迷宫，定义一个数组cmp来判断是否走过1.这道题一眼看上去就是一个深搜，把01用二维数组存下下来，搜索每一个格子然后判断合理情况，如果遇到不相同的格子就记录然后每遇到一个点就重新memset一下cmp重新开始噼里啪啦一顿dfs交上去，TLE了三个点只有70分 2.这样做问题出在哪里呢？我把测试数据看了一下，发现很恶心，n和m分别取到了1000和100000，那显然，memset是很耗时间的于是我想到把cmp数组的标记改为layer，代表所搜索的格子所在的不同联通块。这样，每一次去数新一个格子所能联通的块数就只要更新layer，节省了很大一块时间(这样就不用每次memset一次cmp数组我觉得这样的做法很巧妙)成功过掉了第二个点也就是n=1000, m=10000的点 3.但是还有两个点TLE，说明还要需要改进的地方需要我去思考苦苦思索，是与否有其他优化方法，果然，有一条很明显的但是一早就被我忽略了： 同一个联通块所在的格子，能到达的格子数都是相同的。这样一看，怎么记忆化就已经很明显了，我们已经用cmp数组标记过了当前搜索的格子所在的联通块，用layer表示，那么我们只要再开一个record数组，将已经遍历过的联通块对应的格子数记录下来，那么搜索到相应联通块里的其它格子时，就不用再搜索了，这是一步很大的优化，最终我提交了修改过的代码，100分ac 自己遇到的坑：第一个坑: OJ上要求的是直接输入一串数而不是一个数字一个数字输入的我觉得这个挺坑的，我就懒得换了，直接char一个数组去接受，然后再int一个全局数组去修改对应的值，这样做其实挺傻的，还有可以改进的地方~(但是我懒啊)~第二个坑: OJ要求的输出是输入数据之后全部输出，所以就还要再定义一个sum数组去存放数据，最后再全部输出。 代码如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1010;const int maxm = 100010;int num = 0;int layer = 1;int record[maxm];char sum[maxn][maxn];int val[maxn][maxn];//定义一个二维数组才存放n*n的迷宫int cmp[maxn][maxn];int n,m;//n表示n*n迷宫,m表示询问的点的个数//方向数组int dx[4] = &#123;1,0,-1,0&#125;;int dy[4] = &#123;0,-1,0,1&#125;;void dfs(int x,int y)&#123; cmp[x][y] = layer; record[layer] = ++num; for(int i = 0;i &lt; 4;i++) &#123; int a = x + dx[i],b = y + dy[i]; if(val[a][b]==val[x][y]) continue; if(cmp[a][b] == layer) continue; if(a &gt; 0&amp;&amp;a &lt;= n&amp;&amp;b &gt;0&amp;&amp;b &lt;= n) &#123; cmp[a][b] = layer; dfs(a,b); &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; cin&gt;&gt;sum[i][j]; &#125; &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; (sum[i][j] == '1')&amp;&amp;(val[i][j] = 1); &#125; &#125; int sum[maxm]; for(int i = 0;i &lt; m;i++) &#123; num = 0; int temp1,temp2; scanf("%d %d",&amp;temp1,&amp;temp2); if(record[cmp[temp1][temp2]] == 0)&#123;//如果record里面temp1和temp2对应的cmp的值为0的话就进行dfs，并记录到record中 dfs(temp1,temp2); sum[i] = record[cmp[temp1][temp2]]; &#125; else//遇到相同的联通块直接输出对应的record &#123; sum[i] = record[cmp[temp1][temp2]]; &#125; layer++; &#125; for(int i = 0;i &lt; m;i++) &#123; cout&lt;&lt;sum[i]&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-022]]></title>
    <url>%2F2019%2F05%2F24%2FLeetcode-022%2F</url>
    <content type="text"><![CDATA[22.括号生成难度:medium123456789101112题目描述给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。例如，给出 n = 3，生成结果为：[ "((()))", "(()())", "(())()", "()(())", "()()()"] 思路：应用递归的思路来解决这道题只有当左括号大于右括号的时候才进行递归但其实递归的实质就是栈的实现 代码如下:123456789101112131415161718192021class Solution &#123;public:void val_generateParenthesis(int left,int right,string str,int n,vector&lt;string&gt;&amp; val)&#123; if(left &gt; n || right &gt; n) return ; if(left == n &amp;&amp; right == n) val.push_back(str); if(left &gt;= right)//只有左括号的数目大于右括号再进行递归 &#123; val_generateParenthesis(left+1,right,str+'(',n,val); val_generateParenthesis(left,right+1,str+')',n,val); &#125;&#125; vector&lt;string&gt; generateParenthesis(int n) &#123; vector&lt;string&gt; val; val_generateParenthesis(0,0,"",n,val); return val; &#125;]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190523]]></title>
    <url>%2F2019%2F05%2F23%2F20190523%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1443]]></title>
    <url>%2F2019%2F05%2F23%2FluoguOJ-P1443-bfs%2F</url>
    <content type="text"><![CDATA[P1443 马的遍历题目描述有一个n*m的棋盘(1&lt; n,m &lt;=400)，在某个点上有一个马,要求你计算出马到达棋盘上任意一个点最少要走几步 输入输出格式输入格式：一行四个数据，棋盘的大小和马的坐标 输出格式：一个n*m的矩阵，代表马到达某个点最少要走几步（左对齐，宽5格，不能到达则输出-1） 1234567891011121314151617181920#输入输出样例输入样例#1： 3 3 1 1输出样例#1： 0 3 2 3 -1 1 2 1 4输入样例#2：6 9 1 1输出样例#2：0 3 2 3 2 3 4 5 4 3 4 1 2 3 4 3 4 5 2 1 4 3 2 3 4 5 4 3 2 3 2 3 4 3 4 5 2 3 2 3 4 3 4 5 4 3 4 3 4 3 4 5 4 5 思考:这题就是一道很典型的bfs的题目根据题目给的首节点，来存入队列里面定义方向数组来模拟马走的八个方向然后把首节点存入队列，然后取出首节点，依次遍历八个方向，然后如果可以就Map2 = Map1 +1这样的话根据这个递推公式可以推出所有可以走的点最后还记得定义一个path数组来判断是否走过就行了 这道题目里面的坑:题目要左对齐宽五格所以要printf(“%-5d”,Map[i][j]) 代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;//P1443 马的遍历int n,m;//定义const int maxn = 410;//定义方向数组来定义马走的八个方向int dx[8] = &#123;1,2,2,1,-2,-1,-2,-1&#125;;int dy[8] = &#123;2,1,-1,-2,1,2,-1,-2&#125;;int Map[maxn][maxn];//定义一个数组记录棋盘上的int path[maxn][maxn];//定义一个路径来判断是否走过当前路径struct Node&#123;//定义一个结构体才存放棋盘坐标的值 int x,y;&#125;;queue&lt;Node&gt; val;//定义一个来存放结点void bfs(Node s)//传入结点&#123; val.push(s); Map[s.x][s.y] = 0;//定义开始为0，其余的结点都是依照这个点而来的 path[s.x][s.y] = 1;//记录路径为走过 while(!val.empty())//如果队列里面不为空则继续循环 &#123; Node temp = val.front(); val.pop(); for(int i = 0;i &lt; 8;i++)//八个方向来进行探测 &#123; Node cmp;//定义一个中间变量来存放数据 cmp.x = temp.x + dx[i]; cmp.y = temp.y + dy[i]; if(path[cmp.x][cmp.y] != 0||cmp.x&lt;1||cmp.x&gt;n||cmp.y&lt;1||cmp.y&gt;m) continue; path[cmp.x][cmp.y] = 1;//记录为走过 Map[cmp.x][cmp.y] = Map[temp.x][temp.y] + 1; val.push(cmp); &#125; &#125;&#125;int main()&#123; memset(Map,-1,sizeof(Map));//定义Map上所有结点为-1，如果这个值不会改变则说明这个点根本走不到 Node s; cin&gt;&gt;n&gt;&gt;m&gt;&gt;s.x&gt;&gt;s.y; bfs(s); for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= m;j++) &#123; printf("%-5d",Map[i][j]); &#125; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[luoguOJ-P1162]]></title>
    <url>%2F2019%2F05%2F20%2FluoguOJ-P1162-dfs%2F</url>
    <content type="text"><![CDATA[P1162 填涂颜色123456789101112131415题目描述由数字0组成的方阵中，有一任意形状闭合圈，闭合圈由数字11构成，围圈时只走上下左右44个方向。现要求把闭合圈内的所有空间都填写成22.例如：6×6的方阵（n=6），涂色前和涂色后的方阵如下：0 0 0 0 0 00 0 1 1 1 10 1 1 0 0 11 1 0 0 0 11 0 0 0 0 11 1 1 1 1 1-----------0 0 0 0 0 00 0 1 1 1 10 1 1 2 2 11 1 2 2 2 11 2 2 2 2 11 1 1 1 1 1 输入输出格式输入格式：每组测试数据第一行一个整数n(1&lt;=n&lt;=30)接下来n行，由0和1组成的n×n的方阵。 方阵内只有一个闭合圈，圈内至少有一个0。 输出格式：已经填好数字2的完整方阵。 输入输出样例12345678910111213141516输入样例#1： 60 0 0 0 0 00 0 1 1 1 10 1 1 0 0 11 1 0 0 0 11 0 0 0 0 11 1 1 1 1 1输出样例#1： 0 0 0 0 0 00 0 1 1 1 10 1 1 2 2 11 1 2 2 2 11 2 2 2 2 11 1 1 1 1 1 说明: 1&lt;=n&lt;=30 思路:定义一个a数组来接受方阵，然后定义一个b数组，在a数组的外围套一层边界，也就是套一层0，这样做的目的是为了让dfs边界的时候能够把闭合圈以外的部分都能够标记(也就是染色) 然后定义方向数组，从(0,0)开始往四个方向依次寻找两个边界中间的部分然后标记，然后b数组对应没染色的地方就是a数组方阵闭合圈里面要找的 代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 40;//定义最大的边界int a[maxn][maxn];//用来接收方阵的数组int b[maxn][maxn];//把方阵外面套一层边界,便于dfs寻找边界int N;//N表示N * N的方阵//方向数组,依次为右下左上int dx[4] = &#123;1,0,-1,0&#125;;int dy[4] = &#123;0,-1,0,1&#125;;void dfs(int x,int y)&#123; //当dfs寻找值碰到外边界和内边界时返回上一层 if(x &lt; 0|| x &gt; N+1||y &lt; 0||y &gt; N+1||b[x][y] != 0) &#123; return ; &#125; //如果没碰到边界,继续搜索,令两个边界中间的值为2,并沿着四个方向继续搜索 else &#123; b[x][y] = 1; for(int i = 0;i &lt; 4;i++) &#123; dfs((x + dx[i]),(y + dy[i])); &#125; &#125;&#125;int main()&#123; cin&gt;&gt;N; //输入方阵 for(int i = 1;i &lt;= N;i++) &#123; for(int j = 1;j &lt;=N;j++) &#123; cin&gt;&gt;a[i][j]; &#125; &#125; for(int i = 1;i &lt;= N;i++) &#123; for(int j = 1;j &lt;=N;j++) &#123; if(a[i][j] == 1) b[i][j] = 2; &#125; &#125; dfs(0,0);//对加过边界的b数组进行搜索 for(int i = 1;i &lt;= N;i++) &#123; for(int j = 1;j &lt;=N;j++) &#123; if(b[i][j] == 0) &#123; a[i][j] = 2; &#125; cout&lt;&lt;a[i][j]&lt;&lt;" "; &#125; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-019]]></title>
    <url>%2F2019%2F05%2F15%2FLeetcode-019%2F</url>
    <content type="text"><![CDATA[19. 删除链表的倒数第N个节点难度：medium1234567891011题目描述给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。示例：给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.说明：给定的 n 保证是有效的。 我自己的思路:(两次遍历链表的想法)先定义一个num遍历链表记录结点的总数，然后定义一个cmp = 0，当再次遍历到num - n -1时就表明这个时候的结点是在要删除结点的前一个结点，然后再进行删除操作 这题遇到的坑：不知道leetcode到底有没有头结点，结果最后发现没有头结点，head对应的就是第一个结点，最后定义了一个newhead做头结点来进行操作，如果 1234567891011121314151617181920212223242526272829303132333435/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* removeNthFromEnd(ListNode* head, int n) &#123; ListNode* newhead = new ListNode(0); newhead-&gt;next = head; int num = 0,cmp = 0; ListNode *temp1,*temp2; temp1 = newhead; temp2 = newhead; while(temp1 != NULL)//统计链表的结点数 &#123; temp1 = temp1-&gt;next; num++; &#125; while(cmp != num - n -1 )//定位到要删除结点的前一个结点 &#123; temp2 = temp2-&gt;next; cmp++; &#125; ListNode * flag = new ListNode(0); flag = temp2-&gt;next; temp2-&gt;next = flag-&gt;next; return newhead-&gt;next; &#125;&#125;; 官方的题解思路： 方法一：两次遍历算法思路我们注意到这个问题可以容易地简化成另一个问题：删除从列表开头数起的第 (L - n + 1)(L−n+1) 个结点，其中 LL 是列表的长度。只要我们找到列表的长度 LL，这个问题就很容易解决。 算法首先我们将添加一个哑结点作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部。在第一次遍历中，我们找出列表的长度 LL。然后设置一个指向哑结点的指针，并移动它遍历列表，直至它到达第 (L - n)(L−n) 个结点那里。我们把第 (L - n)(L−n) 个结点的 next 指针重新链接至第 (L - n + 2)(L−n+2) 个结点，完成这个算法。 Java代码如下:123456789101112131415161718public ListNode removeNthFromEnd(ListNode head, int n) &#123; ListNode dummy = new ListNode(0); dummy.next = head; int length = 0; ListNode first = head; while (first != null) &#123; length++; first = first.next; &#125; length -= n; first = dummy; while (length &gt; 0) &#123; length--; first = first.next; &#125; first.next = first.next.next; return dummy.next;&#125; 复杂度分析时间复杂度：O(L)，该算法对列表进行了两次遍历，首先计算了列表的长度 LL 其次找到第 (L - n)个结点。 操作执行了 2L-n 步，时间复杂度为 O(L)。 空间复杂度：O(1)，我们只用了常量级的额外空间。 方法二：一次遍历算法算法上述算法可以优化为只使用一次遍历。我们可以使用两个指针而不是一个指针。第一个指针从列表的开头向前移动 n+1n+1 步，而第二个指针将从列表的开头出发。现在，这两个指针被 nn 个结点分开。我们通过同时移动两个指针向前来保持这个恒定的间隔，直到第一个指针到达最后一个结点。此时第二个指针将指向从最后一个结点数起的第 nn 个结点。我们重新链接第二个指针所引用的结点的 next 指针指向该结点的下下个结点。 Java代码如下:1234567891011121314151617public ListNode removeNthFromEnd(ListNode head, int n) &#123; ListNode dummy = new ListNode(0); dummy.next = head; ListNode first = dummy; ListNode second = dummy; // Advances first pointer so that the gap between first and second is n nodes apart for (int i = 1; i &lt;= n + 1; i++) &#123; first = first.next; &#125; // Move first to the end, maintaining the gap while (first != null) &#123; first = first.next; second = second.next; &#125; second.next = second.next.next; return dummy.next;&#125; 复杂度分析时间复杂度：O(L)，该算法对含有 L个结点的列表进行了一次遍历。因此时间复杂度为 O(L)。 空间复杂度：O(1)，我们只用了常量级的额外空间。]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-018]]></title>
    <url>%2F2019%2F05%2F14%2FLeetcode-018%2F</url>
    <content type="text"><![CDATA[18.四数之和难度: medium1234567891011121314151617题目描述:给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。注意：答案中不可以包含重复的四元组。示例：给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。满足要求的四元组集合为：[ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] 思路:回顾一下三数之和的思路:三数之和的主要思路在于双指针的遍历先把数组从小到大排序，然后再从nums[k]开始从左往右进行遍历因为a + b + c = target此时只要 b + c = target - a相等的话就算找到了然后就是相当于定义两个双指针分别对应 b 和 cint i = k+1int j = nums.length() - 1然后 i , j从k的右边到数组的边界，从两头分别开始进行遍历如果nums[i] + nums[j] &lt; (target -nums[k]) 那么就说明i还需要更大一点才能相等,i++如果nums[i] + nums[j] &gt; (target -nums[k]) 那么就说明j还需要更小一点才能相等,j—最后nums[i] + nums[j] == (target -nums[k]) 的时候记录数据这个时候进行去重的操作，因为第一次相等之后，如果i,j,k后面还有重复的数字的话那么就会有重复的结果那么如果遇到符合条件的重复数组就i++,j—,k++去重 四数之和==&gt;三数之和==&gt;两数之和跟三数之和类似，多了层循环遍历数组，同时也需要注意数组的去重操作1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123; vector&lt;vector&lt;int&gt;&gt; res; sort(nums.begin(),nums.end()); for(int k=0;k&lt;nums.size();k++)&#123; int i = k + 1; int j = nums.size() - 1; while(i &lt; j)&#123; int value = nums[i] + nums[j]; if(value &gt; (0-nums[k]))&#123; j--; &#125;else if(value &lt; 0-nums[k])&#123; i++; &#125;else&#123; vector&lt;int&gt; list; list.push_back(nums[k]); list.push_back(nums[i]); list.push_back(nums[j]); res.push_back(list); while(i&lt;j &amp;&amp; nums[i] == nums[i+1])&#123; i++; &#125; while(i&lt;j &amp;&amp; nums[j] == nums[j-1])&#123; j--; &#125; i++; j--; &#125; &#125; while(k&lt;nums.size()-1 &amp;&amp; nums[k] == nums[k+1])&#123; k++; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190512]]></title>
    <url>%2F2019%2F05%2F12%2F20190512%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190509]]></title>
    <url>%2F2019%2F05%2F09%2F20190509%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190508]]></title>
    <url>%2F2019%2F05%2F08%2F20190508%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190507]]></title>
    <url>%2F2019%2F05%2F07%2F20190507%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190506]]></title>
    <url>%2F2019%2F05%2F06%2F20190506%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190505]]></title>
    <url>%2F2019%2F05%2F05%2F20190505%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-002]]></title>
    <url>%2F2019%2F05%2F04%2FLeetcode-002%2F</url>
    <content type="text"><![CDATA[2. 两数相加难度 : medium题目描述:给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。12345示例：输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 分析：两个非空的链表表示两个非负的整数，既然是按照逆序的方式来储存，那么就应该对两个链表分别从头开始遍历进行加和操作 用x,y来分别取出两个数对应的数位,用carry来记录是否需要进位先令carry = 0,再计算sum = x + y + carry;如果 sum &gt;= 10,则令carry = 1再让 sum % 10来组成新的数的每一位如果其中一个链表有数可以取出,而另一个链表的下一位为NULL则令为NULL的那一条链表对应的x或者y为0即可 然后最后结束的时候如果carry还为 1,说明最后还多出来一位,则应该再额外多进1。 自己在这题中遇到的问题:Leetcode给的构造函数(struct跟class一样啊，我真的是有点傻了)既然它给的有构造函数ListNode(int x) : val(x), next(NULL) {}则初始化对象的时候一定要调用,那么定义新的结点的时候就一定需要一个初始值(比如0),否则会报错。 代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123; ListNode *p1,*p2,*p3; ListNode *l3 = new ListNode(0); p1 = l1; p2 = l2; p3 = l3; int carry = 0; while(p1 != NULL || p2 != NULL) &#123; //如果对应的数位为NULL,则直接令其为0 int x = (p1 != NULL) ? p1-&gt;val : 0; int y = (p2 != NULL) ? p2-&gt;val : 0; int sum = x + y + carry; (sum / 10)? (carry = 1): (carry = 0); ListNode *s = new ListNode(0);//定义一个新的结点来存放结果,一定要初始化才行 s-&gt;val = sum % 10; p3-&gt;next = s; p3 = s; (p1 != NULL) &amp;&amp; (p1 = p1-&gt;next);//代替if的语句 (p2 != NULL) &amp;&amp; (p2 = p2-&gt;next); &#125; if(carry)//如果最后carry还为1,则说明还需进一位 &#123; ListNode *s = new ListNode(0); s-&gt;val = 1; p3-&gt;next = s; p3 = s; p3-&gt;next = NULL; &#125; l3 = l3-&gt;next; return l3; &#125;&#125;;]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新の开始？]]></title>
    <url>%2F2019%2F05%2F04%2F20190504%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>不知道自己在说些什么</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五一假期的一点感想]]></title>
    <url>%2F2019%2F05%2F02%2F20190502%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode-206]]></title>
    <url>%2F2019%2F04%2F29%2FLeetcode-206%2F</url>
    <content type="text"><![CDATA[206. 反转链表难度:easy反转一个单链表。 示例: 输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL进阶:你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 自己的解法：思路:至少需要三个结点p1,p2,p3来完成链表的逆序首先从链表头部开始，建立三个临时节点的引用，分别为p1，p2，p3。它们分别指向头节点、第二个节点、第三个节点。实现链表逆序的完整步骤如下：1.以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。2.三个临时节点引用p1，p2，p3分别向后移动一格位置。3.重复第1步的工作，以p2节点为视角，把p2节点原本指向p3的next指针倒转，指向p1。4.重复第2步的工作，三个临时节点引用p1，p2，p3分别向后移动一格位置。5.继续像这样子迭代下去，一直到p2是空为止。6.最后，把head节点的next指向空，成为逆序链表的尾节点。并且把p1赋值给head，让p1所在的节点成为逆序链表的头节点。 实现代码如下:方法1：迭代1234567891011121314151617181920212223242526272829303132333435/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; if(head == NULL || head-&gt;next == NULL) &#123; return head;//当头结点为空，或者它的下一个结点为空的话，返回head &#125; ListNode *p1,*p2,*p3;//声明三个中间变量来交换 p1 = head; p2 = head-&gt;next; p3 = NULL; while(p2 != NULL) &#123; p3 = p2-&gt;next; p2-&gt;next = p1; p1 = p2; p2 = p3; &#125; head-&gt;next = NULL; head = p1; return head; &#125; &#125;; 方法2: 递归递归版本稍微复杂一些，其关键在于反向工作。假设列表的其余部分已经被反转，现在我该如何反转它前面的部分？假设列表为：n1 → … → nk-1 → nk → nk+1 → … → nm → Ø 若从节点 nk+1 到 nm 已经被反转，而我们正处于 nk。 n1 → … → nk-1 → nk → nk+1 ← … ← nm 我们希望 nk+1 的下一个节点指向 nk。 所以，nk.next.next = nk; 要小心的是 n1 的下一个必须指向 Ø 。如果你忽略了这一点，你的链表中可能会产生循环。如果使用大小为 2 的链表测试代码，则可能会捕获此错误。 实现代码如下:1234567public ListNode reverseList(ListNode head) &#123; if (head == null || head.next == null) return head; ListNode p = reverseList(head.next); head.next.next = head; head.next = null; return p;&#125;复杂度分析 时间复杂度：O(n)。假设n是列表的长度，那么时间复杂度为O(n)。 空间复杂度：O(n)。由于使用递归，将会使用隐式栈空间。递归深度可能会达到n层。]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第九周小结]]></title>
    <url>%2F2019%2F04%2F28%2F%E7%AC%AC%E4%B9%9D%E5%91%A8%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷Oj-P1101]]></title>
    <url>%2F2019%2F04%2F24%2FluoguOj-P1101%2F</url>
    <content type="text"><![CDATA[洛谷OJ-P1101P1101 单词方阵题目描述给一n×n的字母方阵，内可能蕴含多个“yizhong”单词。单词在方阵中是沿着同一方向连续摆放的。摆放可沿着 8 个方向的任一方向，同一单词摆放时不再改变方向，单词与单词之间可以交叉,因此有可能共用字母。输出时，将不是单词的字母用*代替，以突出显示单词。例如：12345678910输入： 8 输出： qyizhong *yizhong gydthkjy gy****** nwidghji n*i***** orbzsfgz o**z**** hhgrhwth h***h*** zzzzzozo z****o** iwdfrgng i*****n* yyyygggg y******g输入输出格式输入格式：第一行输入一个数n。(7≤n≤100)。 第二行开始输入n×n的字母矩阵。 输出格式：突出显示单词的n×n矩阵。 思路：1.用两个数组来表示八个方向const int dx_shift[10] = {1,1,0,-1,-1,-1,0,1};const int dy_shift[10] = {0,-1,-1,-1,0,1,1,1};2.在搜索到y之后沿着一个方向搜索izhong，直至不跳出边界为止，搜索完毕如果符合条件记录到另外一个数组中3.j是步长，这里的j正好对应了yizhong 的第j位 所以正好可以对应起来dx = x + j dx_shift[i];dy = y + j dy_shift[i]; 完整代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//P1101 单词方阵int n;//n * n的矩阵//方向数组表示八个方向const int dx_shift[10] = &#123;1,1,0,-1,-1,-1,0,1&#125;;const int dy_shift[10] = &#123;0,-1,-1,-1,0,1,1,1&#125;;int dx,dy;const int maxn = 110;const string cmp = "yizhong";char Map[maxn][maxn],result[maxn][maxn];void dfs(int x,int y)//x,y表示当前点的坐标&#123; for(int i = 0;i &lt; 8;i++)//枚举八个方向 &#123; int flag = 1; for(int j = 1;j &lt;= 6;j++)//对同一方向连续探索6次,直至全部符合izhong为止 &#123; dx = x + j * dx_shift[i]; dy = y + j * dy_shift[i]; if(dx &lt; 1 || dx &gt; n || dy &lt; 1 || dy &gt; n)//若越界直接跳出循环,换一种方向继续尝试 &#123; flag = 0; break; &#125; if(Map[dx][dy] != cmp[j])//如果探索的第j位不符合也跳出循环进行下一次搜索 &#123; flag = 0; break; &#125; &#125; if(flag == 0) &#123; continue; &#125; else//符合条件记录到数组中 &#123; result[x][y] = 'y'; for(int j = 1;j &lt;= 6;j++) &#123; dx = x + j * dx_shift[i]; dy = y + j * dy_shift[i]; result[dx][dy] = Map[dx][dy]; &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; cin&gt;&gt;Map[i][j]; &#125; &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; result[i][j] = '*'; &#125; &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; if(Map[i][j] == 'y')//如果搜索到y就进行搜索 &#123; dfs(i,j); &#125; &#125; &#125; for(int i = 1;i &lt;= n;i++) &#123; for(int j = 1;j &lt;= n;j++) &#123; cout&lt;&lt;result[i][j]; &#125; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>洛谷OJ</category>
      </categories>
      <tags>
        <tag>每天ac的算法题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第八周小结]]></title>
    <url>%2F2019%2F04%2F20%2F%E7%AC%AC%E5%85%AB%E5%91%A8%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>记录自己的心得体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫评《ようこそ実力至上主義の教室へ》]]></title>
    <url>%2F2019%2F04%2F14%2F20190414%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>漫评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4月份不再摸鱼]]></title>
    <url>%2F2019%2F04%2F07%2Fdailylife%2F</url>
    <content type="text"><![CDATA[enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>随手写的一点东西</tag>
      </tags>
  </entry>
</search>
